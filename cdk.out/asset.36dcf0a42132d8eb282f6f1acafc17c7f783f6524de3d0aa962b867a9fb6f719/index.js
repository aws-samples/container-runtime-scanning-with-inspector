"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_ecs_1 = require("@aws-sdk/client-ecs");
const ecs = new client_ecs_1.ECSClient({});
// returns list of cluster ARN
const getListOfClusterARN = async () => {
    let clusterList = [];
    let nextToken;
    const input = {};
    const command = new client_ecs_1.ListClustersCommand(input);
    do {
        const response = await ecs.send(command);
        if (response != undefined) {
            nextToken = response.nextToken;
            clusterList = clusterList.concat(response.clusterArns);
        }
    } while (nextToken);
    return clusterList;
};
// returns list of ALL task ARN from specified cluster
const listTasksFromClusterARN = async (clusterName) => {
    let taskList = [];
    let nextToken;
    do {
        const input = {
            cluster: clusterName,
        };
        const command = new client_ecs_1.ListTasksCommand(input);
        const response = await ecs.send(command);
        if (response === undefined) {
            return undefined;
        }
        else {
            nextToken = response.nextToken;
            if (response.taskArns != undefined) {
                taskList = taskList.concat(response.taskArns);
            }
        }
    } while (nextToken);
    return taskList;
};
// formats task ARN to ID
const formatTaskName = (taskARN) => {
    const indexOfLastSlash = taskARN.lastIndexOf("/");
    const taskName = taskARN.substring(indexOfLastSlash + 1);
    return taskName;
};
const chunkArray = (array, chunkSize) => {
    const chunks = [];
    let index = 0;
    while (index < array.length) {
        chunks.push(array.slice(index, index + chunkSize));
        index += chunkSize;
    }
    return chunks;
};
const getTaskDescriptions = async (clusterARN, taskIdList) => {
    if (taskIdList.length <= 100) {
        const input = {
            tasks: taskIdList,
            cluster: clusterARN,
        };
        const command = new client_ecs_1.DescribeTasksCommand(input);
        const response = await ecs.send(command);
        if (response != undefined) {
            return response.tasks;
        }
    }
    else {
        const taskChunks = chunkArray(taskIdList, 100);
        let taskDescriptions = [];
        for (const taskChunk of taskChunks) {
            const input = {
                tasks: taskChunk,
                cluster: clusterARN,
            };
            const command = new client_ecs_1.DescribeTasksCommand(input);
            const response = await ecs.send(command);
            if (response != undefined) {
                taskDescriptions = taskDescriptions.concat(response.tasks);
            }
        }
        return taskDescriptions;
    }
    return undefined;
};
// compares event image digest with task image digest
const compareDigests = (eventImageDigest, imageDigest) => {
    return eventImageDigest === imageDigest;
};
// gets all task descriptions from all clusters
const getAllTaskDescriptions = async (clusterARNs) => {
    let returnTaskList = [];
    for (const cluster of clusterARNs) {
        const taskIds = await listTasksFromClusterARN(cluster);
        if (taskIds != undefined) {
            const taskDescriptions = await getTaskDescriptions(cluster, taskIds);
            if (taskDescriptions != undefined) {
                returnTaskList = returnTaskList.concat(taskDescriptions);
            }
        }
        else {
            return undefined;
        }
    }
    return returnTaskList;
};
// main lambda function
const handler = async function (event, context, callback) {
    const eventImageARN = event.resources[0];
    const eventImageARNDigestIndex = eventImageARN.lastIndexOf("/sha256:");
    const eventImageDigest = eventImageARN.slice(eventImageARNDigestIndex + 1);
    const clusterList = await getListOfClusterARN();
    const allTasks = await getAllTaskDescriptions(clusterList);
    if (allTasks != undefined) {
        for (const task of allTasks) {
            if (task.containers) {
                for (const container of task.containers) {
                    if (compareDigests(container.imageDigest, eventImageDigest)) {
                        console.log(`Container: ${container.name} has been found to have a new vulnerability. The associated image can be found here: ${container.image}`);
                    }
                }
            }
        }
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,