"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Imports
const aws_cdk_lib_1 = require("aws-cdk-lib");
const sqs = require("aws-cdk-lib/aws-sqs");
const defaults = require("../");
const assertions_1 = require("aws-cdk-lib/assertions");
const sqs_helper_1 = require("../lib/sqs-helper");
const kms = require("aws-cdk-lib/aws-kms");
const __1 = require("../");
test('Test deployment w/ encryptionMasterKey set on queueProps', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const cmk = new kms.Key(stack, 'EncryptionKey', {
        description: 'kms-key-description'
    });
    defaults.buildQueue(stack, 'queue', {
        queueProps: {
            encryptionMasterKey: cmk
        }
    });
    __1.expectKmsKeyAttachedToCorrectResource(stack, 'AWS::SQS::Queue', 'kms-key-description');
});
test('Test deployment w/ imported encryption key', () => {
    // Stack
    const stack = new aws_cdk_lib_1.Stack();
    // Helper declaration
    defaults.buildQueue(stack, 'existing-queue', {
        queueProps: {
            queueName: 'existing-queue'
        },
        enableEncryptionWithCustomerManagedKey: true,
        encryptionKey: defaults.buildEncryptionKey(stack)
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::SQS::Queue", {
        QueueName: "existing-queue"
    });
    template.hasResourceProperties("AWS::KMS::Key", {
        EnableKeyRotation: true
    });
});
test('Test deployment without imported encryption key', () => {
    // Stack
    const stack = new aws_cdk_lib_1.Stack();
    // Helper declaration
    defaults.buildQueue(stack, 'existing-queue', {
        queueProps: {
            queueName: 'existing-queue'
        }
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        QueueName: "existing-queue",
        KmsMasterKeyId: "alias/aws/sqs"
    });
});
test('Test deployment w/ construct created encryption key', () => {
    // Stack
    const stack = new aws_cdk_lib_1.Stack();
    // Helper declaration
    const buildQueueResponse = defaults.buildQueue(stack, 'existing-queue', {
        queueProps: {
            queueName: 'existing-queue'
        },
        enableEncryptionWithCustomerManagedKey: true,
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::SQS::Queue", {
        QueueName: "existing-queue"
    });
    template.hasResourceProperties("AWS::KMS::Key", {
        EnableKeyRotation: true
    });
    expect(buildQueueResponse.queue).toBeDefined();
    expect(buildQueueResponse.key).toBeDefined();
});
test('Test DLQ when existing Queue Provided', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const existingQueue = new sqs.Queue(stack, 'test-queue');
    const buildDlqProps = {
        existingQueueObj: existingQueue,
    };
    const returnedQueue = defaults.buildDeadLetterQueue(stack, buildDlqProps);
    expect(returnedQueue).toBeUndefined();
    assertions_1.Template.fromStack(stack).resourceCountIs("AWS::SQS::Queue", 1);
});
test('Test DLQ with all defaults', () => {
    const stack = new aws_cdk_lib_1.Stack();
    sqs_helper_1.buildDeadLetterQueue(stack, {});
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        KmsMasterKeyId: "alias/aws/sqs"
    });
});
test("Test DLQ with a provided properties", () => {
    const stack = new aws_cdk_lib_1.Stack();
    const testQueueName = "test-unique252";
    const returnedQueue = sqs_helper_1.buildDeadLetterQueue(stack, {
        deadLetterQueueProps: {
            queueName: testQueueName,
        },
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        QueueName: testQueueName,
    });
    expect(returnedQueue).toBeDefined();
});
test('Test DLQ with a provided maxReceiveCount', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const testMaxReceiveCount = 31;
    const dlqInterface = sqs_helper_1.buildDeadLetterQueue(stack, {
        maxReceiveCount: testMaxReceiveCount
    });
    expect(dlqInterface?.maxReceiveCount).toEqual(testMaxReceiveCount);
});
test('Test returning an existing Queue', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const testQueueName = 'existing-queue';
    const existingQueue = new sqs.Queue(stack, 'test-queue', {
        queueName: testQueueName
    });
    const buildQueueResponse = defaults.buildQueue(stack, 'newQueue', {
        existingQueueObj: existingQueue
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        QueueName: testQueueName,
    });
    expect(existingQueue.queueName).toEqual(buildQueueResponse.queue.queueName);
    expect(buildQueueResponse.key).not.toBeDefined();
});
test('Test creating a queue with a DLQ', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const dlqInterface = sqs_helper_1.buildDeadLetterQueue(stack, {});
    const buildQueueResponse = sqs_helper_1.buildQueue(stack, 'new-queue', {
        deadLetterQueue: dlqInterface
    });
    assertions_1.Template.fromStack(stack).resourceCountIs("AWS::SQS::Queue", 2);
    expect(buildQueueResponse.queue).toBeDefined();
    expect(buildQueueResponse.queue.deadLetterQueue).toBeDefined();
});
test('Test creating a FIFO queue', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const buildQueueResponse = sqs_helper_1.buildQueue(stack, 'new-queue', {
        queueProps: {
            fifo: true
        }
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        FifoQueue: true
    });
    expect(buildQueueResponse.queue.fifo).toBe(true);
});
//# sourceMappingURL=data:application/json;base64,