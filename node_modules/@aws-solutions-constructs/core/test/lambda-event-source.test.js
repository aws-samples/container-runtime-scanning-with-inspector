"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const defaults = require("../index");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
const lambda = require("aws-cdk-lib/aws-lambda");
const s3 = require("aws-cdk-lib/aws-s3");
const assertions_1 = require("aws-cdk-lib/assertions");
const aws_cdk_lib_1 = require("aws-cdk-lib");
test('test DynamoEventSourceProps with defaults', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const props = defaults.DynamoEventSourceProps(stack);
    expect(props.onFailure).toBeInstanceOf(aws_lambda_event_sources_1.SqsDlq);
    expect(props.startingPosition).toEqual("TRIM_HORIZON");
    expect(props.bisectBatchOnError).toEqual(true);
    expect(props.retryAttempts).toEqual(500);
    expect(props.maxRecordAge).toEqual(aws_cdk_lib_1.Duration.hours(24));
});
test('test DynamoEventSourceProps with deployDeadLetterQueue: false', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const props = defaults.DynamoEventSourceProps(stack, {
        deploySqsDlqQueue: false
    });
    expect(props).toEqual({
        startingPosition: "TRIM_HORIZON",
        bisectBatchOnError: true,
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        retryAttempts: 500
    });
});
test('test DynamoEventSourceProps override', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const myProps = {
        startingPosition: lambda.StartingPosition.LATEST,
        batchSize: 5,
        retryAttempts: 3
    };
    const props = defaults.DynamoEventSourceProps(stack, {
        eventSourceProps: myProps,
        deploySqsDlqQueue: false
    });
    expect(props).toEqual({
        batchSize: 5,
        startingPosition: "LATEST",
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        bisectBatchOnError: true,
        retryAttempts: 3
    });
});
test('test S3EventSourceProps w/ default props', () => {
    const props = defaults.S3EventSourceProps();
    expect(props).toEqual({
        events: ["s3:ObjectCreated:*"]
    });
});
test('test S3EventSourceProps w/ user props', () => {
    const s3EventSourceProps = {
        events: [
            s3.EventType.OBJECT_CREATED_POST
        ]
    };
    const props = defaults.S3EventSourceProps(s3EventSourceProps);
    expect(props).toEqual({
        events: ["s3:ObjectCreated:Post"]
    });
});
test('test KinesisEventSourceProps with defaults', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const props = defaults.KinesisEventSourceProps(stack);
    expect(props.onFailure).toBeInstanceOf(aws_lambda_event_sources_1.SqsDlq);
    expect(props.startingPosition).toEqual("TRIM_HORIZON");
    expect(props.bisectBatchOnError).toEqual(true);
    expect(props.retryAttempts).toEqual(500);
    expect(props.maxRecordAge).toEqual(aws_cdk_lib_1.Duration.hours(24));
});
test('test KinesisEventSourceProps with deployDeadLetterQueue: false', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const props = defaults.KinesisEventSourceProps(stack, {
        deploySqsDlqQueue: false
    });
    expect(props).toEqual({
        startingPosition: "TRIM_HORIZON",
        bisectBatchOnError: true,
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        retryAttempts: 500
    });
});
test('test KinesisEventSourceProps override', () => {
    const stack = new aws_cdk_lib_1.Stack();
    const myProps = {
        startingPosition: lambda.StartingPosition.LATEST,
        batchSize: 5,
        retryAttempts: 3
    };
    const props = defaults.KinesisEventSourceProps(stack, {
        eventSourceProps: myProps,
        deploySqsDlqQueue: false
    });
    expect(props).toEqual({
        batchSize: 5,
        startingPosition: "LATEST",
        maxRecordAge: aws_cdk_lib_1.Duration.hours(24),
        bisectBatchOnError: true,
        retryAttempts: 3
    });
});
test('test sqsDlqQueueProps override', () => {
    const stack = new aws_cdk_lib_1.Stack();
    defaults.KinesisEventSourceProps(stack, {
        sqsDlqQueueProps: {
            queueName: 'hello-world',
            visibilityTimeout: aws_cdk_lib_1.Duration.seconds(50)
        }
    });
    assertions_1.Template.fromStack(stack).hasResourceProperties("AWS::SQS::Queue", {
        QueueName: "hello-world",
        VisibilityTimeout: 50
    });
});
//# sourceMappingURL=data:application/json;base64,