import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { EKSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EKSClient";
import { DescribeAddonVersionsRequest, DescribeAddonVersionsResponse } from "../models/models_0";
/**
 * @public
 *
 * The input for {@link DescribeAddonVersionsCommand}.
 */
export interface DescribeAddonVersionsCommandInput extends DescribeAddonVersionsRequest {
}
/**
 * @public
 *
 * The output of {@link DescribeAddonVersionsCommand}.
 */
export interface DescribeAddonVersionsCommandOutput extends DescribeAddonVersionsResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Describes the versions for an add-on. Information such as the Kubernetes versions that you
 *             can use the add-on with, the <code>owner</code>, <code>publisher</code>, and the
 *                 <code>type</code> of the add-on are returned. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { EKSClient, DescribeAddonVersionsCommand } from "@aws-sdk/client-eks"; // ES Modules import
 * // const { EKSClient, DescribeAddonVersionsCommand } = require("@aws-sdk/client-eks"); // CommonJS import
 * const client = new EKSClient(config);
 * const input = { // DescribeAddonVersionsRequest
 *   kubernetesVersion: "STRING_VALUE",
 *   maxResults: Number("int"),
 *   nextToken: "STRING_VALUE",
 *   addonName: "STRING_VALUE",
 *   types: [ // StringList
 *     "STRING_VALUE",
 *   ],
 *   publishers: [
 *     "STRING_VALUE",
 *   ],
 *   owners: [
 *     "STRING_VALUE",
 *   ],
 * };
 * const command = new DescribeAddonVersionsCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @param DescribeAddonVersionsCommandInput - {@link DescribeAddonVersionsCommandInput}
 * @returns {@link DescribeAddonVersionsCommandOutput}
 * @see {@link DescribeAddonVersionsCommandInput} for command's `input` shape.
 * @see {@link DescribeAddonVersionsCommandOutput} for command's `response` shape.
 * @see {@link EKSClientResolvedConfig | config} for EKSClient's `config` shape.
 *
 * @throws {@link InvalidParameterException} (client fault)
 *  <p>The specified parameter is invalid. Review the available parameters for the API
 *             request.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The specified resource could not be found. You can view your available clusters with
 *                 <a>ListClusters</a>. You can view your available managed node groups with
 *                 <a>ListNodegroups</a>. Amazon EKS clusters and node groups are
 *             Region-specific.</p>
 *
 * @throws {@link ServerException} (server fault)
 *  <p>These errors are usually caused by a server-side issue.</p>
 *
 *
 */
export declare class DescribeAddonVersionsCommand extends $Command<DescribeAddonVersionsCommandInput, DescribeAddonVersionsCommandOutput, EKSClientResolvedConfig> {
    readonly input: DescribeAddonVersionsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: DescribeAddonVersionsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EKSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAddonVersionsCommandInput, DescribeAddonVersionsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
