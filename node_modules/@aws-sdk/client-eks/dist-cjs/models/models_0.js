"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourcePropagationDelayException = exports.ConnectorConfigProvider = exports.NotFoundException = exports.BadRequestException = exports.ConfigStatus = exports.NodegroupStatus = exports.NodegroupIssueCode = exports.TaintEffect = exports.CapacityTypes = exports.FargateProfileStatus = exports.UnsupportedAvailabilityZoneException = exports.ServiceUnavailableException = exports.ResourceLimitExceededException = exports.ClusterStatus = exports.ClusterIssueCode = exports.LogType = exports.IpFamily = exports.ResolveConflicts = exports.ServerException = exports.ResourceNotFoundException = exports.ResourceInUseException = exports.InvalidRequestException = exports.InvalidParameterException = exports.ClientException = exports.UpdateType = exports.UpdateStatus = exports.UpdateParamType = exports.ErrorCode = exports.AMITypes = exports.AddonStatus = exports.AddonIssueCode = exports.AccessDeniedException = void 0;
const EKSServiceException_1 = require("./EKSServiceException");
class AccessDeniedException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
exports.AccessDeniedException = AccessDeniedException;
exports.AddonIssueCode = {
    ACCESS_DENIED: "AccessDenied",
    ADMISSION_REQUEST_DENIED: "AdmissionRequestDenied",
    CLUSTER_UNREACHABLE: "ClusterUnreachable",
    CONFIGURATION_CONFLICT: "ConfigurationConflict",
    INSUFFICIENT_NUMBER_OF_REPLICAS: "InsufficientNumberOfReplicas",
    INTERNAL_FAILURE: "InternalFailure",
    K8S_RESOURCE_NOT_FOUND: "K8sResourceNotFound",
    UNSUPPORTED_ADDON_MODIFICATION: "UnsupportedAddonModification",
};
exports.AddonStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DEGRADED: "DEGRADED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
exports.AMITypes = {
    AL2_ARM_64: "AL2_ARM_64",
    AL2_x86_64: "AL2_x86_64",
    AL2_x86_64_GPU: "AL2_x86_64_GPU",
    BOTTLEROCKET_ARM_64: "BOTTLEROCKET_ARM_64",
    BOTTLEROCKET_ARM_64_NVIDIA: "BOTTLEROCKET_ARM_64_NVIDIA",
    BOTTLEROCKET_x86_64: "BOTTLEROCKET_x86_64",
    BOTTLEROCKET_x86_64_NVIDIA: "BOTTLEROCKET_x86_64_NVIDIA",
    CUSTOM: "CUSTOM",
    WINDOWS_CORE_2019_x86_64: "WINDOWS_CORE_2019_x86_64",
    WINDOWS_CORE_2022_x86_64: "WINDOWS_CORE_2022_x86_64",
    WINDOWS_FULL_2019_x86_64: "WINDOWS_FULL_2019_x86_64",
    WINDOWS_FULL_2022_x86_64: "WINDOWS_FULL_2022_x86_64",
};
exports.ErrorCode = {
    ACCESS_DENIED: "AccessDenied",
    ADMISSION_REQUEST_DENIED: "AdmissionRequestDenied",
    CLUSTER_UNREACHABLE: "ClusterUnreachable",
    CONFIGURATION_CONFLICT: "ConfigurationConflict",
    ENI_LIMIT_REACHED: "EniLimitReached",
    INSUFFICIENT_FREE_ADDRESSES: "InsufficientFreeAddresses",
    INSUFFICIENT_NUMBER_OF_REPLICAS: "InsufficientNumberOfReplicas",
    IP_NOT_AVAILABLE: "IpNotAvailable",
    K8S_RESOURCE_NOT_FOUND: "K8sResourceNotFound",
    NODE_CREATION_FAILURE: "NodeCreationFailure",
    OPERATION_NOT_PERMITTED: "OperationNotPermitted",
    POD_EVICTION_FAILURE: "PodEvictionFailure",
    SECURITY_GROUP_NOT_FOUND: "SecurityGroupNotFound",
    SUBNET_NOT_FOUND: "SubnetNotFound",
    UNKNOWN: "Unknown",
    UNSUPPORTED_ADDON_MODIFICATION: "UnsupportedAddonModification",
    VPC_ID_NOT_FOUND: "VpcIdNotFound",
};
exports.UpdateParamType = {
    ADDON_VERSION: "AddonVersion",
    CLUSTER_LOGGING: "ClusterLogging",
    DESIRED_SIZE: "DesiredSize",
    ENCRYPTION_CONFIG: "EncryptionConfig",
    ENDPOINT_PRIVATE_ACCESS: "EndpointPrivateAccess",
    ENDPOINT_PUBLIC_ACCESS: "EndpointPublicAccess",
    IDENTITY_PROVIDER_CONFIG: "IdentityProviderConfig",
    LABELS_TO_ADD: "LabelsToAdd",
    LABELS_TO_REMOVE: "LabelsToRemove",
    LAUNCH_TEMPLATE_NAME: "LaunchTemplateName",
    LAUNCH_TEMPLATE_VERSION: "LaunchTemplateVersion",
    MAX_SIZE: "MaxSize",
    MAX_UNAVAILABLE: "MaxUnavailable",
    MAX_UNAVAILABLE_PERCENTAGE: "MaxUnavailablePercentage",
    MIN_SIZE: "MinSize",
    PLATFORM_VERSION: "PlatformVersion",
    PUBLIC_ACCESS_CIDRS: "PublicAccessCidrs",
    RELEASE_VERSION: "ReleaseVersion",
    RESOLVE_CONFLICTS: "ResolveConflicts",
    SERVICE_ACCOUNT_ROLE_ARN: "ServiceAccountRoleArn",
    TAINTS_TO_ADD: "TaintsToAdd",
    TAINTS_TO_REMOVE: "TaintsToRemove",
    VERSION: "Version",
};
exports.UpdateStatus = {
    CANCELLED: "Cancelled",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    SUCCESSFUL: "Successful",
};
exports.UpdateType = {
    ADDON_UPDATE: "AddonUpdate",
    ASSOCIATE_ENCRYPTION_CONFIG: "AssociateEncryptionConfig",
    ASSOCIATE_IDENTITY_PROVIDER_CONFIG: "AssociateIdentityProviderConfig",
    CONFIG_UPDATE: "ConfigUpdate",
    DISASSOCIATE_IDENTITY_PROVIDER_CONFIG: "DisassociateIdentityProviderConfig",
    ENDPOINT_ACCESS_UPDATE: "EndpointAccessUpdate",
    LOGGING_UPDATE: "LoggingUpdate",
    VERSION_UPDATE: "VersionUpdate",
};
class ClientException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.addonName = opts.addonName;
    }
}
exports.ClientException = ClientException;
class InvalidParameterException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.fargateProfileName = opts.fargateProfileName;
        this.addonName = opts.addonName;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class InvalidRequestException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.addonName = opts.addonName;
    }
}
exports.InvalidRequestException = InvalidRequestException;
class ResourceInUseException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.addonName = opts.addonName;
    }
}
exports.ResourceInUseException = ResourceInUseException;
class ResourceNotFoundException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.fargateProfileName = opts.fargateProfileName;
        this.addonName = opts.addonName;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ServerException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.addonName = opts.addonName;
    }
}
exports.ServerException = ServerException;
exports.ResolveConflicts = {
    NONE: "NONE",
    OVERWRITE: "OVERWRITE",
    PRESERVE: "PRESERVE",
};
exports.IpFamily = {
    IPV4: "ipv4",
    IPV6: "ipv6",
};
exports.LogType = {
    API: "api",
    AUDIT: "audit",
    AUTHENTICATOR: "authenticator",
    CONTROLLER_MANAGER: "controllerManager",
    SCHEDULER: "scheduler",
};
exports.ClusterIssueCode = {
    ACCESS_DENIED: "AccessDenied",
    CLUSTER_UNREACHABLE: "ClusterUnreachable",
    CONFIGURATION_CONFLICT: "ConfigurationConflict",
    INTERNAL_FAILURE: "InternalFailure",
    RESOURCE_LIMIT_EXCEEDED: "ResourceLimitExceeded",
    RESOURCE_NOT_FOUND: "ResourceNotFound",
};
exports.ClusterStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING: "PENDING",
    UPDATING: "UPDATING",
};
class ResourceLimitExceededException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
    }
}
exports.ResourceLimitExceededException = ResourceLimitExceededException;
class ServiceUnavailableException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class UnsupportedAvailabilityZoneException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedAvailabilityZoneException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedAvailabilityZoneException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedAvailabilityZoneException.prototype);
        this.clusterName = opts.clusterName;
        this.nodegroupName = opts.nodegroupName;
        this.validZones = opts.validZones;
    }
}
exports.UnsupportedAvailabilityZoneException = UnsupportedAvailabilityZoneException;
exports.FargateProfileStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
exports.CapacityTypes = {
    ON_DEMAND: "ON_DEMAND",
    SPOT: "SPOT",
};
exports.TaintEffect = {
    NO_EXECUTE: "NO_EXECUTE",
    NO_SCHEDULE: "NO_SCHEDULE",
    PREFER_NO_SCHEDULE: "PREFER_NO_SCHEDULE",
};
exports.NodegroupIssueCode = {
    ACCESS_DENIED: "AccessDenied",
    ASG_INSTANCE_LAUNCH_FAILURES: "AsgInstanceLaunchFailures",
    AUTO_SCALING_GROUP_INVALID_CONFIGURATION: "AutoScalingGroupInvalidConfiguration",
    AUTO_SCALING_GROUP_NOT_FOUND: "AutoScalingGroupNotFound",
    CLUSTER_UNREACHABLE: "ClusterUnreachable",
    EC2_LAUNCH_TEMPLATE_NOT_FOUND: "Ec2LaunchTemplateNotFound",
    EC2_LAUNCH_TEMPLATE_VERSION_MISMATCH: "Ec2LaunchTemplateVersionMismatch",
    EC2_SECURITY_GROUP_DELETION_FAILURE: "Ec2SecurityGroupDeletionFailure",
    EC2_SECURITY_GROUP_NOT_FOUND: "Ec2SecurityGroupNotFound",
    EC2_SUBNET_INVALID_CONFIGURATION: "Ec2SubnetInvalidConfiguration",
    EC2_SUBNET_MISSING_IPV6_ASSIGNMENT: "Ec2SubnetMissingIpv6Assignment",
    EC2_SUBNET_NOT_FOUND: "Ec2SubnetNotFound",
    IAM_INSTANCE_PROFILE_NOT_FOUND: "IamInstanceProfileNotFound",
    IAM_LIMIT_EXCEEDED: "IamLimitExceeded",
    IAM_NODE_ROLE_NOT_FOUND: "IamNodeRoleNotFound",
    INSTANCE_LIMIT_EXCEEDED: "InstanceLimitExceeded",
    INSUFFICIENT_FREE_ADDRESSES: "InsufficientFreeAddresses",
    INTERNAL_FAILURE: "InternalFailure",
    NODE_CREATION_FAILURE: "NodeCreationFailure",
};
exports.NodegroupStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DEGRADED: "DEGRADED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
exports.ConfigStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
class BadRequestException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
exports.BadRequestException = BadRequestException;
class NotFoundException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
exports.NotFoundException = NotFoundException;
exports.ConnectorConfigProvider = {
    AKS: "AKS",
    ANTHOS: "ANTHOS",
    EC2: "EC2",
    EKS_ANYWHERE: "EKS_ANYWHERE",
    GKE: "GKE",
    OPENSHIFT: "OPENSHIFT",
    OTHER: "OTHER",
    RANCHER: "RANCHER",
    TANZU: "TANZU",
};
class ResourcePropagationDelayException extends EKSServiceException_1.EKSServiceException {
    constructor(opts) {
        super({
            name: "ResourcePropagationDelayException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourcePropagationDelayException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePropagationDelayException.prototype);
    }
}
exports.ResourcePropagationDelayException = ResourcePropagationDelayException;
