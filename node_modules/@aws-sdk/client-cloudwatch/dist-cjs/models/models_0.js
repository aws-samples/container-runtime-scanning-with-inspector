"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidFormatFault = exports.LimitExceededFault = exports.RecentlyActive = exports.MetricStreamOutputFormat = exports.StatusCode = exports.LimitExceededException = exports.Statistic = exports.EvaluationState = exports.InvalidNextToken = exports.ScanBy = exports.ResourceNotFoundException = exports.MissingRequiredParameterException = exports.InvalidParameterValueException = exports.InvalidParameterCombinationException = exports.InternalServiceFault = exports.ResourceNotFound = exports.DashboardNotFoundError = exports.DashboardInvalidInputError = exports.ConcurrentModificationException = exports.StateValue = exports.ComparisonOperator = exports.AnomalyDetectorType = exports.AnomalyDetectorStateValue = exports.StandardUnit = exports.HistoryItemType = exports.AlarmType = exports.ActionsSuppressedBy = void 0;
const CloudWatchServiceException_1 = require("./CloudWatchServiceException");
exports.ActionsSuppressedBy = {
    Alarm: "Alarm",
    ExtensionPeriod: "ExtensionPeriod",
    WaitPeriod: "WaitPeriod",
};
exports.AlarmType = {
    CompositeAlarm: "CompositeAlarm",
    MetricAlarm: "MetricAlarm",
};
exports.HistoryItemType = {
    Action: "Action",
    ConfigurationUpdate: "ConfigurationUpdate",
    StateUpdate: "StateUpdate",
};
exports.StandardUnit = {
    Bits: "Bits",
    Bits_Second: "Bits/Second",
    Bytes: "Bytes",
    Bytes_Second: "Bytes/Second",
    Count: "Count",
    Count_Second: "Count/Second",
    Gigabits: "Gigabits",
    Gigabits_Second: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    Gigabytes_Second: "Gigabytes/Second",
    Kilobits: "Kilobits",
    Kilobits_Second: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    Kilobytes_Second: "Kilobytes/Second",
    Megabits: "Megabits",
    Megabits_Second: "Megabits/Second",
    Megabytes: "Megabytes",
    Megabytes_Second: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    Terabits_Second: "Terabits/Second",
    Terabytes: "Terabytes",
    Terabytes_Second: "Terabytes/Second",
};
exports.AnomalyDetectorStateValue = {
    PENDING_TRAINING: "PENDING_TRAINING",
    TRAINED: "TRAINED",
    TRAINED_INSUFFICIENT_DATA: "TRAINED_INSUFFICIENT_DATA",
};
exports.AnomalyDetectorType = {
    METRIC_MATH: "METRIC_MATH",
    SINGLE_METRIC: "SINGLE_METRIC",
};
exports.ComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    GreaterThanUpperThreshold: "GreaterThanUpperThreshold",
    LessThanLowerOrGreaterThanUpperThreshold: "LessThanLowerOrGreaterThanUpperThreshold",
    LessThanLowerThreshold: "LessThanLowerThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
exports.StateValue = {
    ALARM: "ALARM",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    OK: "OK",
};
class ConcurrentModificationException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
class DashboardInvalidInputError extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "DashboardInvalidInputError",
            $fault: "client",
            ...opts,
        });
        this.name = "DashboardInvalidInputError";
        this.$fault = "client";
        Object.setPrototypeOf(this, DashboardInvalidInputError.prototype);
        this.dashboardValidationMessages = opts.dashboardValidationMessages;
    }
}
exports.DashboardInvalidInputError = DashboardInvalidInputError;
class DashboardNotFoundError extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "DashboardNotFoundError",
            $fault: "client",
            ...opts,
        });
        this.name = "DashboardNotFoundError";
        this.$fault = "client";
        Object.setPrototypeOf(this, DashboardNotFoundError.prototype);
    }
}
exports.DashboardNotFoundError = DashboardNotFoundError;
class ResourceNotFound extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
    }
}
exports.ResourceNotFound = ResourceNotFound;
class InternalServiceFault extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceFault",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceFault";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceFault.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServiceFault = InternalServiceFault;
class InvalidParameterCombinationException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterCombinationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterCombinationException.prototype);
    }
}
exports.InvalidParameterCombinationException = InvalidParameterCombinationException;
class InvalidParameterValueException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
exports.InvalidParameterValueException = InvalidParameterValueException;
class MissingRequiredParameterException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "MissingRequiredParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingRequiredParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingRequiredParameterException.prototype);
    }
}
exports.MissingRequiredParameterException = MissingRequiredParameterException;
class ResourceNotFoundException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.ResourceType = opts.ResourceType;
        this.ResourceId = opts.ResourceId;
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ScanBy = {
    TIMESTAMP_ASCENDING: "TimestampAscending",
    TIMESTAMP_DESCENDING: "TimestampDescending",
};
class InvalidNextToken extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
    }
}
exports.InvalidNextToken = InvalidNextToken;
exports.EvaluationState = {
    PARTIAL_DATA: "PARTIAL_DATA",
};
exports.Statistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
class LimitExceededException extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
exports.StatusCode = {
    COMPLETE: "Complete",
    FORBIDDEN: "Forbidden",
    INTERNAL_ERROR: "InternalError",
    PARTIAL_DATA: "PartialData",
};
exports.MetricStreamOutputFormat = {
    JSON: "json",
    OPEN_TELEMETRY_0_7: "opentelemetry0.7",
};
exports.RecentlyActive = {
    PT3H: "PT3H",
};
class LimitExceededFault extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
exports.LimitExceededFault = LimitExceededFault;
class InvalidFormatFault extends CloudWatchServiceException_1.CloudWatchServiceException {
    constructor(opts) {
        super({
            name: "InvalidFormatFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFormatFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFormatFault.prototype);
    }
}
exports.InvalidFormatFault = InvalidFormatFault;
