"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1PublishVersionCommand = exports.serializeAws_restJson1PublishLayerVersionCommand = exports.serializeAws_restJson1ListVersionsByFunctionCommand = exports.serializeAws_restJson1ListTagsCommand = exports.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports.serializeAws_restJson1ListLayerVersionsCommand = exports.serializeAws_restJson1ListLayersCommand = exports.serializeAws_restJson1ListFunctionUrlConfigsCommand = exports.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports.serializeAws_restJson1ListFunctionsCommand = exports.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports.serializeAws_restJson1ListEventSourceMappingsCommand = exports.serializeAws_restJson1ListCodeSigningConfigsCommand = exports.serializeAws_restJson1ListAliasesCommand = exports.serializeAws_restJson1InvokeAsyncCommand = exports.serializeAws_restJson1InvokeCommand = exports.serializeAws_restJson1GetRuntimeManagementConfigCommand = exports.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1GetPolicyCommand = exports.serializeAws_restJson1GetLayerVersionPolicyCommand = exports.serializeAws_restJson1GetLayerVersionByArnCommand = exports.serializeAws_restJson1GetLayerVersionCommand = exports.serializeAws_restJson1GetFunctionUrlConfigCommand = exports.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1GetFunctionConfigurationCommand = exports.serializeAws_restJson1GetFunctionConcurrencyCommand = exports.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1GetFunctionCommand = exports.serializeAws_restJson1GetEventSourceMappingCommand = exports.serializeAws_restJson1GetCodeSigningConfigCommand = exports.serializeAws_restJson1GetAliasCommand = exports.serializeAws_restJson1GetAccountSettingsCommand = exports.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1DeleteLayerVersionCommand = exports.serializeAws_restJson1DeleteFunctionUrlConfigCommand = exports.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1DeleteFunctionConcurrencyCommand = exports.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1DeleteFunctionCommand = exports.serializeAws_restJson1DeleteEventSourceMappingCommand = exports.serializeAws_restJson1DeleteCodeSigningConfigCommand = exports.serializeAws_restJson1DeleteAliasCommand = exports.serializeAws_restJson1CreateFunctionUrlConfigCommand = exports.serializeAws_restJson1CreateFunctionCommand = exports.serializeAws_restJson1CreateEventSourceMappingCommand = exports.serializeAws_restJson1CreateCodeSigningConfigCommand = exports.serializeAws_restJson1CreateAliasCommand = exports.serializeAws_restJson1AddPermissionCommand = exports.serializeAws_restJson1AddLayerVersionPermissionCommand = void 0;
exports.deserializeAws_restJson1InvokeAsyncCommand = exports.deserializeAws_restJson1InvokeCommand = exports.deserializeAws_restJson1GetRuntimeManagementConfigCommand = exports.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1GetPolicyCommand = exports.deserializeAws_restJson1GetLayerVersionPolicyCommand = exports.deserializeAws_restJson1GetLayerVersionByArnCommand = exports.deserializeAws_restJson1GetLayerVersionCommand = exports.deserializeAws_restJson1GetFunctionUrlConfigCommand = exports.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1GetFunctionConfigurationCommand = exports.deserializeAws_restJson1GetFunctionConcurrencyCommand = exports.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1GetFunctionCommand = exports.deserializeAws_restJson1GetEventSourceMappingCommand = exports.deserializeAws_restJson1GetCodeSigningConfigCommand = exports.deserializeAws_restJson1GetAliasCommand = exports.deserializeAws_restJson1GetAccountSettingsCommand = exports.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1DeleteLayerVersionCommand = exports.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = exports.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = exports.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1DeleteFunctionCommand = exports.deserializeAws_restJson1DeleteEventSourceMappingCommand = exports.deserializeAws_restJson1DeleteCodeSigningConfigCommand = exports.deserializeAws_restJson1DeleteAliasCommand = exports.deserializeAws_restJson1CreateFunctionUrlConfigCommand = exports.deserializeAws_restJson1CreateFunctionCommand = exports.deserializeAws_restJson1CreateEventSourceMappingCommand = exports.deserializeAws_restJson1CreateCodeSigningConfigCommand = exports.deserializeAws_restJson1CreateAliasCommand = exports.deserializeAws_restJson1AddPermissionCommand = exports.deserializeAws_restJson1AddLayerVersionPermissionCommand = exports.serializeAws_restJson1UpdateFunctionUrlConfigCommand = exports.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1UpdateFunctionConfigurationCommand = exports.serializeAws_restJson1UpdateFunctionCodeCommand = exports.serializeAws_restJson1UpdateEventSourceMappingCommand = exports.serializeAws_restJson1UpdateCodeSigningConfigCommand = exports.serializeAws_restJson1UpdateAliasCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1RemovePermissionCommand = exports.serializeAws_restJson1RemoveLayerVersionPermissionCommand = exports.serializeAws_restJson1PutRuntimeManagementConfigCommand = exports.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1PutFunctionConcurrencyCommand = void 0;
exports.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = exports.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1UpdateFunctionConfigurationCommand = exports.deserializeAws_restJson1UpdateFunctionCodeCommand = exports.deserializeAws_restJson1UpdateEventSourceMappingCommand = exports.deserializeAws_restJson1UpdateCodeSigningConfigCommand = exports.deserializeAws_restJson1UpdateAliasCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1RemovePermissionCommand = exports.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = exports.deserializeAws_restJson1PutRuntimeManagementConfigCommand = exports.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1PutFunctionConcurrencyCommand = exports.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1PublishVersionCommand = exports.deserializeAws_restJson1PublishLayerVersionCommand = exports.deserializeAws_restJson1ListVersionsByFunctionCommand = exports.deserializeAws_restJson1ListTagsCommand = exports.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports.deserializeAws_restJson1ListLayerVersionsCommand = exports.deserializeAws_restJson1ListLayersCommand = exports.deserializeAws_restJson1ListFunctionUrlConfigsCommand = exports.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports.deserializeAws_restJson1ListFunctionsCommand = exports.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports.deserializeAws_restJson1ListEventSourceMappingsCommand = exports.deserializeAws_restJson1ListCodeSigningConfigsCommand = exports.deserializeAws_restJson1ListAliasesCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const LambdaServiceException_1 = require("../models/LambdaServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_restJson1AddLayerVersionPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    const query = map({
        RevisionId: [, input.RevisionId],
    });
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: input.Action }),
        ...(input.OrganizationId != null && { OrganizationId: input.OrganizationId }),
        ...(input.Principal != null && { Principal: input.Principal }),
        ...(input.StatementId != null && { StatementId: input.StatementId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1AddLayerVersionPermissionCommand = serializeAws_restJson1AddLayerVersionPermissionCommand;
const serializeAws_restJson1AddPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: input.Action }),
        ...(input.EventSourceToken != null && { EventSourceToken: input.EventSourceToken }),
        ...(input.FunctionUrlAuthType != null && { FunctionUrlAuthType: input.FunctionUrlAuthType }),
        ...(input.Principal != null && { Principal: input.Principal }),
        ...(input.PrincipalOrgID != null && { PrincipalOrgID: input.PrincipalOrgID }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.SourceAccount != null && { SourceAccount: input.SourceAccount }),
        ...(input.SourceArn != null && { SourceArn: input.SourceArn }),
        ...(input.StatementId != null && { StatementId: input.StatementId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1AddPermissionCommand = serializeAws_restJson1AddPermissionCommand;
const serializeAws_restJson1CreateAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoutingConfig != null && {
            RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateAliasCommand = serializeAws_restJson1CreateAliasCommand;
const serializeAws_restJson1CreateCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2020-04-22/code-signing-configs";
    let body;
    body = JSON.stringify({
        ...(input.AllowedPublishers != null && {
            AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context),
        }),
        ...(input.CodeSigningPolicies != null && {
            CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateCodeSigningConfigCommand = serializeAws_restJson1CreateCodeSigningConfigCommand;
const serializeAws_restJson1CreateEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings";
    let body;
    body = JSON.stringify({
        ...(input.AmazonManagedKafkaEventSourceConfig != null && {
            AmazonManagedKafkaEventSourceConfig: serializeAws_restJson1AmazonManagedKafkaEventSourceConfig(input.AmazonManagedKafkaEventSourceConfig, context),
        }),
        ...(input.BatchSize != null && { BatchSize: input.BatchSize }),
        ...(input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError }),
        ...(input.DestinationConfig != null && {
            DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.DocumentDBEventSourceConfig != null && {
            DocumentDBEventSourceConfig: serializeAws_restJson1DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context),
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.EventSourceArn != null && { EventSourceArn: input.EventSourceArn }),
        ...(input.FilterCriteria != null && {
            FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context),
        }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.FunctionResponseTypes != null && {
            FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context),
        }),
        ...(input.MaximumBatchingWindowInSeconds != null && {
            MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds,
        }),
        ...(input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
        ...(input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor }),
        ...(input.Queues != null && { Queues: serializeAws_restJson1Queues(input.Queues, context) }),
        ...(input.ScalingConfig != null && {
            ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context),
        }),
        ...(input.SelfManagedEventSource != null && {
            SelfManagedEventSource: serializeAws_restJson1SelfManagedEventSource(input.SelfManagedEventSource, context),
        }),
        ...(input.SelfManagedKafkaEventSourceConfig != null && {
            SelfManagedKafkaEventSourceConfig: serializeAws_restJson1SelfManagedKafkaEventSourceConfig(input.SelfManagedKafkaEventSourceConfig, context),
        }),
        ...(input.SourceAccessConfigurations != null && {
            SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context),
        }),
        ...(input.StartingPosition != null && { StartingPosition: input.StartingPosition }),
        ...(input.StartingPositionTimestamp != null && {
            StartingPositionTimestamp: Math.round(input.StartingPositionTimestamp.getTime() / 1000),
        }),
        ...(input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) }),
        ...(input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEventSourceMappingCommand = serializeAws_restJson1CreateEventSourceMappingCommand;
const serializeAws_restJson1CreateFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions";
    let body;
    body = JSON.stringify({
        ...(input.Architectures != null && {
            Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context),
        }),
        ...(input.Code != null && { Code: serializeAws_restJson1FunctionCode(input.Code, context) }),
        ...(input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }),
        ...(input.DeadLetterConfig != null && {
            DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) }),
        ...(input.EphemeralStorage != null && {
            EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context),
        }),
        ...(input.FileSystemConfigs != null && {
            FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context),
        }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.Handler != null && { Handler: input.Handler }),
        ...(input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) }),
        ...(input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn }),
        ...(input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) }),
        ...(input.MemorySize != null && { MemorySize: input.MemorySize }),
        ...(input.PackageType != null && { PackageType: input.PackageType }),
        ...(input.Publish != null && { Publish: input.Publish }),
        ...(input.Role != null && { Role: input.Role }),
        ...(input.Runtime != null && { Runtime: input.Runtime }),
        ...(input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) }),
        ...(input.Timeout != null && { Timeout: input.Timeout }),
        ...(input.TracingConfig != null && {
            TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context),
        }),
        ...(input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateFunctionCommand = serializeAws_restJson1CreateFunctionCommand;
const serializeAws_restJson1CreateFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.AuthType != null && { AuthType: input.AuthType }),
        ...(input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1CreateFunctionUrlConfigCommand = serializeAws_restJson1CreateFunctionUrlConfigCommand;
const serializeAws_restJson1DeleteAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteAliasCommand = serializeAws_restJson1DeleteAliasCommand;
const serializeAws_restJson1DeleteCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteCodeSigningConfigCommand = serializeAws_restJson1DeleteCodeSigningConfigCommand;
const serializeAws_restJson1DeleteEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEventSourceMappingCommand = serializeAws_restJson1DeleteEventSourceMappingCommand;
const serializeAws_restJson1DeleteFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteFunctionCommand = serializeAws_restJson1DeleteFunctionCommand;
const serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
const serializeAws_restJson1DeleteFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2017-10-31/functions/{FunctionName}/concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteFunctionConcurrencyCommand = serializeAws_restJson1DeleteFunctionConcurrencyCommand;
const serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
const serializeAws_restJson1DeleteFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteFunctionUrlConfigCommand = serializeAws_restJson1DeleteFunctionUrlConfigCommand;
const serializeAws_restJson1DeleteLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteLayerVersionCommand = serializeAws_restJson1DeleteLayerVersionCommand;
const serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
const serializeAws_restJson1GetAccountSettingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2016-08-19/account-settings";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAccountSettingsCommand = serializeAws_restJson1GetAccountSettingsCommand;
const serializeAws_restJson1GetAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAliasCommand = serializeAws_restJson1GetAliasCommand;
const serializeAws_restJson1GetCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetCodeSigningConfigCommand = serializeAws_restJson1GetCodeSigningConfigCommand;
const serializeAws_restJson1GetEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEventSourceMappingCommand = serializeAws_restJson1GetEventSourceMappingCommand;
const serializeAws_restJson1GetFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionCommand = serializeAws_restJson1GetFunctionCommand;
const serializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = serializeAws_restJson1GetFunctionCodeSigningConfigCommand;
const serializeAws_restJson1GetFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionConcurrencyCommand = serializeAws_restJson1GetFunctionConcurrencyCommand;
const serializeAws_restJson1GetFunctionConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/configuration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionConfigurationCommand = serializeAws_restJson1GetFunctionConfigurationCommand;
const serializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = serializeAws_restJson1GetFunctionEventInvokeConfigCommand;
const serializeAws_restJson1GetFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetFunctionUrlConfigCommand = serializeAws_restJson1GetFunctionUrlConfigCommand;
const serializeAws_restJson1GetLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetLayerVersionCommand = serializeAws_restJson1GetLayerVersionCommand;
const serializeAws_restJson1GetLayerVersionByArnCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers";
    const query = map({
        find: [, "LayerVersion"],
        Arn: [, (0, smithy_client_1.expectNonNull)(input.Arn, `Arn`)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetLayerVersionByArnCommand = serializeAws_restJson1GetLayerVersionByArnCommand;
const serializeAws_restJson1GetLayerVersionPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetLayerVersionPolicyCommand = serializeAws_restJson1GetLayerVersionPolicyCommand;
const serializeAws_restJson1GetPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetPolicyCommand = serializeAws_restJson1GetPolicyCommand;
const serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = serializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
const serializeAws_restJson1GetRuntimeManagementConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2021-07-20/functions/{FunctionName}/runtime-management-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetRuntimeManagementConfigCommand = serializeAws_restJson1GetRuntimeManagementConfigCommand;
const serializeAws_restJson1InvokeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-invocation-type": input.InvocationType,
        "x-amz-log-type": input.LogType,
        "x-amz-client-context": input.ClientContext,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/invocations";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    if (input.Payload !== undefined) {
        body = input.Payload;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1InvokeCommand = serializeAws_restJson1InvokeCommand;
const serializeAws_restJson1InvokeAsyncCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2014-11-13/functions/{FunctionName}/invoke-async";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    if (input.InvokeArgs !== undefined) {
        body = input.InvokeArgs;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1InvokeAsyncCommand = serializeAws_restJson1InvokeAsyncCommand;
const serializeAws_restJson1ListAliasesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListAliasesCommand = serializeAws_restJson1ListAliasesCommand;
const serializeAws_restJson1ListCodeSigningConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2020-04-22/code-signing-configs";
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListCodeSigningConfigsCommand = serializeAws_restJson1ListCodeSigningConfigsCommand;
const serializeAws_restJson1ListEventSourceMappingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings";
    const query = map({
        EventSourceArn: [, input.EventSourceArn],
        FunctionName: [, input.FunctionName],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListEventSourceMappingsCommand = serializeAws_restJson1ListEventSourceMappingsCommand;
const serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config/list";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = serializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
const serializeAws_restJson1ListFunctionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions";
    const query = map({
        MasterRegion: [, input.MasterRegion],
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListFunctionsCommand = serializeAws_restJson1ListFunctionsCommand;
const serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
const serializeAws_restJson1ListFunctionUrlConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/urls";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListFunctionUrlConfigsCommand = serializeAws_restJson1ListFunctionUrlConfigsCommand;
const serializeAws_restJson1ListLayersCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers";
    const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListLayersCommand = serializeAws_restJson1ListLayersCommand;
const serializeAws_restJson1ListLayerVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers/{LayerName}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListLayerVersionsCommand = serializeAws_restJson1ListLayerVersionsCommand;
const serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        List: [, "ALL"],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
const serializeAws_restJson1ListTagsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ListTagsCommand = serializeAws_restJson1ListTagsCommand;
const serializeAws_restJson1ListVersionsByFunctionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListVersionsByFunctionCommand = serializeAws_restJson1ListVersionsByFunctionCommand;
const serializeAws_restJson1PublishLayerVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2018-10-31/layers/{LayerName}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CompatibleArchitectures != null && {
            CompatibleArchitectures: serializeAws_restJson1CompatibleArchitectures(input.CompatibleArchitectures, context),
        }),
        ...(input.CompatibleRuntimes != null && {
            CompatibleRuntimes: serializeAws_restJson1CompatibleRuntimes(input.CompatibleRuntimes, context),
        }),
        ...(input.Content != null && { Content: serializeAws_restJson1LayerVersionContentInput(input.Content, context) }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.LicenseInfo != null && { LicenseInfo: input.LicenseInfo }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PublishLayerVersionCommand = serializeAws_restJson1PublishLayerVersionCommand;
const serializeAws_restJson1PublishVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CodeSha256 != null && { CodeSha256: input.CodeSha256 }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PublishVersionCommand = serializeAws_restJson1PublishVersionCommand;
const serializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-06-30/functions/{FunctionName}/code-signing-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = serializeAws_restJson1PutFunctionCodeSigningConfigCommand;
const serializeAws_restJson1PutFunctionConcurrencyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2017-10-31/functions/{FunctionName}/concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.ReservedConcurrentExecutions != null && {
            ReservedConcurrentExecutions: input.ReservedConcurrentExecutions,
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutFunctionConcurrencyCommand = serializeAws_restJson1PutFunctionConcurrencyCommand;
const serializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.DestinationConfig != null && {
            DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = serializeAws_restJson1PutFunctionEventInvokeConfigCommand;
const serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-30/functions/{FunctionName}/provisioned-concurrency";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)],
    });
    let body;
    body = JSON.stringify({
        ...(input.ProvisionedConcurrentExecutions != null && {
            ProvisionedConcurrentExecutions: input.ProvisionedConcurrentExecutions,
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = serializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
const serializeAws_restJson1PutRuntimeManagementConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2021-07-20/functions/{FunctionName}/runtime-management-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.RuntimeVersionArn != null && { RuntimeVersionArn: input.RuntimeVersionArn }),
        ...(input.UpdateRuntimeOn != null && { UpdateRuntimeOn: input.UpdateRuntimeOn }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1PutRuntimeManagementConfigCommand = serializeAws_restJson1PutRuntimeManagementConfigCommand;
const serializeAws_restJson1RemoveLayerVersionPermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
    const query = map({
        RevisionId: [, input.RevisionId],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1RemoveLayerVersionPermissionCommand = serializeAws_restJson1RemoveLayerVersionPermissionCommand;
const serializeAws_restJson1RemovePermissionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/policy/{StatementId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
        RevisionId: [, input.RevisionId],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1RemovePermissionCommand = serializeAws_restJson1RemovePermissionCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    let body;
    body = JSON.stringify({
        ...(input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2017-03-31/tags/{Resource}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
    const query = map({
        tagKeys: [
            (0, smithy_client_1.expectNonNull)(input.TagKeys, `TagKeys`) != null,
            () => (input.TagKeys || []).map((_entry) => _entry),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateAliasCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/aliases/{Name}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.RoutingConfig != null && {
            RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateAliasCommand = serializeAws_restJson1UpdateAliasCommand;
const serializeAws_restJson1UpdateCodeSigningConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
    let body;
    body = JSON.stringify({
        ...(input.AllowedPublishers != null && {
            AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context),
        }),
        ...(input.CodeSigningPolicies != null && {
            CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateCodeSigningConfigCommand = serializeAws_restJson1UpdateCodeSigningConfigCommand;
const serializeAws_restJson1UpdateEventSourceMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/event-source-mappings/{UUID}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
    let body;
    body = JSON.stringify({
        ...(input.BatchSize != null && { BatchSize: input.BatchSize }),
        ...(input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError }),
        ...(input.DestinationConfig != null && {
            DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.DocumentDBEventSourceConfig != null && {
            DocumentDBEventSourceConfig: serializeAws_restJson1DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context),
        }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.FilterCriteria != null && {
            FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context),
        }),
        ...(input.FunctionName != null && { FunctionName: input.FunctionName }),
        ...(input.FunctionResponseTypes != null && {
            FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context),
        }),
        ...(input.MaximumBatchingWindowInSeconds != null && {
            MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds,
        }),
        ...(input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
        ...(input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor }),
        ...(input.ScalingConfig != null && {
            ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context),
        }),
        ...(input.SourceAccessConfigurations != null && {
            SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context),
        }),
        ...(input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEventSourceMappingCommand = serializeAws_restJson1UpdateEventSourceMappingCommand;
const serializeAws_restJson1UpdateFunctionCodeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2015-03-31/functions/{FunctionName}/code";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.Architectures != null && {
            Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context),
        }),
        ...(input.DryRun != null && { DryRun: input.DryRun }),
        ...(input.ImageUri != null && { ImageUri: input.ImageUri }),
        ...(input.Publish != null && { Publish: input.Publish }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateFunctionCodeCommand = serializeAws_restJson1UpdateFunctionCodeCommand;
const serializeAws_restJson1UpdateFunctionConfigurationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2015-03-31/functions/{FunctionName}/configuration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    let body;
    body = JSON.stringify({
        ...(input.DeadLetterConfig != null && {
            DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) }),
        ...(input.EphemeralStorage != null && {
            EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context),
        }),
        ...(input.FileSystemConfigs != null && {
            FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context),
        }),
        ...(input.Handler != null && { Handler: input.Handler }),
        ...(input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) }),
        ...(input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn }),
        ...(input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) }),
        ...(input.MemorySize != null && { MemorySize: input.MemorySize }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.Role != null && { Role: input.Role }),
        ...(input.Runtime != null && { Runtime: input.Runtime }),
        ...(input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) }),
        ...(input.Timeout != null && { Timeout: input.Timeout }),
        ...(input.TracingConfig != null && {
            TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context),
        }),
        ...(input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateFunctionConfigurationCommand = serializeAws_restJson1UpdateFunctionConfigurationCommand;
const serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2019-09-25/functions/{FunctionName}/event-invoke-config";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.DestinationConfig != null && {
            DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context),
        }),
        ...(input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds }),
        ...(input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
const serializeAws_restJson1UpdateFunctionUrlConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2021-10-31/functions/{FunctionName}/url";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
    const query = map({
        Qualifier: [, input.Qualifier],
    });
    let body;
    body = JSON.stringify({
        ...(input.AuthType != null && { AuthType: input.AuthType }),
        ...(input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UpdateFunctionUrlConfigCommand = serializeAws_restJson1UpdateFunctionUrlConfigCommand;
const deserializeAws_restJson1AddLayerVersionPermissionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddLayerVersionPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
    }
    return contents;
};
exports.deserializeAws_restJson1AddLayerVersionPermissionCommand = deserializeAws_restJson1AddLayerVersionPermissionCommand;
const deserializeAws_restJson1AddLayerVersionPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
            throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1AddPermissionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
    }
    return contents;
};
exports.deserializeAws_restJson1AddPermissionCommand = deserializeAws_restJson1AddPermissionCommand;
const deserializeAws_restJson1AddPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
            throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateAliasCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateAliasCommand = deserializeAws_restJson1CreateAliasCommand;
const deserializeAws_restJson1CreateAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateCodeSigningConfigCommand = deserializeAws_restJson1CreateCodeSigningConfigCommand;
const deserializeAws_restJson1CreateCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateEventSourceMappingCommand = deserializeAws_restJson1CreateEventSourceMappingCommand;
const deserializeAws_restJson1CreateEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateFunctionCommand = deserializeAws_restJson1CreateFunctionCommand;
const deserializeAws_restJson1CreateFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateFunctionUrlConfigCommand = deserializeAws_restJson1CreateFunctionUrlConfigCommand;
const deserializeAws_restJson1CreateFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteAliasCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteAliasCommand = deserializeAws_restJson1DeleteAliasCommand;
const deserializeAws_restJson1DeleteAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteCodeSigningConfigCommand = deserializeAws_restJson1DeleteCodeSigningConfigCommand;
const deserializeAws_restJson1DeleteCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
    }
    return contents;
};
exports.deserializeAws_restJson1DeleteEventSourceMappingCommand = deserializeAws_restJson1DeleteEventSourceMappingCommand;
const deserializeAws_restJson1DeleteEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
            throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteFunctionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteFunctionCommand = deserializeAws_restJson1DeleteFunctionCommand;
const deserializeAws_restJson1DeleteFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
const deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = deserializeAws_restJson1DeleteFunctionConcurrencyCommand;
const deserializeAws_restJson1DeleteFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
const deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = deserializeAws_restJson1DeleteFunctionUrlConfigCommand;
const deserializeAws_restJson1DeleteFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteLayerVersionCommand = deserializeAws_restJson1DeleteLayerVersionCommand;
const deserializeAws_restJson1DeleteLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
const deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAccountSettingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccountLimit != null) {
        contents.AccountLimit = deserializeAws_restJson1AccountLimit(data.AccountLimit, context);
    }
    if (data.AccountUsage != null) {
        contents.AccountUsage = deserializeAws_restJson1AccountUsage(data.AccountUsage, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAccountSettingsCommand = deserializeAws_restJson1GetAccountSettingsCommand;
const deserializeAws_restJson1GetAccountSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAliasCommand = deserializeAws_restJson1GetAliasCommand;
const deserializeAws_restJson1GetAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetCodeSigningConfigCommand = deserializeAws_restJson1GetCodeSigningConfigCommand;
const deserializeAws_restJson1GetCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
    }
    return contents;
};
exports.deserializeAws_restJson1GetEventSourceMappingCommand = deserializeAws_restJson1GetEventSourceMappingCommand;
const deserializeAws_restJson1GetEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Code != null) {
        contents.Code = deserializeAws_restJson1FunctionCodeLocation(data.Code, context);
    }
    if (data.Concurrency != null) {
        contents.Concurrency = deserializeAws_restJson1Concurrency(data.Concurrency, context);
    }
    if (data.Configuration != null) {
        contents.Configuration = deserializeAws_restJson1FunctionConfiguration(data.Configuration, context);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionCommand = deserializeAws_restJson1GetFunctionCommand;
const deserializeAws_restJson1GetFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = deserializeAws_restJson1GetFunctionCodeSigningConfigCommand;
const deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionConcurrencyCommand = deserializeAws_restJson1GetFunctionConcurrencyCommand;
const deserializeAws_restJson1GetFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionConfigurationCommand = deserializeAws_restJson1GetFunctionConfigurationCommand;
const deserializeAws_restJson1GetFunctionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = deserializeAws_restJson1GetFunctionEventInvokeConfigCommand;
const deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
    }
    if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
    }
    return contents;
};
exports.deserializeAws_restJson1GetFunctionUrlConfigCommand = deserializeAws_restJson1GetFunctionUrlConfigCommand;
const deserializeAws_restJson1GetFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
    }
    return contents;
};
exports.deserializeAws_restJson1GetLayerVersionCommand = deserializeAws_restJson1GetLayerVersionCommand;
const deserializeAws_restJson1GetLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetLayerVersionByArnCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionByArnCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
    }
    return contents;
};
exports.deserializeAws_restJson1GetLayerVersionByArnCommand = deserializeAws_restJson1GetLayerVersionByArnCommand;
const deserializeAws_restJson1GetLayerVersionByArnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetLayerVersionPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    return contents;
};
exports.deserializeAws_restJson1GetLayerVersionPolicyCommand = deserializeAws_restJson1GetLayerVersionPolicyCommand;
const deserializeAws_restJson1GetLayerVersionPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    return contents;
};
exports.deserializeAws_restJson1GetPolicyCommand = deserializeAws_restJson1GetPolicyCommand;
const deserializeAws_restJson1GetPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
    }
    if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
    }
    if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
    }
    if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
    }
    return contents;
};
exports.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
const deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ProvisionedConcurrencyConfigNotFoundException":
        case "com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException":
            throw await deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRuntimeManagementConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRuntimeManagementConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
    }
    if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
    }
    return contents;
};
exports.deserializeAws_restJson1GetRuntimeManagementConfigCommand = deserializeAws_restJson1GetRuntimeManagementConfigCommand;
const deserializeAws_restJson1GetRuntimeManagementConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1InvokeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        FunctionError: [, output.headers["x-amz-function-error"]],
        LogResult: [, output.headers["x-amz-log-result"]],
        ExecutedVersion: [, output.headers["x-amz-executed-version"]],
    });
    const data = await collectBody(output.body, context);
    contents.Payload = data;
    map(contents, {
        StatusCode: [, output.statusCode],
    });
    return contents;
};
exports.deserializeAws_restJson1InvokeCommand = deserializeAws_restJson1InvokeCommand;
const deserializeAws_restJson1InvokeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EC2AccessDeniedException":
        case "com.amazonaws.lambda#EC2AccessDeniedException":
            throw await deserializeAws_restJson1EC2AccessDeniedExceptionResponse(parsedOutput, context);
        case "EC2ThrottledException":
        case "com.amazonaws.lambda#EC2ThrottledException":
            throw await deserializeAws_restJson1EC2ThrottledExceptionResponse(parsedOutput, context);
        case "EC2UnexpectedException":
        case "com.amazonaws.lambda#EC2UnexpectedException":
            throw await deserializeAws_restJson1EC2UnexpectedExceptionResponse(parsedOutput, context);
        case "EFSIOException":
        case "com.amazonaws.lambda#EFSIOException":
            throw await deserializeAws_restJson1EFSIOExceptionResponse(parsedOutput, context);
        case "EFSMountConnectivityException":
        case "com.amazonaws.lambda#EFSMountConnectivityException":
            throw await deserializeAws_restJson1EFSMountConnectivityExceptionResponse(parsedOutput, context);
        case "EFSMountFailureException":
        case "com.amazonaws.lambda#EFSMountFailureException":
            throw await deserializeAws_restJson1EFSMountFailureExceptionResponse(parsedOutput, context);
        case "EFSMountTimeoutException":
        case "com.amazonaws.lambda#EFSMountTimeoutException":
            throw await deserializeAws_restJson1EFSMountTimeoutExceptionResponse(parsedOutput, context);
        case "ENILimitReachedException":
        case "com.amazonaws.lambda#ENILimitReachedException":
            throw await deserializeAws_restJson1ENILimitReachedExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
            throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
            throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "InvalidSecurityGroupIDException":
        case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
            throw await deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse(parsedOutput, context);
        case "InvalidSubnetIDException":
        case "com.amazonaws.lambda#InvalidSubnetIDException":
            throw await deserializeAws_restJson1InvalidSubnetIDExceptionResponse(parsedOutput, context);
        case "InvalidZipFileException":
        case "com.amazonaws.lambda#InvalidZipFileException":
            throw await deserializeAws_restJson1InvalidZipFileExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.lambda#KMSAccessDeniedException":
            throw await deserializeAws_restJson1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.lambda#KMSDisabledException":
            throw await deserializeAws_restJson1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.lambda#KMSInvalidStateException":
            throw await deserializeAws_restJson1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.lambda#KMSNotFoundException":
            throw await deserializeAws_restJson1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "RequestTooLargeException":
        case "com.amazonaws.lambda#RequestTooLargeException":
            throw await deserializeAws_restJson1RequestTooLargeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.lambda#ResourceNotReadyException":
            throw await deserializeAws_restJson1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "SnapStartException":
        case "com.amazonaws.lambda#SnapStartException":
            throw await deserializeAws_restJson1SnapStartExceptionResponse(parsedOutput, context);
        case "SnapStartNotReadyException":
        case "com.amazonaws.lambda#SnapStartNotReadyException":
            throw await deserializeAws_restJson1SnapStartNotReadyExceptionResponse(parsedOutput, context);
        case "SnapStartTimeoutException":
        case "com.amazonaws.lambda#SnapStartTimeoutException":
            throw await deserializeAws_restJson1SnapStartTimeoutExceptionResponse(parsedOutput, context);
        case "SubnetIPAddressLimitReachedException":
        case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
            throw await deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.lambda#UnsupportedMediaTypeException":
            throw await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1InvokeAsyncCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeAsyncCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    map(contents, {
        Status: [, output.statusCode],
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1InvokeAsyncCommand = deserializeAws_restJson1InvokeAsyncCommand;
const deserializeAws_restJson1InvokeAsyncCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
            throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
            throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListAliasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAliasesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Aliases != null) {
        contents.Aliases = deserializeAws_restJson1AliasList(data.Aliases, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListAliasesCommand = deserializeAws_restJson1ListAliasesCommand;
const deserializeAws_restJson1ListAliasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListCodeSigningConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListCodeSigningConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigs != null) {
        contents.CodeSigningConfigs = deserializeAws_restJson1CodeSigningConfigList(data.CodeSigningConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListCodeSigningConfigsCommand = deserializeAws_restJson1ListCodeSigningConfigsCommand;
const deserializeAws_restJson1ListCodeSigningConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListEventSourceMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEventSourceMappingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.EventSourceMappings != null) {
        contents.EventSourceMappings = deserializeAws_restJson1EventSourceMappingsList(data.EventSourceMappings, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListEventSourceMappingsCommand = deserializeAws_restJson1ListEventSourceMappingsCommand;
const deserializeAws_restJson1ListEventSourceMappingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FunctionEventInvokeConfigs != null) {
        contents.FunctionEventInvokeConfigs = deserializeAws_restJson1FunctionEventInvokeConfigList(data.FunctionEventInvokeConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
const deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Functions != null) {
        contents.Functions = deserializeAws_restJson1FunctionList(data.Functions, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListFunctionsCommand = deserializeAws_restJson1ListFunctionsCommand;
const deserializeAws_restJson1ListFunctionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FunctionArns != null) {
        contents.FunctionArns = deserializeAws_restJson1FunctionArnList(data.FunctionArns, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
const deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListFunctionUrlConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionUrlConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FunctionUrlConfigs != null) {
        contents.FunctionUrlConfigs = deserializeAws_restJson1FunctionUrlConfigList(data.FunctionUrlConfigs, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListFunctionUrlConfigsCommand = deserializeAws_restJson1ListFunctionUrlConfigsCommand;
const deserializeAws_restJson1ListFunctionUrlConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListLayersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayersCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersList(data.Layers, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListLayersCommand = deserializeAws_restJson1ListLayersCommand;
const deserializeAws_restJson1ListLayersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListLayerVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayerVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.LayerVersions != null) {
        contents.LayerVersions = deserializeAws_restJson1LayerVersionsList(data.LayerVersions, context);
    }
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    return contents;
};
exports.deserializeAws_restJson1ListLayerVersionsCommand = deserializeAws_restJson1ListLayerVersionsCommand;
const deserializeAws_restJson1ListLayerVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    if (data.ProvisionedConcurrencyConfigs != null) {
        contents.ProvisionedConcurrencyConfigs = deserializeAws_restJson1ProvisionedConcurrencyConfigList(data.ProvisionedConcurrencyConfigs, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
const deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListTagsCommand = deserializeAws_restJson1ListTagsCommand;
const deserializeAws_restJson1ListTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListVersionsByFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListVersionsByFunctionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
    }
    if (data.Versions != null) {
        contents.Versions = deserializeAws_restJson1FunctionList(data.Versions, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListVersionsByFunctionCommand = deserializeAws_restJson1ListVersionsByFunctionCommand;
const deserializeAws_restJson1ListVersionsByFunctionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PublishLayerVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishLayerVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
    }
    if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
    }
    if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
    }
    if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
    }
    if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
    }
    if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
    }
    return contents;
};
exports.deserializeAws_restJson1PublishLayerVersionCommand = deserializeAws_restJson1PublishLayerVersionCommand;
const deserializeAws_restJson1PublishLayerVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PublishVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1PublishVersionCommand = deserializeAws_restJson1PublishVersionCommand;
const deserializeAws_restJson1PublishVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    return contents;
};
exports.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = deserializeAws_restJson1PutFunctionCodeSigningConfigCommand;
const deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutFunctionConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionConcurrencyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
    }
    return contents;
};
exports.deserializeAws_restJson1PutFunctionConcurrencyCommand = deserializeAws_restJson1PutFunctionConcurrencyCommand;
const deserializeAws_restJson1PutFunctionConcurrencyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    return contents;
};
exports.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = deserializeAws_restJson1PutFunctionEventInvokeConfigCommand;
const deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
    }
    if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
    }
    if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
    }
    if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
    }
    return contents;
};
exports.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
const deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutRuntimeManagementConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutRuntimeManagementConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
    }
    if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
    }
    return contents;
};
exports.deserializeAws_restJson1PutRuntimeManagementConfigCommand = deserializeAws_restJson1PutRuntimeManagementConfigCommand;
const deserializeAws_restJson1PutRuntimeManagementConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1RemoveLayerVersionPermissionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemoveLayerVersionPermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = deserializeAws_restJson1RemoveLayerVersionPermissionCommand;
const deserializeAws_restJson1RemoveLayerVersionPermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1RemovePermissionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemovePermissionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1RemovePermissionCommand = deserializeAws_restJson1RemovePermissionCommand;
const deserializeAws_restJson1RemovePermissionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateAliasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAliasCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateAliasCommand = deserializeAws_restJson1UpdateAliasCommand;
const deserializeAws_restJson1UpdateAliasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateCodeSigningConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateCodeSigningConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateCodeSigningConfigCommand = deserializeAws_restJson1UpdateCodeSigningConfigCommand;
const deserializeAws_restJson1UpdateCodeSigningConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEventSourceMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEventSourceMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
    }
    if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
    }
    if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
    }
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
    }
    if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
    }
    if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
    }
    if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
    }
    if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
    }
    if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
    }
    if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
    }
    if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
    }
    if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
    }
    if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
    }
    if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
    }
    if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
    }
    if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
    }
    if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
    }
    if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateEventSourceMappingCommand = deserializeAws_restJson1UpdateEventSourceMappingCommand;
const deserializeAws_restJson1UpdateEventSourceMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
            throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateFunctionCodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionCodeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateFunctionCodeCommand = deserializeAws_restJson1UpdateFunctionCodeCommand;
const deserializeAws_restJson1UpdateFunctionCodeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
            throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateFunctionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionConfigurationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
    }
    if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
    }
    if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
    }
    if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
    }
    if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
    }
    if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
    }
    if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
    }
    if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
    }
    if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
    }
    if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
    }
    if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
    }
    if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
    }
    if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
    }
    if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
    }
    if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
    }
    if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
    }
    if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
    }
    if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
    }
    if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
    }
    if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
    }
    if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
    }
    if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
    }
    if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
    }
    if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
    }
    if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
    }
    if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateFunctionConfigurationCommand = deserializeAws_restJson1UpdateFunctionConfigurationCommand;
const deserializeAws_restJson1UpdateFunctionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
            throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
            throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
            throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
            throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
    }
    if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
    }
    if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
const deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateFunctionUrlConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionUrlConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
    }
    if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
    }
    if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
    }
    if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
    }
    if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
    }
    if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = deserializeAws_restJson1UpdateFunctionUrlConfigCommand;
const deserializeAws_restJson1UpdateFunctionUrlConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
            throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
            throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
            throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LambdaServiceException_1.LambdaServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.CodeSigningConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1CodeStorageExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.CodeStorageExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1CodeVerificationFailedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.CodeVerificationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EC2AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EC2AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EC2ThrottledExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EC2ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EC2UnexpectedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.EC2ErrorCode != null) {
        contents.EC2ErrorCode = (0, smithy_client_1.expectString)(data.EC2ErrorCode);
    }
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EC2UnexpectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EFSIOExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EFSIOException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EFSMountConnectivityExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EFSMountConnectivityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EFSMountFailureExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EFSMountFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1EFSMountTimeoutExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.EFSMountTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ENILimitReachedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.ENILimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidCodeSignatureExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.InvalidCodeSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidParameterValueExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidRequestContentExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.InvalidRequestContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidRuntimeExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.InvalidRuntimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.InvalidSecurityGroupIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidSubnetIDExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.InvalidSubnetIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InvalidZipFileExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.InvalidZipFileException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1KMSAccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1KMSDisabledExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1KMSInvalidStateExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1KMSNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1PolicyLengthExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.PolicyLengthExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1PreconditionFailedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ProvisionedConcurrencyConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1RequestTooLargeExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.RequestTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ResourceConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ResourceNotReadyExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ServiceExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1SnapStartExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.SnapStartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1SnapStartNotReadyExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.SnapStartNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1SnapStartTimeoutExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.SnapStartTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    const exception = new models_0_1.SubnetIPAddressLimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]],
    });
    const data = parsedOutput.body;
    if (data.Reason != null) {
        contents.Reason = (0, smithy_client_1.expectString)(data.Reason);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.UnsupportedMediaTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1AdditionalVersionWeights = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.serializeFloat)(value);
        return acc;
    }, {});
};
const serializeAws_restJson1AliasRoutingConfiguration = (input, context) => {
    return {
        ...(input.AdditionalVersionWeights != null && {
            AdditionalVersionWeights: serializeAws_restJson1AdditionalVersionWeights(input.AdditionalVersionWeights, context),
        }),
    };
};
const serializeAws_restJson1AllowedPublishers = (input, context) => {
    return {
        ...(input.SigningProfileVersionArns != null && {
            SigningProfileVersionArns: serializeAws_restJson1SigningProfileVersionArns(input.SigningProfileVersionArns, context),
        }),
    };
};
const serializeAws_restJson1AllowMethodsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1AllowOriginsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (input, context) => {
    return {
        ...(input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }),
    };
};
const serializeAws_restJson1ArchitecturesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1CodeSigningPolicies = (input, context) => {
    return {
        ...(input.UntrustedArtifactOnDeployment != null && {
            UntrustedArtifactOnDeployment: input.UntrustedArtifactOnDeployment,
        }),
    };
};
const serializeAws_restJson1CompatibleArchitectures = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1CompatibleRuntimes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1Cors = (input, context) => {
    return {
        ...(input.AllowCredentials != null && { AllowCredentials: input.AllowCredentials }),
        ...(input.AllowHeaders != null && { AllowHeaders: serializeAws_restJson1HeadersList(input.AllowHeaders, context) }),
        ...(input.AllowMethods != null && {
            AllowMethods: serializeAws_restJson1AllowMethodsList(input.AllowMethods, context),
        }),
        ...(input.AllowOrigins != null && {
            AllowOrigins: serializeAws_restJson1AllowOriginsList(input.AllowOrigins, context),
        }),
        ...(input.ExposeHeaders != null && {
            ExposeHeaders: serializeAws_restJson1HeadersList(input.ExposeHeaders, context),
        }),
        ...(input.MaxAge != null && { MaxAge: input.MaxAge }),
    };
};
const serializeAws_restJson1DeadLetterConfig = (input, context) => {
    return {
        ...(input.TargetArn != null && { TargetArn: input.TargetArn }),
    };
};
const serializeAws_restJson1DestinationConfig = (input, context) => {
    return {
        ...(input.OnFailure != null && { OnFailure: serializeAws_restJson1OnFailure(input.OnFailure, context) }),
        ...(input.OnSuccess != null && { OnSuccess: serializeAws_restJson1OnSuccess(input.OnSuccess, context) }),
    };
};
const serializeAws_restJson1DocumentDBEventSourceConfig = (input, context) => {
    return {
        ...(input.CollectionName != null && { CollectionName: input.CollectionName }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
        ...(input.FullDocument != null && { FullDocument: input.FullDocument }),
    };
};
const serializeAws_restJson1EndpointLists = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1Endpoints = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = serializeAws_restJson1EndpointLists(value, context);
        return acc;
    }, {});
};
const serializeAws_restJson1Environment = (input, context) => {
    return {
        ...(input.Variables != null && { Variables: serializeAws_restJson1EnvironmentVariables(input.Variables, context) }),
    };
};
const serializeAws_restJson1EnvironmentVariables = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_restJson1EphemeralStorage = (input, context) => {
    return {
        ...(input.Size != null && { Size: input.Size }),
    };
};
const serializeAws_restJson1FileSystemConfig = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
        ...(input.LocalMountPath != null && { LocalMountPath: input.LocalMountPath }),
    };
};
const serializeAws_restJson1FileSystemConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1FileSystemConfig(entry, context);
    });
};
const serializeAws_restJson1Filter = (input, context) => {
    return {
        ...(input.Pattern != null && { Pattern: input.Pattern }),
    };
};
const serializeAws_restJson1FilterCriteria = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: serializeAws_restJson1FilterList(input.Filters, context) }),
    };
};
const serializeAws_restJson1FilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1Filter(entry, context);
    });
};
const serializeAws_restJson1FunctionCode = (input, context) => {
    return {
        ...(input.ImageUri != null && { ImageUri: input.ImageUri }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    };
};
const serializeAws_restJson1FunctionResponseTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1HeadersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ImageConfig = (input, context) => {
    return {
        ...(input.Command != null && { Command: serializeAws_restJson1StringList(input.Command, context) }),
        ...(input.EntryPoint != null && { EntryPoint: serializeAws_restJson1StringList(input.EntryPoint, context) }),
        ...(input.WorkingDirectory != null && { WorkingDirectory: input.WorkingDirectory }),
    };
};
const serializeAws_restJson1LayerList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1LayerVersionContentInput = (input, context) => {
    return {
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
        ...(input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion }),
        ...(input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }),
    };
};
const serializeAws_restJson1OnFailure = (input, context) => {
    return {
        ...(input.Destination != null && { Destination: input.Destination }),
    };
};
const serializeAws_restJson1OnSuccess = (input, context) => {
    return {
        ...(input.Destination != null && { Destination: input.Destination }),
    };
};
const serializeAws_restJson1Queues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ScalingConfig = (input, context) => {
    return {
        ...(input.MaximumConcurrency != null && { MaximumConcurrency: input.MaximumConcurrency }),
    };
};
const serializeAws_restJson1SecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1SelfManagedEventSource = (input, context) => {
    return {
        ...(input.Endpoints != null && { Endpoints: serializeAws_restJson1Endpoints(input.Endpoints, context) }),
    };
};
const serializeAws_restJson1SelfManagedKafkaEventSourceConfig = (input, context) => {
    return {
        ...(input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }),
    };
};
const serializeAws_restJson1SigningProfileVersionArns = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1SnapStart = (input, context) => {
    return {
        ...(input.ApplyOn != null && { ApplyOn: input.ApplyOn }),
    };
};
const serializeAws_restJson1SourceAccessConfiguration = (input, context) => {
    return {
        ...(input.Type != null && { Type: input.Type }),
        ...(input.URI != null && { URI: input.URI }),
    };
};
const serializeAws_restJson1SourceAccessConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SourceAccessConfiguration(entry, context);
    });
};
const serializeAws_restJson1StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1SubnetIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_restJson1Topics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1TracingConfig = (input, context) => {
    return {
        ...(input.Mode != null && { Mode: input.Mode }),
    };
};
const serializeAws_restJson1VpcConfig = (input, context) => {
    return {
        ...(input.SecurityGroupIds != null && {
            SecurityGroupIds: serializeAws_restJson1SecurityGroupIds(input.SecurityGroupIds, context),
        }),
        ...(input.SubnetIds != null && { SubnetIds: serializeAws_restJson1SubnetIds(input.SubnetIds, context) }),
    };
};
const deserializeAws_restJson1AccountLimit = (output, context) => {
    return {
        CodeSizeUnzipped: (0, smithy_client_1.expectLong)(output.CodeSizeUnzipped),
        CodeSizeZipped: (0, smithy_client_1.expectLong)(output.CodeSizeZipped),
        ConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ConcurrentExecutions),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize),
        UnreservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.UnreservedConcurrentExecutions),
    };
};
const deserializeAws_restJson1AccountUsage = (output, context) => {
    return {
        FunctionCount: (0, smithy_client_1.expectLong)(output.FunctionCount),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize),
    };
};
const deserializeAws_restJson1AdditionalVersionWeights = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.limitedParseDouble)(value);
        return acc;
    }, {});
};
const deserializeAws_restJson1AliasConfiguration = (output, context) => {
    return {
        AliasArn: (0, smithy_client_1.expectString)(output.AliasArn),
        Description: (0, smithy_client_1.expectString)(output.Description),
        FunctionVersion: (0, smithy_client_1.expectString)(output.FunctionVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        RoutingConfig: output.RoutingConfig != null
            ? deserializeAws_restJson1AliasRoutingConfiguration(output.RoutingConfig, context)
            : undefined,
    };
};
const deserializeAws_restJson1AliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1AliasConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1AliasRoutingConfiguration = (output, context) => {
    return {
        AdditionalVersionWeights: output.AdditionalVersionWeights != null
            ? deserializeAws_restJson1AdditionalVersionWeights(output.AdditionalVersionWeights, context)
            : undefined,
    };
};
const deserializeAws_restJson1AllowedPublishers = (output, context) => {
    return {
        SigningProfileVersionArns: output.SigningProfileVersionArns != null
            ? deserializeAws_restJson1SigningProfileVersionArns(output.SigningProfileVersionArns, context)
            : undefined,
    };
};
const deserializeAws_restJson1AllowMethodsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1AllowOriginsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (output, context) => {
    return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId),
    };
};
const deserializeAws_restJson1ArchitecturesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1CodeSigningConfig = (output, context) => {
    return {
        AllowedPublishers: output.AllowedPublishers != null
            ? deserializeAws_restJson1AllowedPublishers(output.AllowedPublishers, context)
            : undefined,
        CodeSigningConfigArn: (0, smithy_client_1.expectString)(output.CodeSigningConfigArn),
        CodeSigningConfigId: (0, smithy_client_1.expectString)(output.CodeSigningConfigId),
        CodeSigningPolicies: output.CodeSigningPolicies != null
            ? deserializeAws_restJson1CodeSigningPolicies(output.CodeSigningPolicies, context)
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
    };
};
const deserializeAws_restJson1CodeSigningConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1CodeSigningConfig(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1CodeSigningPolicies = (output, context) => {
    return {
        UntrustedArtifactOnDeployment: (0, smithy_client_1.expectString)(output.UntrustedArtifactOnDeployment),
    };
};
const deserializeAws_restJson1CompatibleArchitectures = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1CompatibleRuntimes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Concurrency = (output, context) => {
    return {
        ReservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ReservedConcurrentExecutions),
    };
};
const deserializeAws_restJson1Cors = (output, context) => {
    return {
        AllowCredentials: (0, smithy_client_1.expectBoolean)(output.AllowCredentials),
        AllowHeaders: output.AllowHeaders != null ? deserializeAws_restJson1HeadersList(output.AllowHeaders, context) : undefined,
        AllowMethods: output.AllowMethods != null ? deserializeAws_restJson1AllowMethodsList(output.AllowMethods, context) : undefined,
        AllowOrigins: output.AllowOrigins != null ? deserializeAws_restJson1AllowOriginsList(output.AllowOrigins, context) : undefined,
        ExposeHeaders: output.ExposeHeaders != null ? deserializeAws_restJson1HeadersList(output.ExposeHeaders, context) : undefined,
        MaxAge: (0, smithy_client_1.expectInt32)(output.MaxAge),
    };
};
const deserializeAws_restJson1DeadLetterConfig = (output, context) => {
    return {
        TargetArn: (0, smithy_client_1.expectString)(output.TargetArn),
    };
};
const deserializeAws_restJson1DestinationConfig = (output, context) => {
    return {
        OnFailure: output.OnFailure != null ? deserializeAws_restJson1OnFailure(output.OnFailure, context) : undefined,
        OnSuccess: output.OnSuccess != null ? deserializeAws_restJson1OnSuccess(output.OnSuccess, context) : undefined,
    };
};
const deserializeAws_restJson1DocumentDBEventSourceConfig = (output, context) => {
    return {
        CollectionName: (0, smithy_client_1.expectString)(output.CollectionName),
        DatabaseName: (0, smithy_client_1.expectString)(output.DatabaseName),
        FullDocument: (0, smithy_client_1.expectString)(output.FullDocument),
    };
};
const deserializeAws_restJson1EndpointLists = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Endpoints = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_restJson1EndpointLists(value, context);
        return acc;
    }, {});
};
const deserializeAws_restJson1EnvironmentError = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_restJson1EnvironmentResponse = (output, context) => {
    return {
        Error: output.Error != null ? deserializeAws_restJson1EnvironmentError(output.Error, context) : undefined,
        Variables: output.Variables != null ? deserializeAws_restJson1EnvironmentVariables(output.Variables, context) : undefined,
    };
};
const deserializeAws_restJson1EnvironmentVariables = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const deserializeAws_restJson1EphemeralStorage = (output, context) => {
    return {
        Size: (0, smithy_client_1.expectInt32)(output.Size),
    };
};
const deserializeAws_restJson1EventSourceMappingConfiguration = (output, context) => {
    return {
        AmazonManagedKafkaEventSourceConfig: output.AmazonManagedKafkaEventSourceConfig != null
            ? deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(output.AmazonManagedKafkaEventSourceConfig, context)
            : undefined,
        BatchSize: (0, smithy_client_1.expectInt32)(output.BatchSize),
        BisectBatchOnFunctionError: (0, smithy_client_1.expectBoolean)(output.BisectBatchOnFunctionError),
        DestinationConfig: output.DestinationConfig != null
            ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context)
            : undefined,
        DocumentDBEventSourceConfig: output.DocumentDBEventSourceConfig != null
            ? deserializeAws_restJson1DocumentDBEventSourceConfig(output.DocumentDBEventSourceConfig, context)
            : undefined,
        EventSourceArn: (0, smithy_client_1.expectString)(output.EventSourceArn),
        FilterCriteria: output.FilterCriteria != null
            ? deserializeAws_restJson1FilterCriteria(output.FilterCriteria, context)
            : undefined,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionResponseTypes: output.FunctionResponseTypes != null
            ? deserializeAws_restJson1FunctionResponseTypeList(output.FunctionResponseTypes, context)
            : undefined,
        LastModified: output.LastModified != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified)))
            : undefined,
        LastProcessingResult: (0, smithy_client_1.expectString)(output.LastProcessingResult),
        MaximumBatchingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumBatchingWindowInSeconds),
        MaximumRecordAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumRecordAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts),
        ParallelizationFactor: (0, smithy_client_1.expectInt32)(output.ParallelizationFactor),
        Queues: output.Queues != null ? deserializeAws_restJson1Queues(output.Queues, context) : undefined,
        ScalingConfig: output.ScalingConfig != null ? deserializeAws_restJson1ScalingConfig(output.ScalingConfig, context) : undefined,
        SelfManagedEventSource: output.SelfManagedEventSource != null
            ? deserializeAws_restJson1SelfManagedEventSource(output.SelfManagedEventSource, context)
            : undefined,
        SelfManagedKafkaEventSourceConfig: output.SelfManagedKafkaEventSourceConfig != null
            ? deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(output.SelfManagedKafkaEventSourceConfig, context)
            : undefined,
        SourceAccessConfigurations: output.SourceAccessConfigurations != null
            ? deserializeAws_restJson1SourceAccessConfigurations(output.SourceAccessConfigurations, context)
            : undefined,
        StartingPosition: (0, smithy_client_1.expectString)(output.StartingPosition),
        StartingPositionTimestamp: output.StartingPositionTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartingPositionTimestamp)))
            : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        StateTransitionReason: (0, smithy_client_1.expectString)(output.StateTransitionReason),
        Topics: output.Topics != null ? deserializeAws_restJson1Topics(output.Topics, context) : undefined,
        TumblingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.TumblingWindowInSeconds),
        UUID: (0, smithy_client_1.expectString)(output.UUID),
    };
};
const deserializeAws_restJson1EventSourceMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EventSourceMappingConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1FileSystemConfig = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        LocalMountPath: (0, smithy_client_1.expectString)(output.LocalMountPath),
    };
};
const deserializeAws_restJson1FileSystemConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FileSystemConfig(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1Filter = (output, context) => {
    return {
        Pattern: (0, smithy_client_1.expectString)(output.Pattern),
    };
};
const deserializeAws_restJson1FilterCriteria = (output, context) => {
    return {
        Filters: output.Filters != null ? deserializeAws_restJson1FilterList(output.Filters, context) : undefined,
    };
};
const deserializeAws_restJson1FilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Filter(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1FunctionArnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1FunctionCodeLocation = (output, context) => {
    return {
        ImageUri: (0, smithy_client_1.expectString)(output.ImageUri),
        Location: (0, smithy_client_1.expectString)(output.Location),
        RepositoryType: (0, smithy_client_1.expectString)(output.RepositoryType),
        ResolvedImageUri: (0, smithy_client_1.expectString)(output.ResolvedImageUri),
    };
};
const deserializeAws_restJson1FunctionConfiguration = (output, context) => {
    return {
        Architectures: output.Architectures != null
            ? deserializeAws_restJson1ArchitecturesList(output.Architectures, context)
            : undefined,
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        DeadLetterConfig: output.DeadLetterConfig != null
            ? deserializeAws_restJson1DeadLetterConfig(output.DeadLetterConfig, context)
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Environment: output.Environment != null ? deserializeAws_restJson1EnvironmentResponse(output.Environment, context) : undefined,
        EphemeralStorage: output.EphemeralStorage != null
            ? deserializeAws_restJson1EphemeralStorage(output.EphemeralStorage, context)
            : undefined,
        FileSystemConfigs: output.FileSystemConfigs != null
            ? deserializeAws_restJson1FileSystemConfigList(output.FileSystemConfigs, context)
            : undefined,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionName: (0, smithy_client_1.expectString)(output.FunctionName),
        Handler: (0, smithy_client_1.expectString)(output.Handler),
        ImageConfigResponse: output.ImageConfigResponse != null
            ? deserializeAws_restJson1ImageConfigResponse(output.ImageConfigResponse, context)
            : undefined,
        KMSKeyArn: (0, smithy_client_1.expectString)(output.KMSKeyArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        LastUpdateStatus: (0, smithy_client_1.expectString)(output.LastUpdateStatus),
        LastUpdateStatusReason: (0, smithy_client_1.expectString)(output.LastUpdateStatusReason),
        LastUpdateStatusReasonCode: (0, smithy_client_1.expectString)(output.LastUpdateStatusReasonCode),
        Layers: output.Layers != null ? deserializeAws_restJson1LayersReferenceList(output.Layers, context) : undefined,
        MasterArn: (0, smithy_client_1.expectString)(output.MasterArn),
        MemorySize: (0, smithy_client_1.expectInt32)(output.MemorySize),
        PackageType: (0, smithy_client_1.expectString)(output.PackageType),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        Role: (0, smithy_client_1.expectString)(output.Role),
        Runtime: (0, smithy_client_1.expectString)(output.Runtime),
        RuntimeVersionConfig: output.RuntimeVersionConfig != null
            ? deserializeAws_restJson1RuntimeVersionConfig(output.RuntimeVersionConfig, context)
            : undefined,
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn),
        SnapStart: output.SnapStart != null ? deserializeAws_restJson1SnapStartResponse(output.SnapStart, context) : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        StateReason: (0, smithy_client_1.expectString)(output.StateReason),
        StateReasonCode: (0, smithy_client_1.expectString)(output.StateReasonCode),
        Timeout: (0, smithy_client_1.expectInt32)(output.Timeout),
        TracingConfig: output.TracingConfig != null
            ? deserializeAws_restJson1TracingConfigResponse(output.TracingConfig, context)
            : undefined,
        Version: (0, smithy_client_1.expectString)(output.Version),
        VpcConfig: output.VpcConfig != null ? deserializeAws_restJson1VpcConfigResponse(output.VpcConfig, context) : undefined,
    };
};
const deserializeAws_restJson1FunctionEventInvokeConfig = (output, context) => {
    return {
        DestinationConfig: output.DestinationConfig != null
            ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context)
            : undefined,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: output.LastModified != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified)))
            : undefined,
        MaximumEventAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumEventAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts),
    };
};
const deserializeAws_restJson1FunctionEventInvokeConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FunctionEventInvokeConfig(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1FunctionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FunctionConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1FunctionResponseTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1FunctionUrlConfig = (output, context) => {
    return {
        AuthType: (0, smithy_client_1.expectString)(output.AuthType),
        Cors: output.Cors != null ? deserializeAws_restJson1Cors(output.Cors, context) : undefined,
        CreationTime: (0, smithy_client_1.expectString)(output.CreationTime),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionUrl: (0, smithy_client_1.expectString)(output.FunctionUrl),
        LastModifiedTime: (0, smithy_client_1.expectString)(output.LastModifiedTime),
    };
};
const deserializeAws_restJson1FunctionUrlConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FunctionUrlConfig(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1HeadersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ImageConfig = (output, context) => {
    return {
        Command: output.Command != null ? deserializeAws_restJson1StringList(output.Command, context) : undefined,
        EntryPoint: output.EntryPoint != null ? deserializeAws_restJson1StringList(output.EntryPoint, context) : undefined,
        WorkingDirectory: (0, smithy_client_1.expectString)(output.WorkingDirectory),
    };
};
const deserializeAws_restJson1ImageConfigError = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_restJson1ImageConfigResponse = (output, context) => {
    return {
        Error: output.Error != null ? deserializeAws_restJson1ImageConfigError(output.Error, context) : undefined,
        ImageConfig: output.ImageConfig != null ? deserializeAws_restJson1ImageConfig(output.ImageConfig, context) : undefined,
    };
};
const deserializeAws_restJson1Layer = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn),
    };
};
const deserializeAws_restJson1LayersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1LayersListItem(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1LayersListItem = (output, context) => {
    return {
        LatestMatchingVersion: output.LatestMatchingVersion != null
            ? deserializeAws_restJson1LayerVersionsListItem(output.LatestMatchingVersion, context)
            : undefined,
        LayerArn: (0, smithy_client_1.expectString)(output.LayerArn),
        LayerName: (0, smithy_client_1.expectString)(output.LayerName),
    };
};
const deserializeAws_restJson1LayersReferenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Layer(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1LayerVersionContentOutput = (output, context) => {
    return {
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        Location: (0, smithy_client_1.expectString)(output.Location),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn),
    };
};
const deserializeAws_restJson1LayerVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1LayerVersionsListItem(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1LayerVersionsListItem = (output, context) => {
    return {
        CompatibleArchitectures: output.CompatibleArchitectures != null
            ? deserializeAws_restJson1CompatibleArchitectures(output.CompatibleArchitectures, context)
            : undefined,
        CompatibleRuntimes: output.CompatibleRuntimes != null
            ? deserializeAws_restJson1CompatibleRuntimes(output.CompatibleRuntimes, context)
            : undefined,
        CreatedDate: (0, smithy_client_1.expectString)(output.CreatedDate),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LayerVersionArn: (0, smithy_client_1.expectString)(output.LayerVersionArn),
        LicenseInfo: (0, smithy_client_1.expectString)(output.LicenseInfo),
        Version: (0, smithy_client_1.expectLong)(output.Version),
    };
};
const deserializeAws_restJson1OnFailure = (output, context) => {
    return {
        Destination: (0, smithy_client_1.expectString)(output.Destination),
    };
};
const deserializeAws_restJson1OnSuccess = (output, context) => {
    return {
        Destination: (0, smithy_client_1.expectString)(output.Destination),
    };
};
const deserializeAws_restJson1ProvisionedConcurrencyConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ProvisionedConcurrencyConfigListItem(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ProvisionedConcurrencyConfigListItem = (output, context) => {
    return {
        AllocatedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AllocatedProvisionedConcurrentExecutions),
        AvailableProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AvailableProvisionedConcurrentExecutions),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        RequestedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.RequestedProvisionedConcurrentExecutions),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusReason: (0, smithy_client_1.expectString)(output.StatusReason),
    };
};
const deserializeAws_restJson1Queues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1RuntimeVersionConfig = (output, context) => {
    return {
        Error: output.Error != null ? deserializeAws_restJson1RuntimeVersionError(output.Error, context) : undefined,
        RuntimeVersionArn: (0, smithy_client_1.expectString)(output.RuntimeVersionArn),
    };
};
const deserializeAws_restJson1RuntimeVersionError = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_restJson1ScalingConfig = (output, context) => {
    return {
        MaximumConcurrency: (0, smithy_client_1.expectInt32)(output.MaximumConcurrency),
    };
};
const deserializeAws_restJson1SecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1SelfManagedEventSource = (output, context) => {
    return {
        Endpoints: output.Endpoints != null ? deserializeAws_restJson1Endpoints(output.Endpoints, context) : undefined,
    };
};
const deserializeAws_restJson1SelfManagedKafkaEventSourceConfig = (output, context) => {
    return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId),
    };
};
const deserializeAws_restJson1SigningProfileVersionArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1SnapStartResponse = (output, context) => {
    return {
        ApplyOn: (0, smithy_client_1.expectString)(output.ApplyOn),
        OptimizationStatus: (0, smithy_client_1.expectString)(output.OptimizationStatus),
    };
};
const deserializeAws_restJson1SourceAccessConfiguration = (output, context) => {
    return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        URI: (0, smithy_client_1.expectString)(output.URI),
    };
};
const deserializeAws_restJson1SourceAccessConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SourceAccessConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1SubnetIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const deserializeAws_restJson1Topics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1TracingConfigResponse = (output, context) => {
    return {
        Mode: (0, smithy_client_1.expectString)(output.Mode),
    };
};
const deserializeAws_restJson1VpcConfigResponse = (output, context) => {
    return {
        SecurityGroupIds: output.SecurityGroupIds != null
            ? deserializeAws_restJson1SecurityGroupIds(output.SecurityGroupIds, context)
            : undefined,
        SubnetIds: output.SubnetIds != null ? deserializeAws_restJson1SubnetIds(output.SubnetIds, context) : undefined,
        VpcId: (0, smithy_client_1.expectString)(output.VpcId),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
