"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_restJson1RevokeRevisionCommand = exports.deserializeAws_restJson1ListTagsForResourceCommand = exports.deserializeAws_restJson1ListRevisionAssetsCommand = exports.deserializeAws_restJson1ListJobsCommand = exports.deserializeAws_restJson1ListEventActionsCommand = exports.deserializeAws_restJson1ListDataSetsCommand = exports.deserializeAws_restJson1ListDataSetRevisionsCommand = exports.deserializeAws_restJson1GetRevisionCommand = exports.deserializeAws_restJson1GetJobCommand = exports.deserializeAws_restJson1GetEventActionCommand = exports.deserializeAws_restJson1GetDataSetCommand = exports.deserializeAws_restJson1GetAssetCommand = exports.deserializeAws_restJson1DeleteRevisionCommand = exports.deserializeAws_restJson1DeleteEventActionCommand = exports.deserializeAws_restJson1DeleteDataSetCommand = exports.deserializeAws_restJson1DeleteAssetCommand = exports.deserializeAws_restJson1CreateRevisionCommand = exports.deserializeAws_restJson1CreateJobCommand = exports.deserializeAws_restJson1CreateEventActionCommand = exports.deserializeAws_restJson1CreateDataSetCommand = exports.deserializeAws_restJson1CancelJobCommand = exports.serializeAws_restJson1UpdateRevisionCommand = exports.serializeAws_restJson1UpdateEventActionCommand = exports.serializeAws_restJson1UpdateDataSetCommand = exports.serializeAws_restJson1UpdateAssetCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1StartJobCommand = exports.serializeAws_restJson1SendApiAssetCommand = exports.serializeAws_restJson1RevokeRevisionCommand = exports.serializeAws_restJson1ListTagsForResourceCommand = exports.serializeAws_restJson1ListRevisionAssetsCommand = exports.serializeAws_restJson1ListJobsCommand = exports.serializeAws_restJson1ListEventActionsCommand = exports.serializeAws_restJson1ListDataSetsCommand = exports.serializeAws_restJson1ListDataSetRevisionsCommand = exports.serializeAws_restJson1GetRevisionCommand = exports.serializeAws_restJson1GetJobCommand = exports.serializeAws_restJson1GetEventActionCommand = exports.serializeAws_restJson1GetDataSetCommand = exports.serializeAws_restJson1GetAssetCommand = exports.serializeAws_restJson1DeleteRevisionCommand = exports.serializeAws_restJson1DeleteEventActionCommand = exports.serializeAws_restJson1DeleteDataSetCommand = exports.serializeAws_restJson1DeleteAssetCommand = exports.serializeAws_restJson1CreateRevisionCommand = exports.serializeAws_restJson1CreateJobCommand = exports.serializeAws_restJson1CreateEventActionCommand = exports.serializeAws_restJson1CreateDataSetCommand = exports.serializeAws_restJson1CancelJobCommand = void 0;
exports.deserializeAws_restJson1UpdateRevisionCommand = exports.deserializeAws_restJson1UpdateEventActionCommand = exports.deserializeAws_restJson1UpdateDataSetCommand = exports.deserializeAws_restJson1UpdateAssetCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1StartJobCommand = exports.deserializeAws_restJson1SendApiAssetCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const DataExchangeServiceException_1 = require("../models/DataExchangeServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_restJson1CancelJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/jobs/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CancelJobCommand = serializeAws_restJson1CancelJobCommand;
const serializeAws_restJson1CreateDataSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets";
    let body;
    body = JSON.stringify({
        ...(input.AssetType != null && { AssetType: input.AssetType }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1MapOf__string(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDataSetCommand = serializeAws_restJson1CreateDataSetCommand;
const serializeAws_restJson1CreateEventActionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/event-actions";
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: serializeAws_restJson1Action(input.Action, context) }),
        ...(input.Event != null && { Event: serializeAws_restJson1Event(input.Event, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEventActionCommand = serializeAws_restJson1CreateEventActionCommand;
const serializeAws_restJson1CreateJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/jobs";
    let body;
    body = JSON.stringify({
        ...(input.Details != null && { Details: serializeAws_restJson1RequestDetails(input.Details, context) }),
        ...(input.Type != null && { Type: input.Type }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateJobCommand = serializeAws_restJson1CreateJobCommand;
const serializeAws_restJson1CreateRevisionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets/{DataSetId}/revisions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify({
        ...(input.Comment != null && { Comment: input.Comment }),
        ...(input.Tags != null && { Tags: serializeAws_restJson1MapOf__string(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateRevisionCommand = serializeAws_restJson1CreateRevisionCommand;
const serializeAws_restJson1DeleteAssetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AssetId", () => input.AssetId, "{AssetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteAssetCommand = serializeAws_restJson1DeleteAssetCommand;
const serializeAws_restJson1DeleteDataSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets/{DataSetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDataSetCommand = serializeAws_restJson1DeleteDataSetCommand;
const serializeAws_restJson1DeleteEventActionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/event-actions/{EventActionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEventActionCommand = serializeAws_restJson1DeleteEventActionCommand;
const serializeAws_restJson1DeleteRevisionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteRevisionCommand = serializeAws_restJson1DeleteRevisionCommand;
const serializeAws_restJson1GetAssetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AssetId", () => input.AssetId, "{AssetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAssetCommand = serializeAws_restJson1GetAssetCommand;
const serializeAws_restJson1GetDataSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets/{DataSetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDataSetCommand = serializeAws_restJson1GetDataSetCommand;
const serializeAws_restJson1GetEventActionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/event-actions/{EventActionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEventActionCommand = serializeAws_restJson1GetEventActionCommand;
const serializeAws_restJson1GetJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/jobs/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetJobCommand = serializeAws_restJson1GetJobCommand;
const serializeAws_restJson1GetRevisionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetRevisionCommand = serializeAws_restJson1GetRevisionCommand;
const serializeAws_restJson1ListDataSetRevisionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets/{DataSetId}/revisions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    const query = map({
        maxResults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        nextToken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDataSetRevisionsCommand = serializeAws_restJson1ListDataSetRevisionsCommand;
const serializeAws_restJson1ListDataSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets";
    const query = map({
        maxResults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        nextToken: [, input.NextToken],
        origin: [, input.Origin],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDataSetsCommand = serializeAws_restJson1ListDataSetsCommand;
const serializeAws_restJson1ListEventActionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/event-actions";
    const query = map({
        eventSourceId: [, input.EventSourceId],
        maxResults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        nextToken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListEventActionsCommand = serializeAws_restJson1ListEventActionsCommand;
const serializeAws_restJson1ListJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/jobs";
    const query = map({
        dataSetId: [, input.DataSetId],
        maxResults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        nextToken: [, input.NextToken],
        revisionId: [, input.RevisionId],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListJobsCommand = serializeAws_restJson1ListJobsCommand;
const serializeAws_restJson1ListRevisionAssetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    const query = map({
        maxResults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        nextToken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListRevisionAssetsCommand = serializeAws_restJson1ListRevisionAssetsCommand;
const serializeAws_restJson1ListTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ListTagsForResourceCommand = serializeAws_restJson1ListTagsForResourceCommand;
const serializeAws_restJson1RevokeRevisionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify({
        ...(input.RevocationComment != null && { RevocationComment: input.RevocationComment }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1RevokeRevisionCommand = serializeAws_restJson1RevokeRevisionCommand;
const serializeAws_restJson1SendApiAssetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        "x-amzn-dataexchange-asset-id": input.AssetId,
        "x-amzn-dataexchange-data-set-id": input.DataSetId,
        "x-amzn-dataexchange-http-method": input.Method,
        "x-amzn-dataexchange-path": input.Path,
        "x-amzn-dataexchange-revision-id": input.RevisionId,
        ...(input.RequestHeaders !== undefined &&
            Object.keys(input.RequestHeaders).reduce((acc, suffix) => {
                acc[`x-amzn-dataexchange-header-${suffix.toLowerCase()}`] = input.RequestHeaders[suffix];
                return acc;
            }, {})),
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1";
    const query = map({
        ...(0, smithy_client_1.convertMap)(input.QueryStringParameters),
    });
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "api-fulfill." + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1SendApiAssetCommand = serializeAws_restJson1SendApiAssetCommand;
const serializeAws_restJson1StartJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/jobs/{JobId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "JobId", () => input.JobId, "{JobId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1StartJobCommand = serializeAws_restJson1StartJobCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify({
        ...(input.Tags != null && { tags: serializeAws_restJson1MapOf__string(input.Tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{ResourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        tagKeys: [
            (0, smithy_client_1.expectNonNull)(input.TagKeys, `TagKeys`) != null,
            () => (input.TagKeys || []).map((_entry) => _entry),
        ],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateAssetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AssetId", () => input.AssetId, "{AssetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify({
        ...(input.Name != null && { Name: input.Name }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateAssetCommand = serializeAws_restJson1UpdateAssetCommand;
const serializeAws_restJson1UpdateDataSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/data-sets/{DataSetId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify({
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Name != null && { Name: input.Name }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDataSetCommand = serializeAws_restJson1UpdateDataSetCommand;
const serializeAws_restJson1UpdateEventActionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/v1/event-actions/{EventActionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    body = JSON.stringify({
        ...(input.Action != null && { Action: serializeAws_restJson1Action(input.Action, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEventActionCommand = serializeAws_restJson1UpdateEventActionCommand;
const serializeAws_restJson1UpdateRevisionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/v1/data-sets/{DataSetId}/revisions/{RevisionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DataSetId", () => input.DataSetId, "{DataSetId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify({
        ...(input.Comment != null && { Comment: input.Comment }),
        ...(input.Finalized != null && { Finalized: input.Finalized }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateRevisionCommand = serializeAws_restJson1UpdateRevisionCommand;
const deserializeAws_restJson1CancelJobCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1CancelJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1CancelJobCommand = deserializeAws_restJson1CancelJobCommand;
const deserializeAws_restJson1CancelJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDataSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.AssetType != null) {
        contents.AssetType = (0, smithy_client_1.expectString)(data.AssetType);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.Origin != null) {
        contents.Origin = (0, smithy_client_1.expectString)(data.Origin);
    }
    if (data.OriginDetails != null) {
        contents.OriginDetails = deserializeAws_restJson1OriginDetails(data.OriginDetails, context);
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1MapOf__string(data.Tags, context);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDataSetCommand = deserializeAws_restJson1CreateDataSetCommand;
const deserializeAws_restJson1CreateDataSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.dataexchange#ServiceLimitExceededException":
            throw await deserializeAws_restJson1ServiceLimitExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateEventActionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEventActionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Action != null) {
        contents.Action = deserializeAws_restJson1Action(data.Action, context);
    }
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Event != null) {
        contents.Event = deserializeAws_restJson1Event(data.Event, context);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1CreateEventActionCommand = deserializeAws_restJson1CreateEventActionCommand;
const deserializeAws_restJson1CreateEventActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.dataexchange#ServiceLimitExceededException":
            throw await deserializeAws_restJson1ServiceLimitExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Details != null) {
        contents.Details = deserializeAws_restJson1ResponseDetails(data.Details, context);
    }
    if (data.Errors != null) {
        contents.Errors = deserializeAws_restJson1ListOfJobError(data.Errors, context);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1CreateJobCommand = deserializeAws_restJson1CreateJobCommand;
const deserializeAws_restJson1CreateJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateRevisionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateRevisionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.Comment != null) {
        contents.Comment = (0, smithy_client_1.expectString)(data.Comment);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Finalized != null) {
        contents.Finalized = (0, smithy_client_1.expectBoolean)(data.Finalized);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.RevocationComment != null) {
        contents.RevocationComment = (0, smithy_client_1.expectString)(data.RevocationComment);
    }
    if (data.Revoked != null) {
        contents.Revoked = (0, smithy_client_1.expectBoolean)(data.Revoked);
    }
    if (data.RevokedAt != null) {
        contents.RevokedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.RevokedAt));
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1MapOf__string(data.Tags, context);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1CreateRevisionCommand = deserializeAws_restJson1CreateRevisionCommand;
const deserializeAws_restJson1CreateRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteAssetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAssetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteAssetCommand = deserializeAws_restJson1DeleteAssetCommand;
const deserializeAws_restJson1DeleteAssetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDataSetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDataSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDataSetCommand = deserializeAws_restJson1DeleteDataSetCommand;
const deserializeAws_restJson1DeleteDataSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteEventActionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEventActionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteEventActionCommand = deserializeAws_restJson1DeleteEventActionCommand;
const deserializeAws_restJson1DeleteEventActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteRevisionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteRevisionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteRevisionCommand = deserializeAws_restJson1DeleteRevisionCommand;
const deserializeAws_restJson1DeleteRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAssetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.AssetDetails != null) {
        contents.AssetDetails = deserializeAws_restJson1AssetDetails(data.AssetDetails, context);
    }
    if (data.AssetType != null) {
        contents.AssetType = (0, smithy_client_1.expectString)(data.AssetType);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1GetAssetCommand = deserializeAws_restJson1GetAssetCommand;
const deserializeAws_restJson1GetAssetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDataSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.AssetType != null) {
        contents.AssetType = (0, smithy_client_1.expectString)(data.AssetType);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.Origin != null) {
        contents.Origin = (0, smithy_client_1.expectString)(data.Origin);
    }
    if (data.OriginDetails != null) {
        contents.OriginDetails = deserializeAws_restJson1OriginDetails(data.OriginDetails, context);
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1MapOf__string(data.Tags, context);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1GetDataSetCommand = deserializeAws_restJson1GetDataSetCommand;
const deserializeAws_restJson1GetDataSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetEventActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEventActionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Action != null) {
        contents.Action = deserializeAws_restJson1Action(data.Action, context);
    }
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Event != null) {
        contents.Event = deserializeAws_restJson1Event(data.Event, context);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1GetEventActionCommand = deserializeAws_restJson1GetEventActionCommand;
const deserializeAws_restJson1GetEventActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Details != null) {
        contents.Details = deserializeAws_restJson1ResponseDetails(data.Details, context);
    }
    if (data.Errors != null) {
        contents.Errors = deserializeAws_restJson1ListOfJobError(data.Errors, context);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
    }
    if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1GetJobCommand = deserializeAws_restJson1GetJobCommand;
const deserializeAws_restJson1GetJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRevisionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.Comment != null) {
        contents.Comment = (0, smithy_client_1.expectString)(data.Comment);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Finalized != null) {
        contents.Finalized = (0, smithy_client_1.expectBoolean)(data.Finalized);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.RevocationComment != null) {
        contents.RevocationComment = (0, smithy_client_1.expectString)(data.RevocationComment);
    }
    if (data.Revoked != null) {
        contents.Revoked = (0, smithy_client_1.expectBoolean)(data.Revoked);
    }
    if (data.RevokedAt != null) {
        contents.RevokedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.RevokedAt));
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1MapOf__string(data.Tags, context);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1GetRevisionCommand = deserializeAws_restJson1GetRevisionCommand;
const deserializeAws_restJson1GetRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListDataSetRevisionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDataSetRevisionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    if (data.Revisions != null) {
        contents.Revisions = deserializeAws_restJson1ListOfRevisionEntry(data.Revisions, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListDataSetRevisionsCommand = deserializeAws_restJson1ListDataSetRevisionsCommand;
const deserializeAws_restJson1ListDataSetRevisionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListDataSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDataSetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DataSets != null) {
        contents.DataSets = deserializeAws_restJson1ListOfDataSetEntry(data.DataSets, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListDataSetsCommand = deserializeAws_restJson1ListDataSetsCommand;
const deserializeAws_restJson1ListDataSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListEventActionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEventActionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.EventActions != null) {
        contents.EventActions = deserializeAws_restJson1ListOfEventActionEntry(data.EventActions, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListEventActionsCommand = deserializeAws_restJson1ListEventActionsCommand;
const deserializeAws_restJson1ListEventActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListJobsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Jobs != null) {
        contents.Jobs = deserializeAws_restJson1ListOfJobEntry(data.Jobs, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListJobsCommand = deserializeAws_restJson1ListJobsCommand;
const deserializeAws_restJson1ListJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListRevisionAssetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListRevisionAssetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Assets != null) {
        contents.Assets = deserializeAws_restJson1ListOfAssetEntry(data.Assets, context);
    }
    if (data.NextToken != null) {
        contents.NextToken = (0, smithy_client_1.expectString)(data.NextToken);
    }
    return contents;
};
exports.deserializeAws_restJson1ListRevisionAssetsCommand = deserializeAws_restJson1ListRevisionAssetsCommand;
const deserializeAws_restJson1ListRevisionAssetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsForResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.tags != null) {
        contents.Tags = deserializeAws_restJson1MapOf__string(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ListTagsForResourceCommand = deserializeAws_restJson1ListTagsForResourceCommand;
const deserializeAws_restJson1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1RevokeRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RevokeRevisionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.Comment != null) {
        contents.Comment = (0, smithy_client_1.expectString)(data.Comment);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Finalized != null) {
        contents.Finalized = (0, smithy_client_1.expectBoolean)(data.Finalized);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.RevocationComment != null) {
        contents.RevocationComment = (0, smithy_client_1.expectString)(data.RevocationComment);
    }
    if (data.Revoked != null) {
        contents.Revoked = (0, smithy_client_1.expectBoolean)(data.Revoked);
    }
    if (data.RevokedAt != null) {
        contents.RevokedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.RevokedAt));
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1RevokeRevisionCommand = deserializeAws_restJson1RevokeRevisionCommand;
const deserializeAws_restJson1RevokeRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1SendApiAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1SendApiAssetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        ResponseHeaders: [
            ,
            Object.keys(output.headers)
                .filter((header) => header.startsWith(""))
                .reduce((acc, header) => {
                acc[header.substring(0)] = output.headers[header];
                return acc;
            }, {}),
        ],
    });
    const data = await collectBodyString(output.body, context);
    contents.Body = (0, smithy_client_1.expectString)(data);
    return contents;
};
exports.deserializeAws_restJson1SendApiAssetCommand = deserializeAws_restJson1SendApiAssetCommand;
const deserializeAws_restJson1SendApiAssetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1StartJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartJobCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1StartJobCommand = deserializeAws_restJson1StartJobCommand;
const deserializeAws_restJson1StartJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
        errorCode,
    });
};
const deserializeAws_restJson1UpdateAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAssetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.AssetDetails != null) {
        contents.AssetDetails = deserializeAws_restJson1AssetDetails(data.AssetDetails, context);
    }
    if (data.AssetType != null) {
        contents.AssetType = (0, smithy_client_1.expectString)(data.AssetType);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateAssetCommand = deserializeAws_restJson1UpdateAssetCommand;
const deserializeAws_restJson1UpdateAssetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDataSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.AssetType != null) {
        contents.AssetType = (0, smithy_client_1.expectString)(data.AssetType);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
    }
    if (data.Origin != null) {
        contents.Origin = (0, smithy_client_1.expectString)(data.Origin);
    }
    if (data.OriginDetails != null) {
        contents.OriginDetails = deserializeAws_restJson1OriginDetails(data.OriginDetails, context);
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateDataSetCommand = deserializeAws_restJson1UpdateDataSetCommand;
const deserializeAws_restJson1UpdateDataSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateEventActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEventActionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Action != null) {
        contents.Action = deserializeAws_restJson1Action(data.Action, context);
    }
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.Event != null) {
        contents.Event = deserializeAws_restJson1Event(data.Event, context);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateEventActionCommand = deserializeAws_restJson1UpdateEventActionCommand;
const deserializeAws_restJson1UpdateEventActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateRevisionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Arn != null) {
        contents.Arn = (0, smithy_client_1.expectString)(data.Arn);
    }
    if (data.Comment != null) {
        contents.Comment = (0, smithy_client_1.expectString)(data.Comment);
    }
    if (data.CreatedAt != null) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.CreatedAt));
    }
    if (data.DataSetId != null) {
        contents.DataSetId = (0, smithy_client_1.expectString)(data.DataSetId);
    }
    if (data.Finalized != null) {
        contents.Finalized = (0, smithy_client_1.expectBoolean)(data.Finalized);
    }
    if (data.Id != null) {
        contents.Id = (0, smithy_client_1.expectString)(data.Id);
    }
    if (data.RevocationComment != null) {
        contents.RevocationComment = (0, smithy_client_1.expectString)(data.RevocationComment);
    }
    if (data.Revoked != null) {
        contents.Revoked = (0, smithy_client_1.expectBoolean)(data.Revoked);
    }
    if (data.RevokedAt != null) {
        contents.RevokedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.RevokedAt));
    }
    if (data.SourceId != null) {
        contents.SourceId = (0, smithy_client_1.expectString)(data.SourceId);
    }
    if (data.UpdatedAt != null) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(data.UpdatedAt));
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateRevisionCommand = deserializeAws_restJson1UpdateRevisionCommand;
const deserializeAws_restJson1UpdateRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await deserializeAws_restJson1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await deserializeAws_restJson1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: DataExchangeServiceException_1.DataExchangeServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.ResourceId != null) {
        contents.ResourceId = (0, smithy_client_1.expectString)(data.ResourceId);
    }
    if (data.ResourceType != null) {
        contents.ResourceType = (0, smithy_client_1.expectString)(data.ResourceType);
    }
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    if (data.ResourceId != null) {
        contents.ResourceId = (0, smithy_client_1.expectString)(data.ResourceId);
    }
    if (data.ResourceType != null) {
        contents.ResourceType = (0, smithy_client_1.expectString)(data.ResourceType);
    }
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ServiceLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.LimitName != null) {
        contents.LimitName = (0, smithy_client_1.expectString)(data.LimitName);
    }
    if (data.LimitValue != null) {
        contents.LimitValue = (0, smithy_client_1.limitedParseDouble)(data.LimitValue);
    }
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    const exception = new models_0_1.ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ThrottlingExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ValidationExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.ExceptionCause != null) {
        contents.ExceptionCause = (0, smithy_client_1.expectString)(data.ExceptionCause);
    }
    if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
    }
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1Action = (input, context) => {
    return {
        ...(input.ExportRevisionToS3 != null && {
            ExportRevisionToS3: serializeAws_restJson1AutoExportRevisionToS3RequestDetails(input.ExportRevisionToS3, context),
        }),
    };
};
const serializeAws_restJson1AssetDestinationEntry = (input, context) => {
    return {
        ...(input.AssetId != null && { AssetId: input.AssetId }),
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.Key != null && { Key: input.Key }),
    };
};
const serializeAws_restJson1AssetSourceEntry = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.Key != null && { Key: input.Key }),
    };
};
const serializeAws_restJson1AutoExportRevisionDestinationEntry = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.KeyPattern != null && { KeyPattern: input.KeyPattern }),
    };
};
const serializeAws_restJson1AutoExportRevisionToS3RequestDetails = (input, context) => {
    return {
        ...(input.Encryption != null && {
            Encryption: serializeAws_restJson1ExportServerSideEncryption(input.Encryption, context),
        }),
        ...(input.RevisionDestination != null && {
            RevisionDestination: serializeAws_restJson1AutoExportRevisionDestinationEntry(input.RevisionDestination, context),
        }),
    };
};
const serializeAws_restJson1CreateS3DataAccessFromS3BucketRequestDetails = (input, context) => {
    return {
        ...(input.AssetSource != null && {
            AssetSource: serializeAws_restJson1S3DataAccessAssetSourceEntry(input.AssetSource, context),
        }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1DatabaseLFTagPolicyAndPermissions = (input, context) => {
    return {
        ...(input.Expression != null && { Expression: serializeAws_restJson1ListOfLFTags(input.Expression, context) }),
        ...(input.Permissions != null && {
            Permissions: serializeAws_restJson1ListOfDatabaseLFTagPolicyPermissions(input.Permissions, context),
        }),
    };
};
const serializeAws_restJson1Event = (input, context) => {
    return {
        ...(input.RevisionPublished != null && {
            RevisionPublished: serializeAws_restJson1RevisionPublished(input.RevisionPublished, context),
        }),
    };
};
const serializeAws_restJson1ExportAssetsToS3RequestDetails = (input, context) => {
    return {
        ...(input.AssetDestinations != null && {
            AssetDestinations: serializeAws_restJson1ListOfAssetDestinationEntry(input.AssetDestinations, context),
        }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.Encryption != null && {
            Encryption: serializeAws_restJson1ExportServerSideEncryption(input.Encryption, context),
        }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1ExportAssetToSignedUrlRequestDetails = (input, context) => {
    return {
        ...(input.AssetId != null && { AssetId: input.AssetId }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1ExportRevisionsToS3RequestDetails = (input, context) => {
    return {
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.Encryption != null && {
            Encryption: serializeAws_restJson1ExportServerSideEncryption(input.Encryption, context),
        }),
        ...(input.RevisionDestinations != null && {
            RevisionDestinations: serializeAws_restJson1ListOfRevisionDestinationEntry(input.RevisionDestinations, context),
        }),
    };
};
const serializeAws_restJson1ExportServerSideEncryption = (input, context) => {
    return {
        ...(input.KmsKeyArn != null && { KmsKeyArn: input.KmsKeyArn }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_restJson1ImportAssetFromApiGatewayApiRequestDetails = (input, context) => {
    return {
        ...(input.ApiDescription != null && { ApiDescription: input.ApiDescription }),
        ...(input.ApiId != null && { ApiId: input.ApiId }),
        ...(input.ApiKey != null && { ApiKey: input.ApiKey }),
        ...(input.ApiName != null && { ApiName: input.ApiName }),
        ...(input.ApiSpecificationMd5Hash != null && { ApiSpecificationMd5Hash: input.ApiSpecificationMd5Hash }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.ProtocolType != null && { ProtocolType: input.ProtocolType }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.Stage != null && { Stage: input.Stage }),
    };
};
const serializeAws_restJson1ImportAssetFromSignedUrlRequestDetails = (input, context) => {
    return {
        ...(input.AssetName != null && { AssetName: input.AssetName }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.Md5Hash != null && { Md5Hash: input.Md5Hash }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1ImportAssetsFromLakeFormationTagPolicyRequestDetails = (input, context) => {
    return {
        ...(input.CatalogId != null && { CatalogId: input.CatalogId }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.Database != null && {
            Database: serializeAws_restJson1DatabaseLFTagPolicyAndPermissions(input.Database, context),
        }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.Table != null && { Table: serializeAws_restJson1TableLFTagPolicyAndPermissions(input.Table, context) }),
    };
};
const serializeAws_restJson1ImportAssetsFromRedshiftDataSharesRequestDetails = (input, context) => {
    return {
        ...(input.AssetSources != null && {
            AssetSources: serializeAws_restJson1ListOfRedshiftDataShareAssetSourceEntry(input.AssetSources, context),
        }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1ImportAssetsFromS3RequestDetails = (input, context) => {
    return {
        ...(input.AssetSources != null && {
            AssetSources: serializeAws_restJson1ListOfAssetSourceEntry(input.AssetSources, context),
        }),
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1KmsKeyToGrant = (input, context) => {
    return {
        ...(input.KmsKeyArn != null && { KmsKeyArn: input.KmsKeyArn }),
    };
};
const serializeAws_restJson1LFTag = (input, context) => {
    return {
        ...(input.TagKey != null && { TagKey: input.TagKey }),
        ...(input.TagValues != null && { TagValues: serializeAws_restJson1ListOfLFTagValues(input.TagValues, context) }),
    };
};
const serializeAws_restJson1ListOf__string = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfAssetDestinationEntry = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1AssetDestinationEntry(entry, context);
    });
};
const serializeAws_restJson1ListOfAssetSourceEntry = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1AssetSourceEntry(entry, context);
    });
};
const serializeAws_restJson1ListOfDatabaseLFTagPolicyPermissions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfKmsKeysToGrant = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1KmsKeyToGrant(entry, context);
    });
};
const serializeAws_restJson1ListOfLFTags = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1LFTag(entry, context);
    });
};
const serializeAws_restJson1ListOfLFTagValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfRedshiftDataShareAssetSourceEntry = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1RedshiftDataShareAssetSourceEntry(entry, context);
    });
};
const serializeAws_restJson1ListOfRevisionDestinationEntry = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1RevisionDestinationEntry(entry, context);
    });
};
const serializeAws_restJson1ListOfTableTagPolicyLFPermissions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1MapOf__string = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_restJson1RedshiftDataShareAssetSourceEntry = (input, context) => {
    return {
        ...(input.DataShareArn != null && { DataShareArn: input.DataShareArn }),
    };
};
const serializeAws_restJson1RequestDetails = (input, context) => {
    return {
        ...(input.CreateS3DataAccessFromS3Bucket != null && {
            CreateS3DataAccessFromS3Bucket: serializeAws_restJson1CreateS3DataAccessFromS3BucketRequestDetails(input.CreateS3DataAccessFromS3Bucket, context),
        }),
        ...(input.ExportAssetToSignedUrl != null && {
            ExportAssetToSignedUrl: serializeAws_restJson1ExportAssetToSignedUrlRequestDetails(input.ExportAssetToSignedUrl, context),
        }),
        ...(input.ExportAssetsToS3 != null && {
            ExportAssetsToS3: serializeAws_restJson1ExportAssetsToS3RequestDetails(input.ExportAssetsToS3, context),
        }),
        ...(input.ExportRevisionsToS3 != null && {
            ExportRevisionsToS3: serializeAws_restJson1ExportRevisionsToS3RequestDetails(input.ExportRevisionsToS3, context),
        }),
        ...(input.ImportAssetFromApiGatewayApi != null && {
            ImportAssetFromApiGatewayApi: serializeAws_restJson1ImportAssetFromApiGatewayApiRequestDetails(input.ImportAssetFromApiGatewayApi, context),
        }),
        ...(input.ImportAssetFromSignedUrl != null && {
            ImportAssetFromSignedUrl: serializeAws_restJson1ImportAssetFromSignedUrlRequestDetails(input.ImportAssetFromSignedUrl, context),
        }),
        ...(input.ImportAssetsFromLakeFormationTagPolicy != null && {
            ImportAssetsFromLakeFormationTagPolicy: serializeAws_restJson1ImportAssetsFromLakeFormationTagPolicyRequestDetails(input.ImportAssetsFromLakeFormationTagPolicy, context),
        }),
        ...(input.ImportAssetsFromRedshiftDataShares != null && {
            ImportAssetsFromRedshiftDataShares: serializeAws_restJson1ImportAssetsFromRedshiftDataSharesRequestDetails(input.ImportAssetsFromRedshiftDataShares, context),
        }),
        ...(input.ImportAssetsFromS3 != null && {
            ImportAssetsFromS3: serializeAws_restJson1ImportAssetsFromS3RequestDetails(input.ImportAssetsFromS3, context),
        }),
    };
};
const serializeAws_restJson1RevisionDestinationEntry = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.KeyPattern != null && { KeyPattern: input.KeyPattern }),
        ...(input.RevisionId != null && { RevisionId: input.RevisionId }),
    };
};
const serializeAws_restJson1RevisionPublished = (input, context) => {
    return {
        ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
    };
};
const serializeAws_restJson1S3DataAccessAssetSourceEntry = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.KeyPrefixes != null && { KeyPrefixes: serializeAws_restJson1ListOf__string(input.KeyPrefixes, context) }),
        ...(input.Keys != null && { Keys: serializeAws_restJson1ListOf__string(input.Keys, context) }),
        ...(input.KmsKeysToGrant != null && {
            KmsKeysToGrant: serializeAws_restJson1ListOfKmsKeysToGrant(input.KmsKeysToGrant, context),
        }),
    };
};
const serializeAws_restJson1TableLFTagPolicyAndPermissions = (input, context) => {
    return {
        ...(input.Expression != null && { Expression: serializeAws_restJson1ListOfLFTags(input.Expression, context) }),
        ...(input.Permissions != null && {
            Permissions: serializeAws_restJson1ListOfTableTagPolicyLFPermissions(input.Permissions, context),
        }),
    };
};
const deserializeAws_restJson1Action = (output, context) => {
    return {
        ExportRevisionToS3: output.ExportRevisionToS3 != null
            ? deserializeAws_restJson1AutoExportRevisionToS3RequestDetails(output.ExportRevisionToS3, context)
            : undefined,
    };
};
const deserializeAws_restJson1ApiGatewayApiAsset = (output, context) => {
    return {
        ApiDescription: (0, smithy_client_1.expectString)(output.ApiDescription),
        ApiEndpoint: (0, smithy_client_1.expectString)(output.ApiEndpoint),
        ApiId: (0, smithy_client_1.expectString)(output.ApiId),
        ApiKey: (0, smithy_client_1.expectString)(output.ApiKey),
        ApiName: (0, smithy_client_1.expectString)(output.ApiName),
        ApiSpecificationDownloadUrl: (0, smithy_client_1.expectString)(output.ApiSpecificationDownloadUrl),
        ApiSpecificationDownloadUrlExpiresAt: output.ApiSpecificationDownloadUrlExpiresAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.ApiSpecificationDownloadUrlExpiresAt))
            : undefined,
        ProtocolType: (0, smithy_client_1.expectString)(output.ProtocolType),
        Stage: (0, smithy_client_1.expectString)(output.Stage),
    };
};
const deserializeAws_restJson1AssetDestinationEntry = (output, context) => {
    return {
        AssetId: (0, smithy_client_1.expectString)(output.AssetId),
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        Key: (0, smithy_client_1.expectString)(output.Key),
    };
};
const deserializeAws_restJson1AssetDetails = (output, context) => {
    return {
        ApiGatewayApiAsset: output.ApiGatewayApiAsset != null
            ? deserializeAws_restJson1ApiGatewayApiAsset(output.ApiGatewayApiAsset, context)
            : undefined,
        LakeFormationDataPermissionAsset: output.LakeFormationDataPermissionAsset != null
            ? deserializeAws_restJson1LakeFormationDataPermissionAsset(output.LakeFormationDataPermissionAsset, context)
            : undefined,
        RedshiftDataShareAsset: output.RedshiftDataShareAsset != null
            ? deserializeAws_restJson1RedshiftDataShareAsset(output.RedshiftDataShareAsset, context)
            : undefined,
        S3DataAccessAsset: output.S3DataAccessAsset != null
            ? deserializeAws_restJson1S3DataAccessAsset(output.S3DataAccessAsset, context)
            : undefined,
        S3SnapshotAsset: output.S3SnapshotAsset != null
            ? deserializeAws_restJson1S3SnapshotAsset(output.S3SnapshotAsset, context)
            : undefined,
    };
};
const deserializeAws_restJson1AssetEntry = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        AssetDetails: output.AssetDetails != null ? deserializeAws_restJson1AssetDetails(output.AssetDetails, context) : undefined,
        AssetType: (0, smithy_client_1.expectString)(output.AssetType),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.CreatedAt)) : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.UpdatedAt)) : undefined,
    };
};
const deserializeAws_restJson1AssetSourceEntry = (output, context) => {
    return {
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        Key: (0, smithy_client_1.expectString)(output.Key),
    };
};
const deserializeAws_restJson1AutoExportRevisionDestinationEntry = (output, context) => {
    return {
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        KeyPattern: (0, smithy_client_1.expectString)(output.KeyPattern),
    };
};
const deserializeAws_restJson1AutoExportRevisionToS3RequestDetails = (output, context) => {
    return {
        Encryption: output.Encryption != null
            ? deserializeAws_restJson1ExportServerSideEncryption(output.Encryption, context)
            : undefined,
        RevisionDestination: output.RevisionDestination != null
            ? deserializeAws_restJson1AutoExportRevisionDestinationEntry(output.RevisionDestination, context)
            : undefined,
    };
};
const deserializeAws_restJson1CreateS3DataAccessFromS3BucketResponseDetails = (output, context) => {
    return {
        AssetSource: output.AssetSource != null
            ? deserializeAws_restJson1S3DataAccessAssetSourceEntry(output.AssetSource, context)
            : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
    };
};
const deserializeAws_restJson1DatabaseLFTagPolicy = (output, context) => {
    return {
        Expression: output.Expression != null ? deserializeAws_restJson1ListOfLFTags(output.Expression, context) : undefined,
    };
};
const deserializeAws_restJson1DatabaseLFTagPolicyAndPermissions = (output, context) => {
    return {
        Expression: output.Expression != null ? deserializeAws_restJson1ListOfLFTags(output.Expression, context) : undefined,
        Permissions: output.Permissions != null
            ? deserializeAws_restJson1ListOfDatabaseLFTagPolicyPermissions(output.Permissions, context)
            : undefined,
    };
};
const deserializeAws_restJson1DataSetEntry = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        AssetType: (0, smithy_client_1.expectString)(output.AssetType),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.CreatedAt)) : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Id: (0, smithy_client_1.expectString)(output.Id),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Origin: (0, smithy_client_1.expectString)(output.Origin),
        OriginDetails: output.OriginDetails != null ? deserializeAws_restJson1OriginDetails(output.OriginDetails, context) : undefined,
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.UpdatedAt)) : undefined,
    };
};
const deserializeAws_restJson1Details = (output, context) => {
    return {
        ImportAssetFromSignedUrlJobErrorDetails: output.ImportAssetFromSignedUrlJobErrorDetails != null
            ? deserializeAws_restJson1ImportAssetFromSignedUrlJobErrorDetails(output.ImportAssetFromSignedUrlJobErrorDetails, context)
            : undefined,
        ImportAssetsFromS3JobErrorDetails: output.ImportAssetsFromS3JobErrorDetails != null
            ? deserializeAws_restJson1ListOfAssetSourceEntry(output.ImportAssetsFromS3JobErrorDetails, context)
            : undefined,
    };
};
const deserializeAws_restJson1Event = (output, context) => {
    return {
        RevisionPublished: output.RevisionPublished != null
            ? deserializeAws_restJson1RevisionPublished(output.RevisionPublished, context)
            : undefined,
    };
};
const deserializeAws_restJson1EventActionEntry = (output, context) => {
    return {
        Action: output.Action != null ? deserializeAws_restJson1Action(output.Action, context) : undefined,
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.CreatedAt)) : undefined,
        Event: output.Event != null ? deserializeAws_restJson1Event(output.Event, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.UpdatedAt)) : undefined,
    };
};
const deserializeAws_restJson1ExportAssetsToS3ResponseDetails = (output, context) => {
    return {
        AssetDestinations: output.AssetDestinations != null
            ? deserializeAws_restJson1ListOfAssetDestinationEntry(output.AssetDestinations, context)
            : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Encryption: output.Encryption != null
            ? deserializeAws_restJson1ExportServerSideEncryption(output.Encryption, context)
            : undefined,
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
    };
};
const deserializeAws_restJson1ExportAssetToSignedUrlResponseDetails = (output, context) => {
    return {
        AssetId: (0, smithy_client_1.expectString)(output.AssetId),
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        SignedUrl: (0, smithy_client_1.expectString)(output.SignedUrl),
        SignedUrlExpiresAt: output.SignedUrlExpiresAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.SignedUrlExpiresAt))
            : undefined,
    };
};
const deserializeAws_restJson1ExportRevisionsToS3ResponseDetails = (output, context) => {
    return {
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Encryption: output.Encryption != null
            ? deserializeAws_restJson1ExportServerSideEncryption(output.Encryption, context)
            : undefined,
        EventActionArn: (0, smithy_client_1.expectString)(output.EventActionArn),
        RevisionDestinations: output.RevisionDestinations != null
            ? deserializeAws_restJson1ListOfRevisionDestinationEntry(output.RevisionDestinations, context)
            : undefined,
    };
};
const deserializeAws_restJson1ExportServerSideEncryption = (output, context) => {
    return {
        KmsKeyArn: (0, smithy_client_1.expectString)(output.KmsKeyArn),
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_restJson1ImportAssetFromApiGatewayApiResponseDetails = (output, context) => {
    return {
        ApiDescription: (0, smithy_client_1.expectString)(output.ApiDescription),
        ApiId: (0, smithy_client_1.expectString)(output.ApiId),
        ApiKey: (0, smithy_client_1.expectString)(output.ApiKey),
        ApiName: (0, smithy_client_1.expectString)(output.ApiName),
        ApiSpecificationMd5Hash: (0, smithy_client_1.expectString)(output.ApiSpecificationMd5Hash),
        ApiSpecificationUploadUrl: (0, smithy_client_1.expectString)(output.ApiSpecificationUploadUrl),
        ApiSpecificationUploadUrlExpiresAt: output.ApiSpecificationUploadUrlExpiresAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.ApiSpecificationUploadUrlExpiresAt))
            : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        ProtocolType: (0, smithy_client_1.expectString)(output.ProtocolType),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        Stage: (0, smithy_client_1.expectString)(output.Stage),
    };
};
const deserializeAws_restJson1ImportAssetFromSignedUrlJobErrorDetails = (output, context) => {
    return {
        AssetName: (0, smithy_client_1.expectString)(output.AssetName),
    };
};
const deserializeAws_restJson1ImportAssetFromSignedUrlResponseDetails = (output, context) => {
    return {
        AssetName: (0, smithy_client_1.expectString)(output.AssetName),
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Md5Hash: (0, smithy_client_1.expectString)(output.Md5Hash),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        SignedUrl: (0, smithy_client_1.expectString)(output.SignedUrl),
        SignedUrlExpiresAt: output.SignedUrlExpiresAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.SignedUrlExpiresAt))
            : undefined,
    };
};
const deserializeAws_restJson1ImportAssetsFromLakeFormationTagPolicyResponseDetails = (output, context) => {
    return {
        CatalogId: (0, smithy_client_1.expectString)(output.CatalogId),
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Database: output.Database != null
            ? deserializeAws_restJson1DatabaseLFTagPolicyAndPermissions(output.Database, context)
            : undefined,
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
        Table: output.Table != null ? deserializeAws_restJson1TableLFTagPolicyAndPermissions(output.Table, context) : undefined,
    };
};
const deserializeAws_restJson1ImportAssetsFromRedshiftDataSharesResponseDetails = (output, context) => {
    return {
        AssetSources: output.AssetSources != null
            ? deserializeAws_restJson1ListOfRedshiftDataShareAssetSourceEntry(output.AssetSources, context)
            : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
    };
};
const deserializeAws_restJson1ImportAssetsFromS3ResponseDetails = (output, context) => {
    return {
        AssetSources: output.AssetSources != null
            ? deserializeAws_restJson1ListOfAssetSourceEntry(output.AssetSources, context)
            : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
    };
};
const deserializeAws_restJson1JobEntry = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.CreatedAt)) : undefined,
        Details: output.Details != null ? deserializeAws_restJson1ResponseDetails(output.Details, context) : undefined,
        Errors: output.Errors != null ? deserializeAws_restJson1ListOfJobError(output.Errors, context) : undefined,
        Id: (0, smithy_client_1.expectString)(output.Id),
        State: (0, smithy_client_1.expectString)(output.State),
        Type: (0, smithy_client_1.expectString)(output.Type),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.UpdatedAt)) : undefined,
    };
};
const deserializeAws_restJson1JobError = (output, context) => {
    return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Details: output.Details != null ? deserializeAws_restJson1Details(output.Details, context) : undefined,
        LimitName: (0, smithy_client_1.expectString)(output.LimitName),
        LimitValue: (0, smithy_client_1.limitedParseDouble)(output.LimitValue),
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const deserializeAws_restJson1KmsKeyToGrant = (output, context) => {
    return {
        KmsKeyArn: (0, smithy_client_1.expectString)(output.KmsKeyArn),
    };
};
const deserializeAws_restJson1LakeFormationDataPermissionAsset = (output, context) => {
    return {
        LakeFormationDataPermissionDetails: output.LakeFormationDataPermissionDetails != null
            ? deserializeAws_restJson1LakeFormationDataPermissionDetails(output.LakeFormationDataPermissionDetails, context)
            : undefined,
        LakeFormationDataPermissionType: (0, smithy_client_1.expectString)(output.LakeFormationDataPermissionType),
        Permissions: output.Permissions != null ? deserializeAws_restJson1ListOfLFPermissions(output.Permissions, context) : undefined,
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
    };
};
const deserializeAws_restJson1LakeFormationDataPermissionDetails = (output, context) => {
    return {
        LFTagPolicy: output.LFTagPolicy != null ? deserializeAws_restJson1LFTagPolicyDetails(output.LFTagPolicy, context) : undefined,
    };
};
const deserializeAws_restJson1LFResourceDetails = (output, context) => {
    return {
        Database: output.Database != null ? deserializeAws_restJson1DatabaseLFTagPolicy(output.Database, context) : undefined,
        Table: output.Table != null ? deserializeAws_restJson1TableLFTagPolicy(output.Table, context) : undefined,
    };
};
const deserializeAws_restJson1LFTag = (output, context) => {
    return {
        TagKey: (0, smithy_client_1.expectString)(output.TagKey),
        TagValues: output.TagValues != null ? deserializeAws_restJson1ListOfLFTagValues(output.TagValues, context) : undefined,
    };
};
const deserializeAws_restJson1LFTagPolicyDetails = (output, context) => {
    return {
        CatalogId: (0, smithy_client_1.expectString)(output.CatalogId),
        ResourceDetails: output.ResourceDetails != null
            ? deserializeAws_restJson1LFResourceDetails(output.ResourceDetails, context)
            : undefined,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const deserializeAws_restJson1ListOf__string = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfAssetDestinationEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1AssetDestinationEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfAssetEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1AssetEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfAssetSourceEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1AssetSourceEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDatabaseLFTagPolicyPermissions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDataSetEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DataSetEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfEventActionEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1EventActionEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfJobEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1JobEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfJobError = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1JobError(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfKmsKeysToGrant = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1KmsKeyToGrant(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfLFPermissions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfLFTags = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1LFTag(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfLFTagValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRedshiftDataShareAssetSourceEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RedshiftDataShareAssetSourceEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRevisionDestinationEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RevisionDestinationEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRevisionEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RevisionEntry(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfTableTagPolicyLFPermissions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1MapOf__string = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const deserializeAws_restJson1OriginDetails = (output, context) => {
    return {
        ProductId: (0, smithy_client_1.expectString)(output.ProductId),
    };
};
const deserializeAws_restJson1RedshiftDataShareAsset = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
    };
};
const deserializeAws_restJson1RedshiftDataShareAssetSourceEntry = (output, context) => {
    return {
        DataShareArn: (0, smithy_client_1.expectString)(output.DataShareArn),
    };
};
const deserializeAws_restJson1ResponseDetails = (output, context) => {
    return {
        CreateS3DataAccessFromS3Bucket: output.CreateS3DataAccessFromS3Bucket != null
            ? deserializeAws_restJson1CreateS3DataAccessFromS3BucketResponseDetails(output.CreateS3DataAccessFromS3Bucket, context)
            : undefined,
        ExportAssetToSignedUrl: output.ExportAssetToSignedUrl != null
            ? deserializeAws_restJson1ExportAssetToSignedUrlResponseDetails(output.ExportAssetToSignedUrl, context)
            : undefined,
        ExportAssetsToS3: output.ExportAssetsToS3 != null
            ? deserializeAws_restJson1ExportAssetsToS3ResponseDetails(output.ExportAssetsToS3, context)
            : undefined,
        ExportRevisionsToS3: output.ExportRevisionsToS3 != null
            ? deserializeAws_restJson1ExportRevisionsToS3ResponseDetails(output.ExportRevisionsToS3, context)
            : undefined,
        ImportAssetFromApiGatewayApi: output.ImportAssetFromApiGatewayApi != null
            ? deserializeAws_restJson1ImportAssetFromApiGatewayApiResponseDetails(output.ImportAssetFromApiGatewayApi, context)
            : undefined,
        ImportAssetFromSignedUrl: output.ImportAssetFromSignedUrl != null
            ? deserializeAws_restJson1ImportAssetFromSignedUrlResponseDetails(output.ImportAssetFromSignedUrl, context)
            : undefined,
        ImportAssetsFromLakeFormationTagPolicy: output.ImportAssetsFromLakeFormationTagPolicy != null
            ? deserializeAws_restJson1ImportAssetsFromLakeFormationTagPolicyResponseDetails(output.ImportAssetsFromLakeFormationTagPolicy, context)
            : undefined,
        ImportAssetsFromRedshiftDataShares: output.ImportAssetsFromRedshiftDataShares != null
            ? deserializeAws_restJson1ImportAssetsFromRedshiftDataSharesResponseDetails(output.ImportAssetsFromRedshiftDataShares, context)
            : undefined,
        ImportAssetsFromS3: output.ImportAssetsFromS3 != null
            ? deserializeAws_restJson1ImportAssetsFromS3ResponseDetails(output.ImportAssetsFromS3, context)
            : undefined,
    };
};
const deserializeAws_restJson1RevisionDestinationEntry = (output, context) => {
    return {
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        KeyPattern: (0, smithy_client_1.expectString)(output.KeyPattern),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
    };
};
const deserializeAws_restJson1RevisionEntry = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        CreatedAt: output.CreatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.CreatedAt)) : undefined,
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
        Finalized: (0, smithy_client_1.expectBoolean)(output.Finalized),
        Id: (0, smithy_client_1.expectString)(output.Id),
        RevocationComment: (0, smithy_client_1.expectString)(output.RevocationComment),
        Revoked: (0, smithy_client_1.expectBoolean)(output.Revoked),
        RevokedAt: output.RevokedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.RevokedAt)) : undefined,
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        UpdatedAt: output.UpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output.UpdatedAt)) : undefined,
    };
};
const deserializeAws_restJson1RevisionPublished = (output, context) => {
    return {
        DataSetId: (0, smithy_client_1.expectString)(output.DataSetId),
    };
};
const deserializeAws_restJson1S3DataAccessAsset = (output, context) => {
    return {
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        KeyPrefixes: output.KeyPrefixes != null ? deserializeAws_restJson1ListOf__string(output.KeyPrefixes, context) : undefined,
        Keys: output.Keys != null ? deserializeAws_restJson1ListOf__string(output.Keys, context) : undefined,
        KmsKeysToGrant: output.KmsKeysToGrant != null
            ? deserializeAws_restJson1ListOfKmsKeysToGrant(output.KmsKeysToGrant, context)
            : undefined,
        S3AccessPointAlias: (0, smithy_client_1.expectString)(output.S3AccessPointAlias),
        S3AccessPointArn: (0, smithy_client_1.expectString)(output.S3AccessPointArn),
    };
};
const deserializeAws_restJson1S3DataAccessAssetSourceEntry = (output, context) => {
    return {
        Bucket: (0, smithy_client_1.expectString)(output.Bucket),
        KeyPrefixes: output.KeyPrefixes != null ? deserializeAws_restJson1ListOf__string(output.KeyPrefixes, context) : undefined,
        Keys: output.Keys != null ? deserializeAws_restJson1ListOf__string(output.Keys, context) : undefined,
        KmsKeysToGrant: output.KmsKeysToGrant != null
            ? deserializeAws_restJson1ListOfKmsKeysToGrant(output.KmsKeysToGrant, context)
            : undefined,
    };
};
const deserializeAws_restJson1S3SnapshotAsset = (output, context) => {
    return {
        Size: (0, smithy_client_1.limitedParseDouble)(output.Size),
    };
};
const deserializeAws_restJson1TableLFTagPolicy = (output, context) => {
    return {
        Expression: output.Expression != null ? deserializeAws_restJson1ListOfLFTags(output.Expression, context) : undefined,
    };
};
const deserializeAws_restJson1TableLFTagPolicyAndPermissions = (output, context) => {
    return {
        Expression: output.Expression != null ? deserializeAws_restJson1ListOfLFTags(output.Expression, context) : undefined,
        Permissions: output.Permissions != null
            ? deserializeAws_restJson1ListOfTableTagPolicyLFPermissions(output.Permissions, context)
            : undefined,
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
