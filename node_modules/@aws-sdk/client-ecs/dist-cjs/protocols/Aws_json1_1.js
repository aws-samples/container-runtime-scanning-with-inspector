"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_UpdateClusterSettingsCommand = exports.se_UpdateClusterCommand = exports.se_UpdateCapacityProviderCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_SubmitTaskStateChangeCommand = exports.se_SubmitContainerStateChangeCommand = exports.se_SubmitAttachmentStateChangesCommand = exports.se_StopTaskCommand = exports.se_StartTaskCommand = exports.se_RunTaskCommand = exports.se_RegisterTaskDefinitionCommand = exports.se_RegisterContainerInstanceCommand = exports.se_PutClusterCapacityProvidersCommand = exports.se_PutAttributesCommand = exports.se_PutAccountSettingDefaultCommand = exports.se_PutAccountSettingCommand = exports.se_ListTasksCommand = exports.se_ListTaskDefinitionsCommand = exports.se_ListTaskDefinitionFamiliesCommand = exports.se_ListTagsForResourceCommand = exports.se_ListServicesByNamespaceCommand = exports.se_ListServicesCommand = exports.se_ListContainerInstancesCommand = exports.se_ListClustersCommand = exports.se_ListAttributesCommand = exports.se_ListAccountSettingsCommand = exports.se_GetTaskProtectionCommand = exports.se_ExecuteCommandCommand = exports.se_DiscoverPollEndpointCommand = exports.se_DescribeTaskSetsCommand = exports.se_DescribeTasksCommand = exports.se_DescribeTaskDefinitionCommand = exports.se_DescribeServicesCommand = exports.se_DescribeContainerInstancesCommand = exports.se_DescribeClustersCommand = exports.se_DescribeCapacityProvidersCommand = exports.se_DeregisterTaskDefinitionCommand = exports.se_DeregisterContainerInstanceCommand = exports.se_DeleteTaskSetCommand = exports.se_DeleteTaskDefinitionsCommand = exports.se_DeleteServiceCommand = exports.se_DeleteClusterCommand = exports.se_DeleteCapacityProviderCommand = exports.se_DeleteAttributesCommand = exports.se_DeleteAccountSettingCommand = exports.se_CreateTaskSetCommand = exports.se_CreateServiceCommand = exports.se_CreateClusterCommand = exports.se_CreateCapacityProviderCommand = void 0;
exports.de_SubmitContainerStateChangeCommand = exports.de_SubmitAttachmentStateChangesCommand = exports.de_StopTaskCommand = exports.de_StartTaskCommand = exports.de_RunTaskCommand = exports.de_RegisterTaskDefinitionCommand = exports.de_RegisterContainerInstanceCommand = exports.de_PutClusterCapacityProvidersCommand = exports.de_PutAttributesCommand = exports.de_PutAccountSettingDefaultCommand = exports.de_PutAccountSettingCommand = exports.de_ListTasksCommand = exports.de_ListTaskDefinitionsCommand = exports.de_ListTaskDefinitionFamiliesCommand = exports.de_ListTagsForResourceCommand = exports.de_ListServicesByNamespaceCommand = exports.de_ListServicesCommand = exports.de_ListContainerInstancesCommand = exports.de_ListClustersCommand = exports.de_ListAttributesCommand = exports.de_ListAccountSettingsCommand = exports.de_GetTaskProtectionCommand = exports.de_ExecuteCommandCommand = exports.de_DiscoverPollEndpointCommand = exports.de_DescribeTaskSetsCommand = exports.de_DescribeTasksCommand = exports.de_DescribeTaskDefinitionCommand = exports.de_DescribeServicesCommand = exports.de_DescribeContainerInstancesCommand = exports.de_DescribeClustersCommand = exports.de_DescribeCapacityProvidersCommand = exports.de_DeregisterTaskDefinitionCommand = exports.de_DeregisterContainerInstanceCommand = exports.de_DeleteTaskSetCommand = exports.de_DeleteTaskDefinitionsCommand = exports.de_DeleteServiceCommand = exports.de_DeleteClusterCommand = exports.de_DeleteCapacityProviderCommand = exports.de_DeleteAttributesCommand = exports.de_DeleteAccountSettingCommand = exports.de_CreateTaskSetCommand = exports.de_CreateServiceCommand = exports.de_CreateClusterCommand = exports.de_CreateCapacityProviderCommand = exports.se_UpdateTaskSetCommand = exports.se_UpdateTaskProtectionCommand = exports.se_UpdateServicePrimaryTaskSetCommand = exports.se_UpdateServiceCommand = exports.se_UpdateContainerInstancesStateCommand = exports.se_UpdateContainerAgentCommand = void 0;
exports.de_UpdateTaskSetCommand = exports.de_UpdateTaskProtectionCommand = exports.de_UpdateServicePrimaryTaskSetCommand = exports.de_UpdateServiceCommand = exports.de_UpdateContainerInstancesStateCommand = exports.de_UpdateContainerAgentCommand = exports.de_UpdateClusterSettingsCommand = exports.de_UpdateClusterCommand = exports.de_UpdateCapacityProviderCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_SubmitTaskStateChangeCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const ECSServiceException_1 = require("../models/ECSServiceException");
const models_0_1 = require("../models/models_0");
const se_CreateCapacityProviderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.CreateCapacityProvider",
    };
    let body;
    body = JSON.stringify(se_CreateCapacityProviderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCapacityProviderCommand = se_CreateCapacityProviderCommand;
const se_CreateClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.CreateCluster",
    };
    let body;
    body = JSON.stringify(se_CreateClusterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateClusterCommand = se_CreateClusterCommand;
const se_CreateServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.CreateService",
    };
    let body;
    body = JSON.stringify(se_CreateServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateServiceCommand = se_CreateServiceCommand;
const se_CreateTaskSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.CreateTaskSet",
    };
    let body;
    body = JSON.stringify(se_CreateTaskSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateTaskSetCommand = se_CreateTaskSetCommand;
const se_DeleteAccountSettingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteAccountSetting",
    };
    let body;
    body = JSON.stringify(se_DeleteAccountSettingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAccountSettingCommand = se_DeleteAccountSettingCommand;
const se_DeleteAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteAttributes",
    };
    let body;
    body = JSON.stringify(se_DeleteAttributesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAttributesCommand = se_DeleteAttributesCommand;
const se_DeleteCapacityProviderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteCapacityProvider",
    };
    let body;
    body = JSON.stringify(se_DeleteCapacityProviderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCapacityProviderCommand = se_DeleteCapacityProviderCommand;
const se_DeleteClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteCluster",
    };
    let body;
    body = JSON.stringify(se_DeleteClusterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteClusterCommand = se_DeleteClusterCommand;
const se_DeleteServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteService",
    };
    let body;
    body = JSON.stringify(se_DeleteServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteServiceCommand = se_DeleteServiceCommand;
const se_DeleteTaskDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteTaskDefinitions",
    };
    let body;
    body = JSON.stringify(se_DeleteTaskDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTaskDefinitionsCommand = se_DeleteTaskDefinitionsCommand;
const se_DeleteTaskSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeleteTaskSet",
    };
    let body;
    body = JSON.stringify(se_DeleteTaskSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTaskSetCommand = se_DeleteTaskSetCommand;
const se_DeregisterContainerInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeregisterContainerInstance",
    };
    let body;
    body = JSON.stringify(se_DeregisterContainerInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterContainerInstanceCommand = se_DeregisterContainerInstanceCommand;
const se_DeregisterTaskDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DeregisterTaskDefinition",
    };
    let body;
    body = JSON.stringify(se_DeregisterTaskDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeregisterTaskDefinitionCommand = se_DeregisterTaskDefinitionCommand;
const se_DescribeCapacityProvidersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeCapacityProviders",
    };
    let body;
    body = JSON.stringify(se_DescribeCapacityProvidersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeCapacityProvidersCommand = se_DescribeCapacityProvidersCommand;
const se_DescribeClustersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeClusters",
    };
    let body;
    body = JSON.stringify(se_DescribeClustersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeClustersCommand = se_DescribeClustersCommand;
const se_DescribeContainerInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeContainerInstances",
    };
    let body;
    body = JSON.stringify(se_DescribeContainerInstancesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeContainerInstancesCommand = se_DescribeContainerInstancesCommand;
const se_DescribeServicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeServices",
    };
    let body;
    body = JSON.stringify(se_DescribeServicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeServicesCommand = se_DescribeServicesCommand;
const se_DescribeTaskDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeTaskDefinition",
    };
    let body;
    body = JSON.stringify(se_DescribeTaskDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeTaskDefinitionCommand = se_DescribeTaskDefinitionCommand;
const se_DescribeTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeTasks",
    };
    let body;
    body = JSON.stringify(se_DescribeTasksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeTasksCommand = se_DescribeTasksCommand;
const se_DescribeTaskSetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DescribeTaskSets",
    };
    let body;
    body = JSON.stringify(se_DescribeTaskSetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeTaskSetsCommand = se_DescribeTaskSetsCommand;
const se_DiscoverPollEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.DiscoverPollEndpoint",
    };
    let body;
    body = JSON.stringify(se_DiscoverPollEndpointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DiscoverPollEndpointCommand = se_DiscoverPollEndpointCommand;
const se_ExecuteCommandCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ExecuteCommand",
    };
    let body;
    body = JSON.stringify(se_ExecuteCommandRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ExecuteCommandCommand = se_ExecuteCommandCommand;
const se_GetTaskProtectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.GetTaskProtection",
    };
    let body;
    body = JSON.stringify(se_GetTaskProtectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTaskProtectionCommand = se_GetTaskProtectionCommand;
const se_ListAccountSettingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListAccountSettings",
    };
    let body;
    body = JSON.stringify(se_ListAccountSettingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAccountSettingsCommand = se_ListAccountSettingsCommand;
const se_ListAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListAttributes",
    };
    let body;
    body = JSON.stringify(se_ListAttributesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAttributesCommand = se_ListAttributesCommand;
const se_ListClustersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListClusters",
    };
    let body;
    body = JSON.stringify(se_ListClustersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListClustersCommand = se_ListClustersCommand;
const se_ListContainerInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListContainerInstances",
    };
    let body;
    body = JSON.stringify(se_ListContainerInstancesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListContainerInstancesCommand = se_ListContainerInstancesCommand;
const se_ListServicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListServices",
    };
    let body;
    body = JSON.stringify(se_ListServicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListServicesCommand = se_ListServicesCommand;
const se_ListServicesByNamespaceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListServicesByNamespace",
    };
    let body;
    body = JSON.stringify(se_ListServicesByNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListServicesByNamespaceCommand = se_ListServicesByNamespaceCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(se_ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListTaskDefinitionFamiliesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListTaskDefinitionFamilies",
    };
    let body;
    body = JSON.stringify(se_ListTaskDefinitionFamiliesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTaskDefinitionFamiliesCommand = se_ListTaskDefinitionFamiliesCommand;
const se_ListTaskDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListTaskDefinitions",
    };
    let body;
    body = JSON.stringify(se_ListTaskDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTaskDefinitionsCommand = se_ListTaskDefinitionsCommand;
const se_ListTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.ListTasks",
    };
    let body;
    body = JSON.stringify(se_ListTasksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTasksCommand = se_ListTasksCommand;
const se_PutAccountSettingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.PutAccountSetting",
    };
    let body;
    body = JSON.stringify(se_PutAccountSettingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAccountSettingCommand = se_PutAccountSettingCommand;
const se_PutAccountSettingDefaultCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.PutAccountSettingDefault",
    };
    let body;
    body = JSON.stringify(se_PutAccountSettingDefaultRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAccountSettingDefaultCommand = se_PutAccountSettingDefaultCommand;
const se_PutAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.PutAttributes",
    };
    let body;
    body = JSON.stringify(se_PutAttributesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAttributesCommand = se_PutAttributesCommand;
const se_PutClusterCapacityProvidersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.PutClusterCapacityProviders",
    };
    let body;
    body = JSON.stringify(se_PutClusterCapacityProvidersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutClusterCapacityProvidersCommand = se_PutClusterCapacityProvidersCommand;
const se_RegisterContainerInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.RegisterContainerInstance",
    };
    let body;
    body = JSON.stringify(se_RegisterContainerInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterContainerInstanceCommand = se_RegisterContainerInstanceCommand;
const se_RegisterTaskDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.RegisterTaskDefinition",
    };
    let body;
    body = JSON.stringify(se_RegisterTaskDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterTaskDefinitionCommand = se_RegisterTaskDefinitionCommand;
const se_RunTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.RunTask",
    };
    let body;
    body = JSON.stringify(se_RunTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RunTaskCommand = se_RunTaskCommand;
const se_StartTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.StartTask",
    };
    let body;
    body = JSON.stringify(se_StartTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartTaskCommand = se_StartTaskCommand;
const se_StopTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.StopTask",
    };
    let body;
    body = JSON.stringify(se_StopTaskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopTaskCommand = se_StopTaskCommand;
const se_SubmitAttachmentStateChangesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.SubmitAttachmentStateChanges",
    };
    let body;
    body = JSON.stringify(se_SubmitAttachmentStateChangesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SubmitAttachmentStateChangesCommand = se_SubmitAttachmentStateChangesCommand;
const se_SubmitContainerStateChangeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange",
    };
    let body;
    body = JSON.stringify(se_SubmitContainerStateChangeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SubmitContainerStateChangeCommand = se_SubmitContainerStateChangeCommand;
const se_SubmitTaskStateChangeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.SubmitTaskStateChange",
    };
    let body;
    body = JSON.stringify(se_SubmitTaskStateChangeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SubmitTaskStateChangeCommand = se_SubmitTaskStateChangeCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.TagResource",
    };
    let body;
    body = JSON.stringify(se_TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UntagResource",
    };
    let body;
    body = JSON.stringify(se_UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateCapacityProviderCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateCapacityProvider",
    };
    let body;
    body = JSON.stringify(se_UpdateCapacityProviderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateCapacityProviderCommand = se_UpdateCapacityProviderCommand;
const se_UpdateClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateCluster",
    };
    let body;
    body = JSON.stringify(se_UpdateClusterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateClusterCommand = se_UpdateClusterCommand;
const se_UpdateClusterSettingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateClusterSettings",
    };
    let body;
    body = JSON.stringify(se_UpdateClusterSettingsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateClusterSettingsCommand = se_UpdateClusterSettingsCommand;
const se_UpdateContainerAgentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateContainerAgent",
    };
    let body;
    body = JSON.stringify(se_UpdateContainerAgentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateContainerAgentCommand = se_UpdateContainerAgentCommand;
const se_UpdateContainerInstancesStateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState",
    };
    let body;
    body = JSON.stringify(se_UpdateContainerInstancesStateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateContainerInstancesStateCommand = se_UpdateContainerInstancesStateCommand;
const se_UpdateServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateService",
    };
    let body;
    body = JSON.stringify(se_UpdateServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateServiceCommand = se_UpdateServiceCommand;
const se_UpdateServicePrimaryTaskSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateServicePrimaryTaskSet",
    };
    let body;
    body = JSON.stringify(se_UpdateServicePrimaryTaskSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateServicePrimaryTaskSetCommand = se_UpdateServicePrimaryTaskSetCommand;
const se_UpdateTaskProtectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateTaskProtection",
    };
    let body;
    body = JSON.stringify(se_UpdateTaskProtectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateTaskProtectionCommand = se_UpdateTaskProtectionCommand;
const se_UpdateTaskSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonEC2ContainerServiceV20141113.UpdateTaskSet",
    };
    let body;
    body = JSON.stringify(se_UpdateTaskSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateTaskSetCommand = se_UpdateTaskSetCommand;
const de_CreateCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCapacityProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateCapacityProviderCommand = de_CreateCapacityProviderCommand;
const de_CreateCapacityProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.ecs#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UpdateInProgressException":
        case "com.amazonaws.ecs#UpdateInProgressException":
            throw await de_UpdateInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_CreateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateClusterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateClusterCommand = de_CreateClusterCommand;
const de_CreateClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateServiceCommand = de_CreateServiceCommand;
const de_CreateServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NamespaceNotFoundException":
        case "com.amazonaws.ecs#NamespaceNotFoundException":
            throw await de_NamespaceNotFoundExceptionRes(parsedOutput, context);
        case "PlatformTaskDefinitionIncompatibilityException":
        case "com.amazonaws.ecs#PlatformTaskDefinitionIncompatibilityException":
            throw await de_PlatformTaskDefinitionIncompatibilityExceptionRes(parsedOutput, context);
        case "PlatformUnknownException":
        case "com.amazonaws.ecs#PlatformUnknownException":
            throw await de_PlatformUnknownExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_CreateTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateTaskSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTaskSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateTaskSetCommand = de_CreateTaskSetCommand;
const de_CreateTaskSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NamespaceNotFoundException":
        case "com.amazonaws.ecs#NamespaceNotFoundException":
            throw await de_NamespaceNotFoundExceptionRes(parsedOutput, context);
        case "PlatformTaskDefinitionIncompatibilityException":
        case "com.amazonaws.ecs#PlatformTaskDefinitionIncompatibilityException":
            throw await de_PlatformTaskDefinitionIncompatibilityExceptionRes(parsedOutput, context);
        case "PlatformUnknownException":
        case "com.amazonaws.ecs#PlatformUnknownException":
            throw await de_PlatformUnknownExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAccountSettingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAccountSettingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteAccountSettingCommand = de_DeleteAccountSettingCommand;
const de_DeleteAccountSettingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAttributesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteAttributesCommand = de_DeleteAttributesCommand;
const de_DeleteAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.ecs#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCapacityProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCapacityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteCapacityProviderCommand = de_DeleteCapacityProviderCommand;
const de_DeleteCapacityProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteClusterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteClusterCommand = de_DeleteClusterCommand;
const de_DeleteClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterContainsContainerInstancesException":
        case "com.amazonaws.ecs#ClusterContainsContainerInstancesException":
            throw await de_ClusterContainsContainerInstancesExceptionRes(parsedOutput, context);
        case "ClusterContainsServicesException":
        case "com.amazonaws.ecs#ClusterContainsServicesException":
            throw await de_ClusterContainsServicesExceptionRes(parsedOutput, context);
        case "ClusterContainsTasksException":
        case "com.amazonaws.ecs#ClusterContainsTasksException":
            throw await de_ClusterContainsTasksExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UpdateInProgressException":
        case "com.amazonaws.ecs#UpdateInProgressException":
            throw await de_UpdateInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteServiceCommand = de_DeleteServiceCommand;
const de_DeleteServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteTaskDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTaskDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTaskDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteTaskDefinitionsCommand = de_DeleteTaskDefinitionsCommand;
const de_DeleteTaskDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeleteTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTaskSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTaskSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteTaskSetCommand = de_DeleteTaskSetCommand;
const de_DeleteTaskSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        case "TaskSetNotFoundException":
        case "com.amazonaws.ecs#TaskSetNotFoundException":
            throw await de_TaskSetNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeregisterContainerInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterContainerInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterContainerInstanceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeregisterContainerInstanceCommand = de_DeregisterContainerInstanceCommand;
const de_DeregisterContainerInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DeregisterTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeregisterTaskDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTaskDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeregisterTaskDefinitionCommand = de_DeregisterTaskDefinitionCommand;
const de_DeregisterTaskDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeCapacityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCapacityProvidersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityProvidersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeCapacityProvidersCommand = de_DescribeCapacityProvidersCommand;
const de_DescribeCapacityProvidersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClustersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeClustersCommand = de_DescribeClustersCommand;
const de_DescribeClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeContainerInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeContainerInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeContainerInstancesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeContainerInstancesCommand = de_DescribeContainerInstancesCommand;
const de_DescribeContainerInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeServicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeServicesCommand = de_DescribeServicesCommand;
const de_DescribeServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTaskDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTaskDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeTaskDefinitionCommand = de_DescribeTaskDefinitionCommand;
const de_DescribeTaskDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTasksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeTasksCommand = de_DescribeTasksCommand;
const de_DescribeTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DescribeTaskSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTaskSetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTaskSetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeTaskSetsCommand = de_DescribeTaskSetsCommand;
const de_DescribeTaskSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_DiscoverPollEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DiscoverPollEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DiscoverPollEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DiscoverPollEndpointCommand = de_DiscoverPollEndpointCommand;
const de_DiscoverPollEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ExecuteCommandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExecuteCommandCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExecuteCommandResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ExecuteCommandCommand = de_ExecuteCommandCommand;
const de_ExecuteCommandCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "TargetNotConnectedException":
        case "com.amazonaws.ecs#TargetNotConnectedException":
            throw await de_TargetNotConnectedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_GetTaskProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTaskProtectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTaskProtectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetTaskProtectionCommand = de_GetTaskProtectionCommand;
const de_GetTaskProtectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ecs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAccountSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAccountSettingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListAccountSettingsCommand = de_ListAccountSettingsCommand;
const de_ListAccountSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAttributesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListAttributesCommand = de_ListAttributesCommand;
const de_ListAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListClustersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListClustersCommand = de_ListClustersCommand;
const de_ListClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListContainerInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListContainerInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListContainerInstancesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListContainerInstancesCommand = de_ListContainerInstancesCommand;
const de_ListContainerInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListServicesCommand = de_ListServicesCommand;
const de_ListServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListServicesByNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListServicesByNamespaceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServicesByNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListServicesByNamespaceCommand = de_ListServicesByNamespaceCommand;
const de_ListServicesByNamespaceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NamespaceNotFoundException":
        case "com.amazonaws.ecs#NamespaceNotFoundException":
            throw await de_NamespaceNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListTaskDefinitionFamiliesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTaskDefinitionFamiliesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTaskDefinitionFamiliesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListTaskDefinitionFamiliesCommand = de_ListTaskDefinitionFamiliesCommand;
const de_ListTaskDefinitionFamiliesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListTaskDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTaskDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTaskDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListTaskDefinitionsCommand = de_ListTaskDefinitionsCommand;
const de_ListTaskDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_ListTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTasksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListTasksCommand = de_ListTasksCommand;
const de_ListTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_PutAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAccountSettingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAccountSettingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutAccountSettingCommand = de_PutAccountSettingCommand;
const de_PutAccountSettingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_PutAccountSettingDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAccountSettingDefaultCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAccountSettingDefaultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutAccountSettingDefaultCommand = de_PutAccountSettingDefaultCommand;
const de_PutAccountSettingDefaultCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_PutAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAttributesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutAttributesCommand = de_PutAttributesCommand;
const de_PutAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AttributeLimitExceededException":
        case "com.amazonaws.ecs#AttributeLimitExceededException":
            throw await de_AttributeLimitExceededExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "TargetNotFoundException":
        case "com.amazonaws.ecs#TargetNotFoundException":
            throw await de_TargetNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_PutClusterCapacityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutClusterCapacityProvidersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutClusterCapacityProvidersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutClusterCapacityProvidersCommand = de_PutClusterCapacityProvidersCommand;
const de_PutClusterCapacityProvidersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ecs#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UpdateInProgressException":
        case "com.amazonaws.ecs#UpdateInProgressException":
            throw await de_UpdateInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_RegisterContainerInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterContainerInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterContainerInstanceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RegisterContainerInstanceCommand = de_RegisterContainerInstanceCommand;
const de_RegisterContainerInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_RegisterTaskDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterTaskDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterTaskDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RegisterTaskDefinitionCommand = de_RegisterTaskDefinitionCommand;
const de_RegisterTaskDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_RunTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RunTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RunTaskResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RunTaskCommand = de_RunTaskCommand;
const de_RunTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BlockedException":
        case "com.amazonaws.ecs#BlockedException":
            throw await de_BlockedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "PlatformTaskDefinitionIncompatibilityException":
        case "com.amazonaws.ecs#PlatformTaskDefinitionIncompatibilityException":
            throw await de_PlatformTaskDefinitionIncompatibilityExceptionRes(parsedOutput, context);
        case "PlatformUnknownException":
        case "com.amazonaws.ecs#PlatformUnknownException":
            throw await de_PlatformUnknownExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_StartTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartTaskResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartTaskCommand = de_StartTaskCommand;
const de_StartTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_StopTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopTaskResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StopTaskCommand = de_StopTaskCommand;
const de_StopTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_SubmitAttachmentStateChangesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SubmitAttachmentStateChangesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SubmitAttachmentStateChangesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SubmitAttachmentStateChangesCommand = de_SubmitAttachmentStateChangesCommand;
const de_SubmitAttachmentStateChangesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_SubmitContainerStateChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SubmitContainerStateChangeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SubmitContainerStateChangeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SubmitContainerStateChangeCommand = de_SubmitContainerStateChangeCommand;
const de_SubmitContainerStateChangeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_SubmitTaskStateChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SubmitTaskStateChangeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SubmitTaskStateChangeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SubmitTaskStateChangeCommand = de_SubmitTaskStateChangeCommand;
const de_SubmitTaskStateChangeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ecs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ecs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateCapacityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateCapacityProviderCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateCapacityProviderResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateCapacityProviderCommand = de_UpdateCapacityProviderCommand;
const de_UpdateCapacityProviderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateClusterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateClusterCommand = de_UpdateClusterCommand;
const de_UpdateClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateClusterSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateClusterSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateClusterSettingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateClusterSettingsCommand = de_UpdateClusterSettingsCommand;
const de_UpdateClusterSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateContainerAgentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateContainerAgentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerAgentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateContainerAgentCommand = de_UpdateContainerAgentCommand;
const de_UpdateContainerAgentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "MissingVersionException":
        case "com.amazonaws.ecs#MissingVersionException":
            throw await de_MissingVersionExceptionRes(parsedOutput, context);
        case "NoUpdateAvailableException":
        case "com.amazonaws.ecs#NoUpdateAvailableException":
            throw await de_NoUpdateAvailableExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UpdateInProgressException":
        case "com.amazonaws.ecs#UpdateInProgressException":
            throw await de_UpdateInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateContainerInstancesStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateContainerInstancesStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerInstancesStateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateContainerInstancesStateCommand = de_UpdateContainerInstancesStateCommand;
const de_UpdateContainerInstancesStateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateServiceCommand = de_UpdateServiceCommand;
const de_UpdateServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NamespaceNotFoundException":
        case "com.amazonaws.ecs#NamespaceNotFoundException":
            throw await de_NamespaceNotFoundExceptionRes(parsedOutput, context);
        case "PlatformTaskDefinitionIncompatibilityException":
        case "com.amazonaws.ecs#PlatformTaskDefinitionIncompatibilityException":
            throw await de_PlatformTaskDefinitionIncompatibilityExceptionRes(parsedOutput, context);
        case "PlatformUnknownException":
        case "com.amazonaws.ecs#PlatformUnknownException":
            throw await de_PlatformUnknownExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateServicePrimaryTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateServicePrimaryTaskSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServicePrimaryTaskSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateServicePrimaryTaskSetCommand = de_UpdateServicePrimaryTaskSetCommand;
const de_UpdateServicePrimaryTaskSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        case "TaskSetNotFoundException":
        case "com.amazonaws.ecs#TaskSetNotFoundException":
            throw await de_TaskSetNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateTaskProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTaskProtectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateTaskProtectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateTaskProtectionCommand = de_UpdateTaskProtectionCommand;
const de_UpdateTaskProtectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ecs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_UpdateTaskSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTaskSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateTaskSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateTaskSetCommand = de_UpdateTaskSetCommand;
const de_UpdateTaskSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ecs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.ecs#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ClusterNotFoundException":
        case "com.amazonaws.ecs#ClusterNotFoundException":
            throw await de_ClusterNotFoundExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ecs#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.ecs#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        case "ServiceNotActiveException":
        case "com.amazonaws.ecs#ServiceNotActiveException":
            throw await de_ServiceNotActiveExceptionRes(parsedOutput, context);
        case "ServiceNotFoundException":
        case "com.amazonaws.ecs#ServiceNotFoundException":
            throw await de_ServiceNotFoundExceptionRes(parsedOutput, context);
        case "TaskSetNotFoundException":
        case "com.amazonaws.ecs#TaskSetNotFoundException":
            throw await de_TaskSetNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedFeatureException":
        case "com.amazonaws.ecs#UnsupportedFeatureException":
            throw await de_UnsupportedFeatureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ECSServiceException_1.ECSServiceException,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AccessDeniedException(body, context);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AttributeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AttributeLimitExceededException(body, context);
    const exception = new models_0_1.AttributeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_BlockedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_BlockedException(body, context);
    const exception = new models_0_1.BlockedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ClientExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ClientException(body, context);
    const exception = new models_0_1.ClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ClusterContainsContainerInstancesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ClusterContainsContainerInstancesException(body, context);
    const exception = new models_0_1.ClusterContainsContainerInstancesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ClusterContainsServicesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ClusterContainsServicesException(body, context);
    const exception = new models_0_1.ClusterContainsServicesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ClusterContainsTasksExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ClusterContainsTasksException(body, context);
    const exception = new models_0_1.ClusterContainsTasksException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ClusterNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ClusterNotFoundException(body, context);
    const exception = new models_0_1.ClusterNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterException(body, context);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body, context);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MissingVersionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MissingVersionException(body, context);
    const exception = new models_0_1.MissingVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NamespaceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NamespaceNotFoundException(body, context);
    const exception = new models_0_1.NamespaceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoUpdateAvailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoUpdateAvailableException(body, context);
    const exception = new models_0_1.NoUpdateAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PlatformTaskDefinitionIncompatibilityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PlatformTaskDefinitionIncompatibilityException(body, context);
    const exception = new models_0_1.PlatformTaskDefinitionIncompatibilityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_PlatformUnknownExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PlatformUnknownException(body, context);
    const exception = new models_0_1.PlatformUnknownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceInUseException(body, context);
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServerException(body, context);
    const exception = new models_0_1.ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceNotActiveExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceNotActiveException(body, context);
    const exception = new models_0_1.ServiceNotActiveException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceNotFoundException(body, context);
    const exception = new models_0_1.ServiceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TargetNotConnectedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TargetNotConnectedException(body, context);
    const exception = new models_0_1.TargetNotConnectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TargetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TargetNotFoundException(body, context);
    const exception = new models_0_1.TargetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TaskSetNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TaskSetNotFoundException(body, context);
    const exception = new models_0_1.TaskSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedFeatureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnsupportedFeatureException(body, context);
    const exception = new models_0_1.UnsupportedFeatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UpdateInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UpdateInProgressException(body, context);
    const exception = new models_0_1.UpdateInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AttachmentStateChange = (input, context) => {
    return {
        ...(input.attachmentArn != null && { attachmentArn: input.attachmentArn }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_AttachmentStateChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttachmentStateChange(entry, context);
    });
};
const se_Attribute = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.targetId != null && { targetId: input.targetId }),
        ...(input.targetType != null && { targetType: input.targetType }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_Attributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Attribute(entry, context);
    });
};
const se_AutoScalingGroupProvider = (input, context) => {
    return {
        ...(input.autoScalingGroupArn != null && { autoScalingGroupArn: input.autoScalingGroupArn }),
        ...(input.managedScaling != null && { managedScaling: se_ManagedScaling(input.managedScaling, context) }),
        ...(input.managedTerminationProtection != null && {
            managedTerminationProtection: input.managedTerminationProtection,
        }),
    };
};
const se_AutoScalingGroupProviderUpdate = (input, context) => {
    return {
        ...(input.managedScaling != null && { managedScaling: se_ManagedScaling(input.managedScaling, context) }),
        ...(input.managedTerminationProtection != null && {
            managedTerminationProtection: input.managedTerminationProtection,
        }),
    };
};
const se_AwsVpcConfiguration = (input, context) => {
    return {
        ...(input.assignPublicIp != null && { assignPublicIp: input.assignPublicIp }),
        ...(input.securityGroups != null && { securityGroups: se_StringList(input.securityGroups, context) }),
        ...(input.subnets != null && { subnets: se_StringList(input.subnets, context) }),
    };
};
const se_CapacityProviderFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CapacityProviderStrategy = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CapacityProviderStrategyItem(entry, context);
    });
};
const se_CapacityProviderStrategyItem = (input, context) => {
    return {
        ...(input.base != null && { base: input.base }),
        ...(input.capacityProvider != null && { capacityProvider: input.capacityProvider }),
        ...(input.weight != null && { weight: input.weight }),
    };
};
const se_ClusterConfiguration = (input, context) => {
    return {
        ...(input.executeCommandConfiguration != null && {
            executeCommandConfiguration: se_ExecuteCommandConfiguration(input.executeCommandConfiguration, context),
        }),
    };
};
const se_ClusterFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ClusterServiceConnectDefaultsRequest = (input, context) => {
    return {
        ...(input.namespace != null && { namespace: input.namespace }),
    };
};
const se_ClusterSetting = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_ClusterSettings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ClusterSetting(entry, context);
    });
};
const se_CompatibilityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ContainerDefinition = (input, context) => {
    return {
        ...(input.command != null && { command: se_StringList(input.command, context) }),
        ...(input.cpu != null && { cpu: input.cpu }),
        ...(input.dependsOn != null && { dependsOn: se_ContainerDependencies(input.dependsOn, context) }),
        ...(input.disableNetworking != null && { disableNetworking: input.disableNetworking }),
        ...(input.dnsSearchDomains != null && { dnsSearchDomains: se_StringList(input.dnsSearchDomains, context) }),
        ...(input.dnsServers != null && { dnsServers: se_StringList(input.dnsServers, context) }),
        ...(input.dockerLabels != null && { dockerLabels: se_DockerLabelsMap(input.dockerLabels, context) }),
        ...(input.dockerSecurityOptions != null && {
            dockerSecurityOptions: se_StringList(input.dockerSecurityOptions, context),
        }),
        ...(input.entryPoint != null && { entryPoint: se_StringList(input.entryPoint, context) }),
        ...(input.environment != null && { environment: se_EnvironmentVariables(input.environment, context) }),
        ...(input.environmentFiles != null && { environmentFiles: se_EnvironmentFiles(input.environmentFiles, context) }),
        ...(input.essential != null && { essential: input.essential }),
        ...(input.extraHosts != null && { extraHosts: se_HostEntryList(input.extraHosts, context) }),
        ...(input.firelensConfiguration != null && {
            firelensConfiguration: se_FirelensConfiguration(input.firelensConfiguration, context),
        }),
        ...(input.healthCheck != null && { healthCheck: se_HealthCheck(input.healthCheck, context) }),
        ...(input.hostname != null && { hostname: input.hostname }),
        ...(input.image != null && { image: input.image }),
        ...(input.interactive != null && { interactive: input.interactive }),
        ...(input.links != null && { links: se_StringList(input.links, context) }),
        ...(input.linuxParameters != null && { linuxParameters: se_LinuxParameters(input.linuxParameters, context) }),
        ...(input.logConfiguration != null && { logConfiguration: se_LogConfiguration(input.logConfiguration, context) }),
        ...(input.memory != null && { memory: input.memory }),
        ...(input.memoryReservation != null && { memoryReservation: input.memoryReservation }),
        ...(input.mountPoints != null && { mountPoints: se_MountPointList(input.mountPoints, context) }),
        ...(input.name != null && { name: input.name }),
        ...(input.portMappings != null && { portMappings: se_PortMappingList(input.portMappings, context) }),
        ...(input.privileged != null && { privileged: input.privileged }),
        ...(input.pseudoTerminal != null && { pseudoTerminal: input.pseudoTerminal }),
        ...(input.readonlyRootFilesystem != null && { readonlyRootFilesystem: input.readonlyRootFilesystem }),
        ...(input.repositoryCredentials != null && {
            repositoryCredentials: se_RepositoryCredentials(input.repositoryCredentials, context),
        }),
        ...(input.resourceRequirements != null && {
            resourceRequirements: se_ResourceRequirements(input.resourceRequirements, context),
        }),
        ...(input.secrets != null && { secrets: se_SecretList(input.secrets, context) }),
        ...(input.startTimeout != null && { startTimeout: input.startTimeout }),
        ...(input.stopTimeout != null && { stopTimeout: input.stopTimeout }),
        ...(input.systemControls != null && { systemControls: se_SystemControls(input.systemControls, context) }),
        ...(input.ulimits != null && { ulimits: se_UlimitList(input.ulimits, context) }),
        ...(input.user != null && { user: input.user }),
        ...(input.volumesFrom != null && { volumesFrom: se_VolumeFromList(input.volumesFrom, context) }),
        ...(input.workingDirectory != null && { workingDirectory: input.workingDirectory }),
    };
};
const se_ContainerDefinitions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContainerDefinition(entry, context);
    });
};
const se_ContainerDependencies = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContainerDependency(entry, context);
    });
};
const se_ContainerDependency = (input, context) => {
    return {
        ...(input.condition != null && { condition: input.condition }),
        ...(input.containerName != null && { containerName: input.containerName }),
    };
};
const se_ContainerInstanceFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ContainerOverride = (input, context) => {
    return {
        ...(input.command != null && { command: se_StringList(input.command, context) }),
        ...(input.cpu != null && { cpu: input.cpu }),
        ...(input.environment != null && { environment: se_EnvironmentVariables(input.environment, context) }),
        ...(input.environmentFiles != null && { environmentFiles: se_EnvironmentFiles(input.environmentFiles, context) }),
        ...(input.memory != null && { memory: input.memory }),
        ...(input.memoryReservation != null && { memoryReservation: input.memoryReservation }),
        ...(input.name != null && { name: input.name }),
        ...(input.resourceRequirements != null && {
            resourceRequirements: se_ResourceRequirements(input.resourceRequirements, context),
        }),
    };
};
const se_ContainerOverrides = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContainerOverride(entry, context);
    });
};
const se_ContainerStateChange = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.exitCode != null && { exitCode: input.exitCode }),
        ...(input.imageDigest != null && { imageDigest: input.imageDigest }),
        ...(input.networkBindings != null && { networkBindings: se_NetworkBindings(input.networkBindings, context) }),
        ...(input.reason != null && { reason: input.reason }),
        ...(input.runtimeId != null && { runtimeId: input.runtimeId }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_ContainerStateChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContainerStateChange(entry, context);
    });
};
const se_CreateCapacityProviderRequest = (input, context) => {
    return {
        ...(input.autoScalingGroupProvider != null && {
            autoScalingGroupProvider: se_AutoScalingGroupProvider(input.autoScalingGroupProvider, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
    };
};
const se_CreateClusterRequest = (input, context) => {
    return {
        ...(input.capacityProviders != null && { capacityProviders: se_StringList(input.capacityProviders, context) }),
        ...(input.clusterName != null && { clusterName: input.clusterName }),
        ...(input.configuration != null && { configuration: se_ClusterConfiguration(input.configuration, context) }),
        ...(input.defaultCapacityProviderStrategy != null && {
            defaultCapacityProviderStrategy: se_CapacityProviderStrategy(input.defaultCapacityProviderStrategy, context),
        }),
        ...(input.serviceConnectDefaults != null && {
            serviceConnectDefaults: se_ClusterServiceConnectDefaultsRequest(input.serviceConnectDefaults, context),
        }),
        ...(input.settings != null && { settings: se_ClusterSettings(input.settings, context) }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
    };
};
const se_CreateServiceRequest = (input, context) => {
    return {
        ...(input.capacityProviderStrategy != null && {
            capacityProviderStrategy: se_CapacityProviderStrategy(input.capacityProviderStrategy, context),
        }),
        ...(input.clientToken != null && { clientToken: input.clientToken }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.deploymentConfiguration != null && {
            deploymentConfiguration: se_DeploymentConfiguration(input.deploymentConfiguration, context),
        }),
        ...(input.deploymentController != null && {
            deploymentController: se_DeploymentController(input.deploymentController, context),
        }),
        ...(input.desiredCount != null && { desiredCount: input.desiredCount }),
        ...(input.enableECSManagedTags != null && { enableECSManagedTags: input.enableECSManagedTags }),
        ...(input.enableExecuteCommand != null && { enableExecuteCommand: input.enableExecuteCommand }),
        ...(input.healthCheckGracePeriodSeconds != null && {
            healthCheckGracePeriodSeconds: input.healthCheckGracePeriodSeconds,
        }),
        ...(input.launchType != null && { launchType: input.launchType }),
        ...(input.loadBalancers != null && { loadBalancers: se_LoadBalancers(input.loadBalancers, context) }),
        ...(input.networkConfiguration != null && {
            networkConfiguration: se_NetworkConfiguration(input.networkConfiguration, context),
        }),
        ...(input.placementConstraints != null && {
            placementConstraints: se_PlacementConstraints(input.placementConstraints, context),
        }),
        ...(input.placementStrategy != null && {
            placementStrategy: se_PlacementStrategies(input.placementStrategy, context),
        }),
        ...(input.platformVersion != null && { platformVersion: input.platformVersion }),
        ...(input.propagateTags != null && { propagateTags: input.propagateTags }),
        ...(input.role != null && { role: input.role }),
        ...(input.schedulingStrategy != null && { schedulingStrategy: input.schedulingStrategy }),
        ...(input.serviceConnectConfiguration != null && {
            serviceConnectConfiguration: se_ServiceConnectConfiguration(input.serviceConnectConfiguration, context),
        }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
        ...(input.serviceRegistries != null && {
            serviceRegistries: se_ServiceRegistries(input.serviceRegistries, context),
        }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_CreateTaskSetRequest = (input, context) => {
    return {
        ...(input.capacityProviderStrategy != null && {
            capacityProviderStrategy: se_CapacityProviderStrategy(input.capacityProviderStrategy, context),
        }),
        ...(input.clientToken != null && { clientToken: input.clientToken }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.externalId != null && { externalId: input.externalId }),
        ...(input.launchType != null && { launchType: input.launchType }),
        ...(input.loadBalancers != null && { loadBalancers: se_LoadBalancers(input.loadBalancers, context) }),
        ...(input.networkConfiguration != null && {
            networkConfiguration: se_NetworkConfiguration(input.networkConfiguration, context),
        }),
        ...(input.platformVersion != null && { platformVersion: input.platformVersion }),
        ...(input.scale != null && { scale: se_Scale(input.scale, context) }),
        ...(input.service != null && { service: input.service }),
        ...(input.serviceRegistries != null && {
            serviceRegistries: se_ServiceRegistries(input.serviceRegistries, context),
        }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_DeleteAccountSettingRequest = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.principalArn != null && { principalArn: input.principalArn }),
    };
};
const se_DeleteAttributesRequest = (input, context) => {
    return {
        ...(input.attributes != null && { attributes: se_Attributes(input.attributes, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
    };
};
const se_DeleteCapacityProviderRequest = (input, context) => {
    return {
        ...(input.capacityProvider != null && { capacityProvider: input.capacityProvider }),
    };
};
const se_DeleteClusterRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
    };
};
const se_DeleteServiceRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.force != null && { force: input.force }),
        ...(input.service != null && { service: input.service }),
    };
};
const se_DeleteTaskDefinitionsRequest = (input, context) => {
    return {
        ...(input.taskDefinitions != null && { taskDefinitions: se_StringList(input.taskDefinitions, context) }),
    };
};
const se_DeleteTaskSetRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.force != null && { force: input.force }),
        ...(input.service != null && { service: input.service }),
        ...(input.taskSet != null && { taskSet: input.taskSet }),
    };
};
const se_DeploymentAlarms = (input, context) => {
    return {
        ...(input.alarmNames != null && { alarmNames: se_StringList(input.alarmNames, context) }),
        ...(input.enable != null && { enable: input.enable }),
        ...(input.rollback != null && { rollback: input.rollback }),
    };
};
const se_DeploymentCircuitBreaker = (input, context) => {
    return {
        ...(input.enable != null && { enable: input.enable }),
        ...(input.rollback != null && { rollback: input.rollback }),
    };
};
const se_DeploymentConfiguration = (input, context) => {
    return {
        ...(input.alarms != null && { alarms: se_DeploymentAlarms(input.alarms, context) }),
        ...(input.deploymentCircuitBreaker != null && {
            deploymentCircuitBreaker: se_DeploymentCircuitBreaker(input.deploymentCircuitBreaker, context),
        }),
        ...(input.maximumPercent != null && { maximumPercent: input.maximumPercent }),
        ...(input.minimumHealthyPercent != null && { minimumHealthyPercent: input.minimumHealthyPercent }),
    };
};
const se_DeploymentController = (input, context) => {
    return {
        ...(input.type != null && { type: input.type }),
    };
};
const se_DeregisterContainerInstanceRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstance != null && { containerInstance: input.containerInstance }),
        ...(input.force != null && { force: input.force }),
    };
};
const se_DeregisterTaskDefinitionRequest = (input, context) => {
    return {
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_DescribeCapacityProvidersRequest = (input, context) => {
    return {
        ...(input.capacityProviders != null && { capacityProviders: se_StringList(input.capacityProviders, context) }),
        ...(input.include != null && { include: se_CapacityProviderFieldList(input.include, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const se_DescribeClustersRequest = (input, context) => {
    return {
        ...(input.clusters != null && { clusters: se_StringList(input.clusters, context) }),
        ...(input.include != null && { include: se_ClusterFieldList(input.include, context) }),
    };
};
const se_DescribeContainerInstancesRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstances != null && { containerInstances: se_StringList(input.containerInstances, context) }),
        ...(input.include != null && { include: se_ContainerInstanceFieldList(input.include, context) }),
    };
};
const se_DescribeServicesRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.include != null && { include: se_ServiceFieldList(input.include, context) }),
        ...(input.services != null && { services: se_StringList(input.services, context) }),
    };
};
const se_DescribeTaskDefinitionRequest = (input, context) => {
    return {
        ...(input.include != null && { include: se_TaskDefinitionFieldList(input.include, context) }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_DescribeTaskSetsRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.include != null && { include: se_TaskSetFieldList(input.include, context) }),
        ...(input.service != null && { service: input.service }),
        ...(input.taskSets != null && { taskSets: se_StringList(input.taskSets, context) }),
    };
};
const se_DescribeTasksRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.include != null && { include: se_TaskFieldList(input.include, context) }),
        ...(input.tasks != null && { tasks: se_StringList(input.tasks, context) }),
    };
};
const se_Device = (input, context) => {
    return {
        ...(input.containerPath != null && { containerPath: input.containerPath }),
        ...(input.hostPath != null && { hostPath: input.hostPath }),
        ...(input.permissions != null && { permissions: se_DeviceCgroupPermissions(input.permissions, context) }),
    };
};
const se_DeviceCgroupPermissions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_DevicesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Device(entry, context);
    });
};
const se_DiscoverPollEndpointRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstance != null && { containerInstance: input.containerInstance }),
    };
};
const se_DockerLabelsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_DockerVolumeConfiguration = (input, context) => {
    return {
        ...(input.autoprovision != null && { autoprovision: input.autoprovision }),
        ...(input.driver != null && { driver: input.driver }),
        ...(input.driverOpts != null && { driverOpts: se_StringMap(input.driverOpts, context) }),
        ...(input.labels != null && { labels: se_StringMap(input.labels, context) }),
        ...(input.scope != null && { scope: input.scope }),
    };
};
const se_EFSAuthorizationConfig = (input, context) => {
    return {
        ...(input.accessPointId != null && { accessPointId: input.accessPointId }),
        ...(input.iam != null && { iam: input.iam }),
    };
};
const se_EFSVolumeConfiguration = (input, context) => {
    return {
        ...(input.authorizationConfig != null && {
            authorizationConfig: se_EFSAuthorizationConfig(input.authorizationConfig, context),
        }),
        ...(input.fileSystemId != null && { fileSystemId: input.fileSystemId }),
        ...(input.rootDirectory != null && { rootDirectory: input.rootDirectory }),
        ...(input.transitEncryption != null && { transitEncryption: input.transitEncryption }),
        ...(input.transitEncryptionPort != null && { transitEncryptionPort: input.transitEncryptionPort }),
    };
};
const se_EnvironmentFile = (input, context) => {
    return {
        ...(input.type != null && { type: input.type }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_EnvironmentFiles = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EnvironmentFile(entry, context);
    });
};
const se_EnvironmentVariables = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KeyValuePair(entry, context);
    });
};
const se_EphemeralStorage = (input, context) => {
    return {
        ...(input.sizeInGiB != null && { sizeInGiB: input.sizeInGiB }),
    };
};
const se_ExecuteCommandConfiguration = (input, context) => {
    return {
        ...(input.kmsKeyId != null && { kmsKeyId: input.kmsKeyId }),
        ...(input.logConfiguration != null && {
            logConfiguration: se_ExecuteCommandLogConfiguration(input.logConfiguration, context),
        }),
        ...(input.logging != null && { logging: input.logging }),
    };
};
const se_ExecuteCommandLogConfiguration = (input, context) => {
    return {
        ...(input.cloudWatchEncryptionEnabled != null && {
            cloudWatchEncryptionEnabled: input.cloudWatchEncryptionEnabled,
        }),
        ...(input.cloudWatchLogGroupName != null && { cloudWatchLogGroupName: input.cloudWatchLogGroupName }),
        ...(input.s3BucketName != null && { s3BucketName: input.s3BucketName }),
        ...(input.s3EncryptionEnabled != null && { s3EncryptionEnabled: input.s3EncryptionEnabled }),
        ...(input.s3KeyPrefix != null && { s3KeyPrefix: input.s3KeyPrefix }),
    };
};
const se_ExecuteCommandRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.command != null && { command: input.command }),
        ...(input.container != null && { container: input.container }),
        ...(input.interactive != null && { interactive: input.interactive }),
        ...(input.task != null && { task: input.task }),
    };
};
const se_FirelensConfiguration = (input, context) => {
    return {
        ...(input.options != null && { options: se_FirelensConfigurationOptionsMap(input.options, context) }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_FirelensConfigurationOptionsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_FSxWindowsFileServerAuthorizationConfig = (input, context) => {
    return {
        ...(input.credentialsParameter != null && { credentialsParameter: input.credentialsParameter }),
        ...(input.domain != null && { domain: input.domain }),
    };
};
const se_FSxWindowsFileServerVolumeConfiguration = (input, context) => {
    return {
        ...(input.authorizationConfig != null && {
            authorizationConfig: se_FSxWindowsFileServerAuthorizationConfig(input.authorizationConfig, context),
        }),
        ...(input.fileSystemId != null && { fileSystemId: input.fileSystemId }),
        ...(input.rootDirectory != null && { rootDirectory: input.rootDirectory }),
    };
};
const se_GetTaskProtectionRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.tasks != null && { tasks: se_StringList(input.tasks, context) }),
    };
};
const se_HealthCheck = (input, context) => {
    return {
        ...(input.command != null && { command: se_StringList(input.command, context) }),
        ...(input.interval != null && { interval: input.interval }),
        ...(input.retries != null && { retries: input.retries }),
        ...(input.startPeriod != null && { startPeriod: input.startPeriod }),
        ...(input.timeout != null && { timeout: input.timeout }),
    };
};
const se_HostEntry = (input, context) => {
    return {
        ...(input.hostname != null && { hostname: input.hostname }),
        ...(input.ipAddress != null && { ipAddress: input.ipAddress }),
    };
};
const se_HostEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HostEntry(entry, context);
    });
};
const se_HostVolumeProperties = (input, context) => {
    return {
        ...(input.sourcePath != null && { sourcePath: input.sourcePath }),
    };
};
const se_InferenceAccelerator = (input, context) => {
    return {
        ...(input.deviceName != null && { deviceName: input.deviceName }),
        ...(input.deviceType != null && { deviceType: input.deviceType }),
    };
};
const se_InferenceAcceleratorOverride = (input, context) => {
    return {
        ...(input.deviceName != null && { deviceName: input.deviceName }),
        ...(input.deviceType != null && { deviceType: input.deviceType }),
    };
};
const se_InferenceAcceleratorOverrides = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InferenceAcceleratorOverride(entry, context);
    });
};
const se_InferenceAccelerators = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InferenceAccelerator(entry, context);
    });
};
const se_KernelCapabilities = (input, context) => {
    return {
        ...(input.add != null && { add: se_StringList(input.add, context) }),
        ...(input.drop != null && { drop: se_StringList(input.drop, context) }),
    };
};
const se_KeyValuePair = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_LinuxParameters = (input, context) => {
    return {
        ...(input.capabilities != null && { capabilities: se_KernelCapabilities(input.capabilities, context) }),
        ...(input.devices != null && { devices: se_DevicesList(input.devices, context) }),
        ...(input.initProcessEnabled != null && { initProcessEnabled: input.initProcessEnabled }),
        ...(input.maxSwap != null && { maxSwap: input.maxSwap }),
        ...(input.sharedMemorySize != null && { sharedMemorySize: input.sharedMemorySize }),
        ...(input.swappiness != null && { swappiness: input.swappiness }),
        ...(input.tmpfs != null && { tmpfs: se_TmpfsList(input.tmpfs, context) }),
    };
};
const se_ListAccountSettingsRequest = (input, context) => {
    return {
        ...(input.effectiveSettings != null && { effectiveSettings: input.effectiveSettings }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.name != null && { name: input.name }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.principalArn != null && { principalArn: input.principalArn }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_ListAttributesRequest = (input, context) => {
    return {
        ...(input.attributeName != null && { attributeName: input.attributeName }),
        ...(input.attributeValue != null && { attributeValue: input.attributeValue }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.targetType != null && { targetType: input.targetType }),
    };
};
const se_ListClustersRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const se_ListContainerInstancesRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.filter != null && { filter: input.filter }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_ListServicesByNamespaceRequest = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.namespace != null && { namespace: input.namespace }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
    };
};
const se_ListServicesRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.launchType != null && { launchType: input.launchType }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.schedulingStrategy != null && { schedulingStrategy: input.schedulingStrategy }),
    };
};
const se_ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const se_ListTaskDefinitionFamiliesRequest = (input, context) => {
    return {
        ...(input.familyPrefix != null && { familyPrefix: input.familyPrefix }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_ListTaskDefinitionsRequest = (input, context) => {
    return {
        ...(input.familyPrefix != null && { familyPrefix: input.familyPrefix }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sort != null && { sort: input.sort }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_ListTasksRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstance != null && { containerInstance: input.containerInstance }),
        ...(input.desiredStatus != null && { desiredStatus: input.desiredStatus }),
        ...(input.family != null && { family: input.family }),
        ...(input.launchType != null && { launchType: input.launchType }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
        ...(input.startedBy != null && { startedBy: input.startedBy }),
    };
};
const se_LoadBalancer = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.containerPort != null && { containerPort: input.containerPort }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
        ...(input.targetGroupArn != null && { targetGroupArn: input.targetGroupArn }),
    };
};
const se_LoadBalancers = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_LoadBalancer(entry, context);
    });
};
const se_LogConfiguration = (input, context) => {
    return {
        ...(input.logDriver != null && { logDriver: input.logDriver }),
        ...(input.options != null && { options: se_LogConfigurationOptionsMap(input.options, context) }),
        ...(input.secretOptions != null && { secretOptions: se_SecretList(input.secretOptions, context) }),
    };
};
const se_LogConfigurationOptionsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_ManagedAgentStateChange = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.managedAgentName != null && { managedAgentName: input.managedAgentName }),
        ...(input.reason != null && { reason: input.reason }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_ManagedAgentStateChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ManagedAgentStateChange(entry, context);
    });
};
const se_ManagedScaling = (input, context) => {
    return {
        ...(input.instanceWarmupPeriod != null && { instanceWarmupPeriod: input.instanceWarmupPeriod }),
        ...(input.maximumScalingStepSize != null && { maximumScalingStepSize: input.maximumScalingStepSize }),
        ...(input.minimumScalingStepSize != null && { minimumScalingStepSize: input.minimumScalingStepSize }),
        ...(input.status != null && { status: input.status }),
        ...(input.targetCapacity != null && { targetCapacity: input.targetCapacity }),
    };
};
const se_MountPoint = (input, context) => {
    return {
        ...(input.containerPath != null && { containerPath: input.containerPath }),
        ...(input.readOnly != null && { readOnly: input.readOnly }),
        ...(input.sourceVolume != null && { sourceVolume: input.sourceVolume }),
    };
};
const se_MountPointList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MountPoint(entry, context);
    });
};
const se_NetworkBinding = (input, context) => {
    return {
        ...(input.bindIP != null && { bindIP: input.bindIP }),
        ...(input.containerPort != null && { containerPort: input.containerPort }),
        ...(input.containerPortRange != null && { containerPortRange: input.containerPortRange }),
        ...(input.hostPort != null && { hostPort: input.hostPort }),
        ...(input.hostPortRange != null && { hostPortRange: input.hostPortRange }),
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_NetworkBindings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NetworkBinding(entry, context);
    });
};
const se_NetworkConfiguration = (input, context) => {
    return {
        ...(input.awsvpcConfiguration != null && {
            awsvpcConfiguration: se_AwsVpcConfiguration(input.awsvpcConfiguration, context),
        }),
    };
};
const se_PlacementConstraint = (input, context) => {
    return {
        ...(input.expression != null && { expression: input.expression }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_PlacementConstraints = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PlacementConstraint(entry, context);
    });
};
const se_PlacementStrategies = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PlacementStrategy(entry, context);
    });
};
const se_PlacementStrategy = (input, context) => {
    return {
        ...(input.field != null && { field: input.field }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_PlatformDevice = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_PlatformDevices = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PlatformDevice(entry, context);
    });
};
const se_PortMapping = (input, context) => {
    return {
        ...(input.appProtocol != null && { appProtocol: input.appProtocol }),
        ...(input.containerPort != null && { containerPort: input.containerPort }),
        ...(input.containerPortRange != null && { containerPortRange: input.containerPortRange }),
        ...(input.hostPort != null && { hostPort: input.hostPort }),
        ...(input.name != null && { name: input.name }),
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_PortMappingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PortMapping(entry, context);
    });
};
const se_ProxyConfiguration = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.properties != null && { properties: se_ProxyConfigurationProperties(input.properties, context) }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_ProxyConfigurationProperties = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_KeyValuePair(entry, context);
    });
};
const se_PutAccountSettingDefaultRequest = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_PutAccountSettingRequest = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.principalArn != null && { principalArn: input.principalArn }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_PutAttributesRequest = (input, context) => {
    return {
        ...(input.attributes != null && { attributes: se_Attributes(input.attributes, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
    };
};
const se_PutClusterCapacityProvidersRequest = (input, context) => {
    return {
        ...(input.capacityProviders != null && { capacityProviders: se_StringList(input.capacityProviders, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.defaultCapacityProviderStrategy != null && {
            defaultCapacityProviderStrategy: se_CapacityProviderStrategy(input.defaultCapacityProviderStrategy, context),
        }),
    };
};
const se_RegisterContainerInstanceRequest = (input, context) => {
    return {
        ...(input.attributes != null && { attributes: se_Attributes(input.attributes, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstanceArn != null && { containerInstanceArn: input.containerInstanceArn }),
        ...(input.instanceIdentityDocument != null && { instanceIdentityDocument: input.instanceIdentityDocument }),
        ...(input.instanceIdentityDocumentSignature != null && {
            instanceIdentityDocumentSignature: input.instanceIdentityDocumentSignature,
        }),
        ...(input.platformDevices != null && { platformDevices: se_PlatformDevices(input.platformDevices, context) }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.totalResources != null && { totalResources: se_Resources(input.totalResources, context) }),
        ...(input.versionInfo != null && { versionInfo: se_VersionInfo(input.versionInfo, context) }),
    };
};
const se_RegisterTaskDefinitionRequest = (input, context) => {
    return {
        ...(input.containerDefinitions != null && {
            containerDefinitions: se_ContainerDefinitions(input.containerDefinitions, context),
        }),
        ...(input.cpu != null && { cpu: input.cpu }),
        ...(input.ephemeralStorage != null && { ephemeralStorage: se_EphemeralStorage(input.ephemeralStorage, context) }),
        ...(input.executionRoleArn != null && { executionRoleArn: input.executionRoleArn }),
        ...(input.family != null && { family: input.family }),
        ...(input.inferenceAccelerators != null && {
            inferenceAccelerators: se_InferenceAccelerators(input.inferenceAccelerators, context),
        }),
        ...(input.ipcMode != null && { ipcMode: input.ipcMode }),
        ...(input.memory != null && { memory: input.memory }),
        ...(input.networkMode != null && { networkMode: input.networkMode }),
        ...(input.pidMode != null && { pidMode: input.pidMode }),
        ...(input.placementConstraints != null && {
            placementConstraints: se_TaskDefinitionPlacementConstraints(input.placementConstraints, context),
        }),
        ...(input.proxyConfiguration != null && {
            proxyConfiguration: se_ProxyConfiguration(input.proxyConfiguration, context),
        }),
        ...(input.requiresCompatibilities != null && {
            requiresCompatibilities: se_CompatibilityList(input.requiresCompatibilities, context),
        }),
        ...(input.runtimePlatform != null && { runtimePlatform: se_RuntimePlatform(input.runtimePlatform, context) }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.taskRoleArn != null && { taskRoleArn: input.taskRoleArn }),
        ...(input.volumes != null && { volumes: se_VolumeList(input.volumes, context) }),
    };
};
const se_RepositoryCredentials = (input, context) => {
    return {
        ...(input.credentialsParameter != null && { credentialsParameter: input.credentialsParameter }),
    };
};
const se_Resource = (input, context) => {
    return {
        ...(input.doubleValue != null && { doubleValue: (0, smithy_client_1.serializeFloat)(input.doubleValue) }),
        ...(input.integerValue != null && { integerValue: input.integerValue }),
        ...(input.longValue != null && { longValue: input.longValue }),
        ...(input.name != null && { name: input.name }),
        ...(input.stringSetValue != null && { stringSetValue: se_StringList(input.stringSetValue, context) }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_ResourceRequirement = (input, context) => {
    return {
        ...(input.type != null && { type: input.type }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_ResourceRequirements = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ResourceRequirement(entry, context);
    });
};
const se_Resources = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Resource(entry, context);
    });
};
const se_RunTaskRequest = (input, context) => {
    return {
        ...(input.capacityProviderStrategy != null && {
            capacityProviderStrategy: se_CapacityProviderStrategy(input.capacityProviderStrategy, context),
        }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.count != null && { count: input.count }),
        ...(input.enableECSManagedTags != null && { enableECSManagedTags: input.enableECSManagedTags }),
        ...(input.enableExecuteCommand != null && { enableExecuteCommand: input.enableExecuteCommand }),
        ...(input.group != null && { group: input.group }),
        ...(input.launchType != null && { launchType: input.launchType }),
        ...(input.networkConfiguration != null && {
            networkConfiguration: se_NetworkConfiguration(input.networkConfiguration, context),
        }),
        ...(input.overrides != null && { overrides: se_TaskOverride(input.overrides, context) }),
        ...(input.placementConstraints != null && {
            placementConstraints: se_PlacementConstraints(input.placementConstraints, context),
        }),
        ...(input.placementStrategy != null && {
            placementStrategy: se_PlacementStrategies(input.placementStrategy, context),
        }),
        ...(input.platformVersion != null && { platformVersion: input.platformVersion }),
        ...(input.propagateTags != null && { propagateTags: input.propagateTags }),
        ...(input.referenceId != null && { referenceId: input.referenceId }),
        ...(input.startedBy != null && { startedBy: input.startedBy }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_RuntimePlatform = (input, context) => {
    return {
        ...(input.cpuArchitecture != null && { cpuArchitecture: input.cpuArchitecture }),
        ...(input.operatingSystemFamily != null && { operatingSystemFamily: input.operatingSystemFamily }),
    };
};
const se_Scale = (input, context) => {
    return {
        ...(input.unit != null && { unit: input.unit }),
        ...(input.value != null && { value: (0, smithy_client_1.serializeFloat)(input.value) }),
    };
};
const se_Secret = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.valueFrom != null && { valueFrom: input.valueFrom }),
    };
};
const se_SecretList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Secret(entry, context);
    });
};
const se_ServiceConnectClientAlias = (input, context) => {
    return {
        ...(input.dnsName != null && { dnsName: input.dnsName }),
        ...(input.port != null && { port: input.port }),
    };
};
const se_ServiceConnectClientAliasList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ServiceConnectClientAlias(entry, context);
    });
};
const se_ServiceConnectConfiguration = (input, context) => {
    return {
        ...(input.enabled != null && { enabled: input.enabled }),
        ...(input.logConfiguration != null && { logConfiguration: se_LogConfiguration(input.logConfiguration, context) }),
        ...(input.namespace != null && { namespace: input.namespace }),
        ...(input.services != null && { services: se_ServiceConnectServiceList(input.services, context) }),
    };
};
const se_ServiceConnectService = (input, context) => {
    return {
        ...(input.clientAliases != null && {
            clientAliases: se_ServiceConnectClientAliasList(input.clientAliases, context),
        }),
        ...(input.discoveryName != null && { discoveryName: input.discoveryName }),
        ...(input.ingressPortOverride != null && { ingressPortOverride: input.ingressPortOverride }),
        ...(input.portName != null && { portName: input.portName }),
    };
};
const se_ServiceConnectServiceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ServiceConnectService(entry, context);
    });
};
const se_ServiceFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ServiceRegistries = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ServiceRegistry(entry, context);
    });
};
const se_ServiceRegistry = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.containerPort != null && { containerPort: input.containerPort }),
        ...(input.port != null && { port: input.port }),
        ...(input.registryArn != null && { registryArn: input.registryArn }),
    };
};
const se_StartTaskRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstances != null && { containerInstances: se_StringList(input.containerInstances, context) }),
        ...(input.enableECSManagedTags != null && { enableECSManagedTags: input.enableECSManagedTags }),
        ...(input.enableExecuteCommand != null && { enableExecuteCommand: input.enableExecuteCommand }),
        ...(input.group != null && { group: input.group }),
        ...(input.networkConfiguration != null && {
            networkConfiguration: se_NetworkConfiguration(input.networkConfiguration, context),
        }),
        ...(input.overrides != null && { overrides: se_TaskOverride(input.overrides, context) }),
        ...(input.propagateTags != null && { propagateTags: input.propagateTags }),
        ...(input.referenceId != null && { referenceId: input.referenceId }),
        ...(input.startedBy != null && { startedBy: input.startedBy }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_StopTaskRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.reason != null && { reason: input.reason }),
        ...(input.task != null && { task: input.task }),
    };
};
const se_StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_StringMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_SubmitAttachmentStateChangesRequest = (input, context) => {
    return {
        ...(input.attachments != null && { attachments: se_AttachmentStateChanges(input.attachments, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
    };
};
const se_SubmitContainerStateChangeRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.exitCode != null && { exitCode: input.exitCode }),
        ...(input.networkBindings != null && { networkBindings: se_NetworkBindings(input.networkBindings, context) }),
        ...(input.reason != null && { reason: input.reason }),
        ...(input.runtimeId != null && { runtimeId: input.runtimeId }),
        ...(input.status != null && { status: input.status }),
        ...(input.task != null && { task: input.task }),
    };
};
const se_SubmitTaskStateChangeRequest = (input, context) => {
    return {
        ...(input.attachments != null && { attachments: se_AttachmentStateChanges(input.attachments, context) }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containers != null && { containers: se_ContainerStateChanges(input.containers, context) }),
        ...(input.executionStoppedAt != null && {
            executionStoppedAt: Math.round(input.executionStoppedAt.getTime() / 1000),
        }),
        ...(input.managedAgents != null && { managedAgents: se_ManagedAgentStateChanges(input.managedAgents, context) }),
        ...(input.pullStartedAt != null && { pullStartedAt: Math.round(input.pullStartedAt.getTime() / 1000) }),
        ...(input.pullStoppedAt != null && { pullStoppedAt: Math.round(input.pullStoppedAt.getTime() / 1000) }),
        ...(input.reason != null && { reason: input.reason }),
        ...(input.status != null && { status: input.status }),
        ...(input.task != null && { task: input.task }),
    };
};
const se_SystemControl = (input, context) => {
    return {
        ...(input.namespace != null && { namespace: input.namespace }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_SystemControls = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SystemControl(entry, context);
    });
};
const se_Tag = (input, context) => {
    return {
        ...(input.key != null && { key: input.key }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_TagKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.tags != null && { tags: se_Tags(input.tags, context) }),
    };
};
const se_Tags = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_TaskDefinitionFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TaskDefinitionPlacementConstraint = (input, context) => {
    return {
        ...(input.expression != null && { expression: input.expression }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_TaskDefinitionPlacementConstraints = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TaskDefinitionPlacementConstraint(entry, context);
    });
};
const se_TaskFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TaskOverride = (input, context) => {
    return {
        ...(input.containerOverrides != null && {
            containerOverrides: se_ContainerOverrides(input.containerOverrides, context),
        }),
        ...(input.cpu != null && { cpu: input.cpu }),
        ...(input.ephemeralStorage != null && { ephemeralStorage: se_EphemeralStorage(input.ephemeralStorage, context) }),
        ...(input.executionRoleArn != null && { executionRoleArn: input.executionRoleArn }),
        ...(input.inferenceAcceleratorOverrides != null && {
            inferenceAcceleratorOverrides: se_InferenceAcceleratorOverrides(input.inferenceAcceleratorOverrides, context),
        }),
        ...(input.memory != null && { memory: input.memory }),
        ...(input.taskRoleArn != null && { taskRoleArn: input.taskRoleArn }),
    };
};
const se_TaskSetFieldList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Tmpfs = (input, context) => {
    return {
        ...(input.containerPath != null && { containerPath: input.containerPath }),
        ...(input.mountOptions != null && { mountOptions: se_StringList(input.mountOptions, context) }),
        ...(input.size != null && { size: input.size }),
    };
};
const se_TmpfsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tmpfs(entry, context);
    });
};
const se_Ulimit = (input, context) => {
    return {
        ...(input.hardLimit != null && { hardLimit: input.hardLimit }),
        ...(input.name != null && { name: input.name }),
        ...(input.softLimit != null && { softLimit: input.softLimit }),
    };
};
const se_UlimitList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Ulimit(entry, context);
    });
};
const se_UntagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.tagKeys != null && { tagKeys: se_TagKeys(input.tagKeys, context) }),
    };
};
const se_UpdateCapacityProviderRequest = (input, context) => {
    return {
        ...(input.autoScalingGroupProvider != null && {
            autoScalingGroupProvider: se_AutoScalingGroupProviderUpdate(input.autoScalingGroupProvider, context),
        }),
        ...(input.name != null && { name: input.name }),
    };
};
const se_UpdateClusterRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.configuration != null && { configuration: se_ClusterConfiguration(input.configuration, context) }),
        ...(input.serviceConnectDefaults != null && {
            serviceConnectDefaults: se_ClusterServiceConnectDefaultsRequest(input.serviceConnectDefaults, context),
        }),
        ...(input.settings != null && { settings: se_ClusterSettings(input.settings, context) }),
    };
};
const se_UpdateClusterSettingsRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.settings != null && { settings: se_ClusterSettings(input.settings, context) }),
    };
};
const se_UpdateContainerAgentRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstance != null && { containerInstance: input.containerInstance }),
    };
};
const se_UpdateContainerInstancesStateRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.containerInstances != null && { containerInstances: se_StringList(input.containerInstances, context) }),
        ...(input.status != null && { status: input.status }),
    };
};
const se_UpdateServicePrimaryTaskSetRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.primaryTaskSet != null && { primaryTaskSet: input.primaryTaskSet }),
        ...(input.service != null && { service: input.service }),
    };
};
const se_UpdateServiceRequest = (input, context) => {
    return {
        ...(input.capacityProviderStrategy != null && {
            capacityProviderStrategy: se_CapacityProviderStrategy(input.capacityProviderStrategy, context),
        }),
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.deploymentConfiguration != null && {
            deploymentConfiguration: se_DeploymentConfiguration(input.deploymentConfiguration, context),
        }),
        ...(input.desiredCount != null && { desiredCount: input.desiredCount }),
        ...(input.enableECSManagedTags != null && { enableECSManagedTags: input.enableECSManagedTags }),
        ...(input.enableExecuteCommand != null && { enableExecuteCommand: input.enableExecuteCommand }),
        ...(input.forceNewDeployment != null && { forceNewDeployment: input.forceNewDeployment }),
        ...(input.healthCheckGracePeriodSeconds != null && {
            healthCheckGracePeriodSeconds: input.healthCheckGracePeriodSeconds,
        }),
        ...(input.loadBalancers != null && { loadBalancers: se_LoadBalancers(input.loadBalancers, context) }),
        ...(input.networkConfiguration != null && {
            networkConfiguration: se_NetworkConfiguration(input.networkConfiguration, context),
        }),
        ...(input.placementConstraints != null && {
            placementConstraints: se_PlacementConstraints(input.placementConstraints, context),
        }),
        ...(input.placementStrategy != null && {
            placementStrategy: se_PlacementStrategies(input.placementStrategy, context),
        }),
        ...(input.platformVersion != null && { platformVersion: input.platformVersion }),
        ...(input.propagateTags != null && { propagateTags: input.propagateTags }),
        ...(input.service != null && { service: input.service }),
        ...(input.serviceConnectConfiguration != null && {
            serviceConnectConfiguration: se_ServiceConnectConfiguration(input.serviceConnectConfiguration, context),
        }),
        ...(input.serviceRegistries != null && {
            serviceRegistries: se_ServiceRegistries(input.serviceRegistries, context),
        }),
        ...(input.taskDefinition != null && { taskDefinition: input.taskDefinition }),
    };
};
const se_UpdateTaskProtectionRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.expiresInMinutes != null && { expiresInMinutes: input.expiresInMinutes }),
        ...(input.protectionEnabled != null && { protectionEnabled: input.protectionEnabled }),
        ...(input.tasks != null && { tasks: se_StringList(input.tasks, context) }),
    };
};
const se_UpdateTaskSetRequest = (input, context) => {
    return {
        ...(input.cluster != null && { cluster: input.cluster }),
        ...(input.scale != null && { scale: se_Scale(input.scale, context) }),
        ...(input.service != null && { service: input.service }),
        ...(input.taskSet != null && { taskSet: input.taskSet }),
    };
};
const se_VersionInfo = (input, context) => {
    return {
        ...(input.agentHash != null && { agentHash: input.agentHash }),
        ...(input.agentVersion != null && { agentVersion: input.agentVersion }),
        ...(input.dockerVersion != null && { dockerVersion: input.dockerVersion }),
    };
};
const se_Volume = (input, context) => {
    return {
        ...(input.dockerVolumeConfiguration != null && {
            dockerVolumeConfiguration: se_DockerVolumeConfiguration(input.dockerVolumeConfiguration, context),
        }),
        ...(input.efsVolumeConfiguration != null && {
            efsVolumeConfiguration: se_EFSVolumeConfiguration(input.efsVolumeConfiguration, context),
        }),
        ...(input.fsxWindowsFileServerVolumeConfiguration != null && {
            fsxWindowsFileServerVolumeConfiguration: se_FSxWindowsFileServerVolumeConfiguration(input.fsxWindowsFileServerVolumeConfiguration, context),
        }),
        ...(input.host != null && { host: se_HostVolumeProperties(input.host, context) }),
        ...(input.name != null && { name: input.name }),
    };
};
const se_VolumeFrom = (input, context) => {
    return {
        ...(input.readOnly != null && { readOnly: input.readOnly }),
        ...(input.sourceContainer != null && { sourceContainer: input.sourceContainer }),
    };
};
const se_VolumeFromList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VolumeFrom(entry, context);
    });
};
const se_VolumeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Volume(entry, context);
    });
};
const de_AccessDeniedException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Attachment = (output, context) => {
    return {
        details: output.details != null ? de_AttachmentDetails(output.details, context) : undefined,
        id: (0, smithy_client_1.expectString)(output.id),
        status: (0, smithy_client_1.expectString)(output.status),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_AttachmentDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de_Attachments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Attachment(entry, context);
    });
    return retVal;
};
const de_Attribute = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        targetId: (0, smithy_client_1.expectString)(output.targetId),
        targetType: (0, smithy_client_1.expectString)(output.targetType),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_AttributeLimitExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Attributes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Attribute(entry, context);
    });
    return retVal;
};
const de_AutoScalingGroupProvider = (output, context) => {
    return {
        autoScalingGroupArn: (0, smithy_client_1.expectString)(output.autoScalingGroupArn),
        managedScaling: output.managedScaling != null ? de_ManagedScaling(output.managedScaling, context) : undefined,
        managedTerminationProtection: (0, smithy_client_1.expectString)(output.managedTerminationProtection),
    };
};
const de_AwsVpcConfiguration = (output, context) => {
    return {
        assignPublicIp: (0, smithy_client_1.expectString)(output.assignPublicIp),
        securityGroups: output.securityGroups != null ? de_StringList(output.securityGroups, context) : undefined,
        subnets: output.subnets != null ? de_StringList(output.subnets, context) : undefined,
    };
};
const de_BlockedException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_CapacityProvider = (output, context) => {
    return {
        autoScalingGroupProvider: output.autoScalingGroupProvider != null
            ? de_AutoScalingGroupProvider(output.autoScalingGroupProvider, context)
            : undefined,
        capacityProviderArn: (0, smithy_client_1.expectString)(output.capacityProviderArn),
        name: (0, smithy_client_1.expectString)(output.name),
        status: (0, smithy_client_1.expectString)(output.status),
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        updateStatus: (0, smithy_client_1.expectString)(output.updateStatus),
        updateStatusReason: (0, smithy_client_1.expectString)(output.updateStatusReason),
    };
};
const de_CapacityProviders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CapacityProvider(entry, context);
    });
    return retVal;
};
const de_CapacityProviderStrategy = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CapacityProviderStrategyItem(entry, context);
    });
    return retVal;
};
const de_CapacityProviderStrategyItem = (output, context) => {
    return {
        base: (0, smithy_client_1.expectInt32)(output.base),
        capacityProvider: (0, smithy_client_1.expectString)(output.capacityProvider),
        weight: (0, smithy_client_1.expectInt32)(output.weight),
    };
};
const de_ClientException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Cluster = (output, context) => {
    return {
        activeServicesCount: (0, smithy_client_1.expectInt32)(output.activeServicesCount),
        attachments: output.attachments != null ? de_Attachments(output.attachments, context) : undefined,
        attachmentsStatus: (0, smithy_client_1.expectString)(output.attachmentsStatus),
        capacityProviders: output.capacityProviders != null ? de_StringList(output.capacityProviders, context) : undefined,
        clusterArn: (0, smithy_client_1.expectString)(output.clusterArn),
        clusterName: (0, smithy_client_1.expectString)(output.clusterName),
        configuration: output.configuration != null ? de_ClusterConfiguration(output.configuration, context) : undefined,
        defaultCapacityProviderStrategy: output.defaultCapacityProviderStrategy != null
            ? de_CapacityProviderStrategy(output.defaultCapacityProviderStrategy, context)
            : undefined,
        pendingTasksCount: (0, smithy_client_1.expectInt32)(output.pendingTasksCount),
        registeredContainerInstancesCount: (0, smithy_client_1.expectInt32)(output.registeredContainerInstancesCount),
        runningTasksCount: (0, smithy_client_1.expectInt32)(output.runningTasksCount),
        serviceConnectDefaults: output.serviceConnectDefaults != null
            ? de_ClusterServiceConnectDefaults(output.serviceConnectDefaults, context)
            : undefined,
        settings: output.settings != null ? de_ClusterSettings(output.settings, context) : undefined,
        statistics: output.statistics != null ? de_Statistics(output.statistics, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
    };
};
const de_ClusterConfiguration = (output, context) => {
    return {
        executeCommandConfiguration: output.executeCommandConfiguration != null
            ? de_ExecuteCommandConfiguration(output.executeCommandConfiguration, context)
            : undefined,
    };
};
const de_ClusterContainsContainerInstancesException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ClusterContainsServicesException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ClusterContainsTasksException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ClusterNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Clusters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Cluster(entry, context);
    });
    return retVal;
};
const de_ClusterServiceConnectDefaults = (output, context) => {
    return {
        namespace: (0, smithy_client_1.expectString)(output.namespace),
    };
};
const de_ClusterSetting = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_ClusterSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ClusterSetting(entry, context);
    });
    return retVal;
};
const de_CompatibilityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_Container = (output, context) => {
    return {
        containerArn: (0, smithy_client_1.expectString)(output.containerArn),
        cpu: (0, smithy_client_1.expectString)(output.cpu),
        exitCode: (0, smithy_client_1.expectInt32)(output.exitCode),
        gpuIds: output.gpuIds != null ? de_GpuIds(output.gpuIds, context) : undefined,
        healthStatus: (0, smithy_client_1.expectString)(output.healthStatus),
        image: (0, smithy_client_1.expectString)(output.image),
        imageDigest: (0, smithy_client_1.expectString)(output.imageDigest),
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        managedAgents: output.managedAgents != null ? de_ManagedAgents(output.managedAgents, context) : undefined,
        memory: (0, smithy_client_1.expectString)(output.memory),
        memoryReservation: (0, smithy_client_1.expectString)(output.memoryReservation),
        name: (0, smithy_client_1.expectString)(output.name),
        networkBindings: output.networkBindings != null ? de_NetworkBindings(output.networkBindings, context) : undefined,
        networkInterfaces: output.networkInterfaces != null ? de_NetworkInterfaces(output.networkInterfaces, context) : undefined,
        reason: (0, smithy_client_1.expectString)(output.reason),
        runtimeId: (0, smithy_client_1.expectString)(output.runtimeId),
        taskArn: (0, smithy_client_1.expectString)(output.taskArn),
    };
};
const de_ContainerDefinition = (output, context) => {
    return {
        command: output.command != null ? de_StringList(output.command, context) : undefined,
        cpu: (0, smithy_client_1.expectInt32)(output.cpu),
        dependsOn: output.dependsOn != null ? de_ContainerDependencies(output.dependsOn, context) : undefined,
        disableNetworking: (0, smithy_client_1.expectBoolean)(output.disableNetworking),
        dnsSearchDomains: output.dnsSearchDomains != null ? de_StringList(output.dnsSearchDomains, context) : undefined,
        dnsServers: output.dnsServers != null ? de_StringList(output.dnsServers, context) : undefined,
        dockerLabels: output.dockerLabels != null ? de_DockerLabelsMap(output.dockerLabels, context) : undefined,
        dockerSecurityOptions: output.dockerSecurityOptions != null ? de_StringList(output.dockerSecurityOptions, context) : undefined,
        entryPoint: output.entryPoint != null ? de_StringList(output.entryPoint, context) : undefined,
        environment: output.environment != null ? de_EnvironmentVariables(output.environment, context) : undefined,
        environmentFiles: output.environmentFiles != null ? de_EnvironmentFiles(output.environmentFiles, context) : undefined,
        essential: (0, smithy_client_1.expectBoolean)(output.essential),
        extraHosts: output.extraHosts != null ? de_HostEntryList(output.extraHosts, context) : undefined,
        firelensConfiguration: output.firelensConfiguration != null
            ? de_FirelensConfiguration(output.firelensConfiguration, context)
            : undefined,
        healthCheck: output.healthCheck != null ? de_HealthCheck(output.healthCheck, context) : undefined,
        hostname: (0, smithy_client_1.expectString)(output.hostname),
        image: (0, smithy_client_1.expectString)(output.image),
        interactive: (0, smithy_client_1.expectBoolean)(output.interactive),
        links: output.links != null ? de_StringList(output.links, context) : undefined,
        linuxParameters: output.linuxParameters != null ? de_LinuxParameters(output.linuxParameters, context) : undefined,
        logConfiguration: output.logConfiguration != null ? de_LogConfiguration(output.logConfiguration, context) : undefined,
        memory: (0, smithy_client_1.expectInt32)(output.memory),
        memoryReservation: (0, smithy_client_1.expectInt32)(output.memoryReservation),
        mountPoints: output.mountPoints != null ? de_MountPointList(output.mountPoints, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        portMappings: output.portMappings != null ? de_PortMappingList(output.portMappings, context) : undefined,
        privileged: (0, smithy_client_1.expectBoolean)(output.privileged),
        pseudoTerminal: (0, smithy_client_1.expectBoolean)(output.pseudoTerminal),
        readonlyRootFilesystem: (0, smithy_client_1.expectBoolean)(output.readonlyRootFilesystem),
        repositoryCredentials: output.repositoryCredentials != null
            ? de_RepositoryCredentials(output.repositoryCredentials, context)
            : undefined,
        resourceRequirements: output.resourceRequirements != null ? de_ResourceRequirements(output.resourceRequirements, context) : undefined,
        secrets: output.secrets != null ? de_SecretList(output.secrets, context) : undefined,
        startTimeout: (0, smithy_client_1.expectInt32)(output.startTimeout),
        stopTimeout: (0, smithy_client_1.expectInt32)(output.stopTimeout),
        systemControls: output.systemControls != null ? de_SystemControls(output.systemControls, context) : undefined,
        ulimits: output.ulimits != null ? de_UlimitList(output.ulimits, context) : undefined,
        user: (0, smithy_client_1.expectString)(output.user),
        volumesFrom: output.volumesFrom != null ? de_VolumeFromList(output.volumesFrom, context) : undefined,
        workingDirectory: (0, smithy_client_1.expectString)(output.workingDirectory),
    };
};
const de_ContainerDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerDefinition(entry, context);
    });
    return retVal;
};
const de_ContainerDependencies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerDependency(entry, context);
    });
    return retVal;
};
const de_ContainerDependency = (output, context) => {
    return {
        condition: (0, smithy_client_1.expectString)(output.condition),
        containerName: (0, smithy_client_1.expectString)(output.containerName),
    };
};
const de_ContainerInstance = (output, context) => {
    return {
        agentConnected: (0, smithy_client_1.expectBoolean)(output.agentConnected),
        agentUpdateStatus: (0, smithy_client_1.expectString)(output.agentUpdateStatus),
        attachments: output.attachments != null ? de_Attachments(output.attachments, context) : undefined,
        attributes: output.attributes != null ? de_Attributes(output.attributes, context) : undefined,
        capacityProviderName: (0, smithy_client_1.expectString)(output.capacityProviderName),
        containerInstanceArn: (0, smithy_client_1.expectString)(output.containerInstanceArn),
        ec2InstanceId: (0, smithy_client_1.expectString)(output.ec2InstanceId),
        healthStatus: output.healthStatus != null ? de_ContainerInstanceHealthStatus(output.healthStatus, context) : undefined,
        pendingTasksCount: (0, smithy_client_1.expectInt32)(output.pendingTasksCount),
        registeredAt: output.registeredAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.registeredAt)))
            : undefined,
        registeredResources: output.registeredResources != null ? de_Resources(output.registeredResources, context) : undefined,
        remainingResources: output.remainingResources != null ? de_Resources(output.remainingResources, context) : undefined,
        runningTasksCount: (0, smithy_client_1.expectInt32)(output.runningTasksCount),
        status: (0, smithy_client_1.expectString)(output.status),
        statusReason: (0, smithy_client_1.expectString)(output.statusReason),
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        version: (0, smithy_client_1.expectLong)(output.version),
        versionInfo: output.versionInfo != null ? de_VersionInfo(output.versionInfo, context) : undefined,
    };
};
const de_ContainerInstanceHealthStatus = (output, context) => {
    return {
        details: output.details != null ? de_InstanceHealthCheckResultList(output.details, context) : undefined,
        overallStatus: (0, smithy_client_1.expectString)(output.overallStatus),
    };
};
const de_ContainerInstances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerInstance(entry, context);
    });
    return retVal;
};
const de_ContainerOverride = (output, context) => {
    return {
        command: output.command != null ? de_StringList(output.command, context) : undefined,
        cpu: (0, smithy_client_1.expectInt32)(output.cpu),
        environment: output.environment != null ? de_EnvironmentVariables(output.environment, context) : undefined,
        environmentFiles: output.environmentFiles != null ? de_EnvironmentFiles(output.environmentFiles, context) : undefined,
        memory: (0, smithy_client_1.expectInt32)(output.memory),
        memoryReservation: (0, smithy_client_1.expectInt32)(output.memoryReservation),
        name: (0, smithy_client_1.expectString)(output.name),
        resourceRequirements: output.resourceRequirements != null ? de_ResourceRequirements(output.resourceRequirements, context) : undefined,
    };
};
const de_ContainerOverrides = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerOverride(entry, context);
    });
    return retVal;
};
const de_Containers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Container(entry, context);
    });
    return retVal;
};
const de_CreateCapacityProviderResponse = (output, context) => {
    return {
        capacityProvider: output.capacityProvider != null ? de_CapacityProvider(output.capacityProvider, context) : undefined,
    };
};
const de_CreateClusterResponse = (output, context) => {
    return {
        cluster: output.cluster != null ? de_Cluster(output.cluster, context) : undefined,
    };
};
const de_CreateServiceResponse = (output, context) => {
    return {
        service: output.service != null ? de_Service(output.service, context) : undefined,
    };
};
const de_CreateTaskSetResponse = (output, context) => {
    return {
        taskSet: output.taskSet != null ? de_TaskSet(output.taskSet, context) : undefined,
    };
};
const de_DeleteAccountSettingResponse = (output, context) => {
    return {
        setting: output.setting != null ? de_Setting(output.setting, context) : undefined,
    };
};
const de_DeleteAttributesResponse = (output, context) => {
    return {
        attributes: output.attributes != null ? de_Attributes(output.attributes, context) : undefined,
    };
};
const de_DeleteCapacityProviderResponse = (output, context) => {
    return {
        capacityProvider: output.capacityProvider != null ? de_CapacityProvider(output.capacityProvider, context) : undefined,
    };
};
const de_DeleteClusterResponse = (output, context) => {
    return {
        cluster: output.cluster != null ? de_Cluster(output.cluster, context) : undefined,
    };
};
const de_DeleteServiceResponse = (output, context) => {
    return {
        service: output.service != null ? de_Service(output.service, context) : undefined,
    };
};
const de_DeleteTaskDefinitionsResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        taskDefinitions: output.taskDefinitions != null ? de_TaskDefinitionList(output.taskDefinitions, context) : undefined,
    };
};
const de_DeleteTaskSetResponse = (output, context) => {
    return {
        taskSet: output.taskSet != null ? de_TaskSet(output.taskSet, context) : undefined,
    };
};
const de_Deployment = (output, context) => {
    return {
        capacityProviderStrategy: output.capacityProviderStrategy != null
            ? de_CapacityProviderStrategy(output.capacityProviderStrategy, context)
            : undefined,
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        desiredCount: (0, smithy_client_1.expectInt32)(output.desiredCount),
        failedTasks: (0, smithy_client_1.expectInt32)(output.failedTasks),
        id: (0, smithy_client_1.expectString)(output.id),
        launchType: (0, smithy_client_1.expectString)(output.launchType),
        networkConfiguration: output.networkConfiguration != null ? de_NetworkConfiguration(output.networkConfiguration, context) : undefined,
        pendingCount: (0, smithy_client_1.expectInt32)(output.pendingCount),
        platformFamily: (0, smithy_client_1.expectString)(output.platformFamily),
        platformVersion: (0, smithy_client_1.expectString)(output.platformVersion),
        rolloutState: (0, smithy_client_1.expectString)(output.rolloutState),
        rolloutStateReason: (0, smithy_client_1.expectString)(output.rolloutStateReason),
        runningCount: (0, smithy_client_1.expectInt32)(output.runningCount),
        serviceConnectConfiguration: output.serviceConnectConfiguration != null
            ? de_ServiceConnectConfiguration(output.serviceConnectConfiguration, context)
            : undefined,
        serviceConnectResources: output.serviceConnectResources != null
            ? de_ServiceConnectServiceResourceList(output.serviceConnectResources, context)
            : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        taskDefinition: (0, smithy_client_1.expectString)(output.taskDefinition),
        updatedAt: output.updatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.updatedAt))) : undefined,
    };
};
const de_DeploymentAlarms = (output, context) => {
    return {
        alarmNames: output.alarmNames != null ? de_StringList(output.alarmNames, context) : undefined,
        enable: (0, smithy_client_1.expectBoolean)(output.enable),
        rollback: (0, smithy_client_1.expectBoolean)(output.rollback),
    };
};
const de_DeploymentCircuitBreaker = (output, context) => {
    return {
        enable: (0, smithy_client_1.expectBoolean)(output.enable),
        rollback: (0, smithy_client_1.expectBoolean)(output.rollback),
    };
};
const de_DeploymentConfiguration = (output, context) => {
    return {
        alarms: output.alarms != null ? de_DeploymentAlarms(output.alarms, context) : undefined,
        deploymentCircuitBreaker: output.deploymentCircuitBreaker != null
            ? de_DeploymentCircuitBreaker(output.deploymentCircuitBreaker, context)
            : undefined,
        maximumPercent: (0, smithy_client_1.expectInt32)(output.maximumPercent),
        minimumHealthyPercent: (0, smithy_client_1.expectInt32)(output.minimumHealthyPercent),
    };
};
const de_DeploymentController = (output, context) => {
    return {
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_Deployments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Deployment(entry, context);
    });
    return retVal;
};
const de_DeregisterContainerInstanceResponse = (output, context) => {
    return {
        containerInstance: output.containerInstance != null ? de_ContainerInstance(output.containerInstance, context) : undefined,
    };
};
const de_DeregisterTaskDefinitionResponse = (output, context) => {
    return {
        taskDefinition: output.taskDefinition != null ? de_TaskDefinition(output.taskDefinition, context) : undefined,
    };
};
const de_DescribeCapacityProvidersResponse = (output, context) => {
    return {
        capacityProviders: output.capacityProviders != null ? de_CapacityProviders(output.capacityProviders, context) : undefined,
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_DescribeClustersResponse = (output, context) => {
    return {
        clusters: output.clusters != null ? de_Clusters(output.clusters, context) : undefined,
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
    };
};
const de_DescribeContainerInstancesResponse = (output, context) => {
    return {
        containerInstances: output.containerInstances != null ? de_ContainerInstances(output.containerInstances, context) : undefined,
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
    };
};
const de_DescribeServicesResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        services: output.services != null ? de_Services(output.services, context) : undefined,
    };
};
const de_DescribeTaskDefinitionResponse = (output, context) => {
    return {
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        taskDefinition: output.taskDefinition != null ? de_TaskDefinition(output.taskDefinition, context) : undefined,
    };
};
const de_DescribeTaskSetsResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        taskSets: output.taskSets != null ? de_TaskSets(output.taskSets, context) : undefined,
    };
};
const de_DescribeTasksResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        tasks: output.tasks != null ? de_Tasks(output.tasks, context) : undefined,
    };
};
const de_Device = (output, context) => {
    return {
        containerPath: (0, smithy_client_1.expectString)(output.containerPath),
        hostPath: (0, smithy_client_1.expectString)(output.hostPath),
        permissions: output.permissions != null ? de_DeviceCgroupPermissions(output.permissions, context) : undefined,
    };
};
const de_DeviceCgroupPermissions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_DevicesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Device(entry, context);
    });
    return retVal;
};
const de_DiscoverPollEndpointResponse = (output, context) => {
    return {
        endpoint: (0, smithy_client_1.expectString)(output.endpoint),
        serviceConnectEndpoint: (0, smithy_client_1.expectString)(output.serviceConnectEndpoint),
        telemetryEndpoint: (0, smithy_client_1.expectString)(output.telemetryEndpoint),
    };
};
const de_DockerLabelsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_DockerVolumeConfiguration = (output, context) => {
    return {
        autoprovision: (0, smithy_client_1.expectBoolean)(output.autoprovision),
        driver: (0, smithy_client_1.expectString)(output.driver),
        driverOpts: output.driverOpts != null ? de_StringMap(output.driverOpts, context) : undefined,
        labels: output.labels != null ? de_StringMap(output.labels, context) : undefined,
        scope: (0, smithy_client_1.expectString)(output.scope),
    };
};
const de_EFSAuthorizationConfig = (output, context) => {
    return {
        accessPointId: (0, smithy_client_1.expectString)(output.accessPointId),
        iam: (0, smithy_client_1.expectString)(output.iam),
    };
};
const de_EFSVolumeConfiguration = (output, context) => {
    return {
        authorizationConfig: output.authorizationConfig != null ? de_EFSAuthorizationConfig(output.authorizationConfig, context) : undefined,
        fileSystemId: (0, smithy_client_1.expectString)(output.fileSystemId),
        rootDirectory: (0, smithy_client_1.expectString)(output.rootDirectory),
        transitEncryption: (0, smithy_client_1.expectString)(output.transitEncryption),
        transitEncryptionPort: (0, smithy_client_1.expectInt32)(output.transitEncryptionPort),
    };
};
const de_EnvironmentFile = (output, context) => {
    return {
        type: (0, smithy_client_1.expectString)(output.type),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_EnvironmentFiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_EnvironmentFile(entry, context);
    });
    return retVal;
};
const de_EnvironmentVariables = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de_EphemeralStorage = (output, context) => {
    return {
        sizeInGiB: (0, smithy_client_1.expectInt32)(output.sizeInGiB),
    };
};
const de_ExecuteCommandConfiguration = (output, context) => {
    return {
        kmsKeyId: (0, smithy_client_1.expectString)(output.kmsKeyId),
        logConfiguration: output.logConfiguration != null ? de_ExecuteCommandLogConfiguration(output.logConfiguration, context) : undefined,
        logging: (0, smithy_client_1.expectString)(output.logging),
    };
};
const de_ExecuteCommandLogConfiguration = (output, context) => {
    return {
        cloudWatchEncryptionEnabled: (0, smithy_client_1.expectBoolean)(output.cloudWatchEncryptionEnabled),
        cloudWatchLogGroupName: (0, smithy_client_1.expectString)(output.cloudWatchLogGroupName),
        s3BucketName: (0, smithy_client_1.expectString)(output.s3BucketName),
        s3EncryptionEnabled: (0, smithy_client_1.expectBoolean)(output.s3EncryptionEnabled),
        s3KeyPrefix: (0, smithy_client_1.expectString)(output.s3KeyPrefix),
    };
};
const de_ExecuteCommandResponse = (output, context) => {
    return {
        clusterArn: (0, smithy_client_1.expectString)(output.clusterArn),
        containerArn: (0, smithy_client_1.expectString)(output.containerArn),
        containerName: (0, smithy_client_1.expectString)(output.containerName),
        interactive: (0, smithy_client_1.expectBoolean)(output.interactive),
        session: output.session != null ? de_Session(output.session, context) : undefined,
        taskArn: (0, smithy_client_1.expectString)(output.taskArn),
    };
};
const de_Failure = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        detail: (0, smithy_client_1.expectString)(output.detail),
        reason: (0, smithy_client_1.expectString)(output.reason),
    };
};
const de_Failures = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Failure(entry, context);
    });
    return retVal;
};
const de_FirelensConfiguration = (output, context) => {
    return {
        options: output.options != null ? de_FirelensConfigurationOptionsMap(output.options, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_FirelensConfigurationOptionsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_FSxWindowsFileServerAuthorizationConfig = (output, context) => {
    return {
        credentialsParameter: (0, smithy_client_1.expectString)(output.credentialsParameter),
        domain: (0, smithy_client_1.expectString)(output.domain),
    };
};
const de_FSxWindowsFileServerVolumeConfiguration = (output, context) => {
    return {
        authorizationConfig: output.authorizationConfig != null
            ? de_FSxWindowsFileServerAuthorizationConfig(output.authorizationConfig, context)
            : undefined,
        fileSystemId: (0, smithy_client_1.expectString)(output.fileSystemId),
        rootDirectory: (0, smithy_client_1.expectString)(output.rootDirectory),
    };
};
const de_GetTaskProtectionResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        protectedTasks: output.protectedTasks != null ? de_ProtectedTasks(output.protectedTasks, context) : undefined,
    };
};
const de_GpuIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_HealthCheck = (output, context) => {
    return {
        command: output.command != null ? de_StringList(output.command, context) : undefined,
        interval: (0, smithy_client_1.expectInt32)(output.interval),
        retries: (0, smithy_client_1.expectInt32)(output.retries),
        startPeriod: (0, smithy_client_1.expectInt32)(output.startPeriod),
        timeout: (0, smithy_client_1.expectInt32)(output.timeout),
    };
};
const de_HostEntry = (output, context) => {
    return {
        hostname: (0, smithy_client_1.expectString)(output.hostname),
        ipAddress: (0, smithy_client_1.expectString)(output.ipAddress),
    };
};
const de_HostEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_HostEntry(entry, context);
    });
    return retVal;
};
const de_HostVolumeProperties = (output, context) => {
    return {
        sourcePath: (0, smithy_client_1.expectString)(output.sourcePath),
    };
};
const de_InferenceAccelerator = (output, context) => {
    return {
        deviceName: (0, smithy_client_1.expectString)(output.deviceName),
        deviceType: (0, smithy_client_1.expectString)(output.deviceType),
    };
};
const de_InferenceAcceleratorOverride = (output, context) => {
    return {
        deviceName: (0, smithy_client_1.expectString)(output.deviceName),
        deviceType: (0, smithy_client_1.expectString)(output.deviceType),
    };
};
const de_InferenceAcceleratorOverrides = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InferenceAcceleratorOverride(entry, context);
    });
    return retVal;
};
const de_InferenceAccelerators = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InferenceAccelerator(entry, context);
    });
    return retVal;
};
const de_InstanceHealthCheckResult = (output, context) => {
    return {
        lastStatusChange: output.lastStatusChange != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStatusChange)))
            : undefined,
        lastUpdated: output.lastUpdated != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdated)))
            : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_InstanceHealthCheckResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InstanceHealthCheckResult(entry, context);
    });
    return retVal;
};
const de_InvalidParameterException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_KernelCapabilities = (output, context) => {
    return {
        add: output.add != null ? de_StringList(output.add, context) : undefined,
        drop: output.drop != null ? de_StringList(output.drop, context) : undefined,
    };
};
const de_KeyValuePair = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_LimitExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_LinuxParameters = (output, context) => {
    return {
        capabilities: output.capabilities != null ? de_KernelCapabilities(output.capabilities, context) : undefined,
        devices: output.devices != null ? de_DevicesList(output.devices, context) : undefined,
        initProcessEnabled: (0, smithy_client_1.expectBoolean)(output.initProcessEnabled),
        maxSwap: (0, smithy_client_1.expectInt32)(output.maxSwap),
        sharedMemorySize: (0, smithy_client_1.expectInt32)(output.sharedMemorySize),
        swappiness: (0, smithy_client_1.expectInt32)(output.swappiness),
        tmpfs: output.tmpfs != null ? de_TmpfsList(output.tmpfs, context) : undefined,
    };
};
const de_ListAccountSettingsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        settings: output.settings != null ? de_Settings(output.settings, context) : undefined,
    };
};
const de_ListAttributesResponse = (output, context) => {
    return {
        attributes: output.attributes != null ? de_Attributes(output.attributes, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_ListClustersResponse = (output, context) => {
    return {
        clusterArns: output.clusterArns != null ? de_StringList(output.clusterArns, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_ListContainerInstancesResponse = (output, context) => {
    return {
        containerInstanceArns: output.containerInstanceArns != null ? de_StringList(output.containerInstanceArns, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_ListServicesByNamespaceResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        serviceArns: output.serviceArns != null ? de_StringList(output.serviceArns, context) : undefined,
    };
};
const de_ListServicesResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        serviceArns: output.serviceArns != null ? de_StringList(output.serviceArns, context) : undefined,
    };
};
const de_ListTagsForResourceResponse = (output, context) => {
    return {
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
    };
};
const de_ListTaskDefinitionFamiliesResponse = (output, context) => {
    return {
        families: output.families != null ? de_StringList(output.families, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_ListTaskDefinitionsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        taskDefinitionArns: output.taskDefinitionArns != null ? de_StringList(output.taskDefinitionArns, context) : undefined,
    };
};
const de_ListTasksResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        taskArns: output.taskArns != null ? de_StringList(output.taskArns, context) : undefined,
    };
};
const de_LoadBalancer = (output, context) => {
    return {
        containerName: (0, smithy_client_1.expectString)(output.containerName),
        containerPort: (0, smithy_client_1.expectInt32)(output.containerPort),
        loadBalancerName: (0, smithy_client_1.expectString)(output.loadBalancerName),
        targetGroupArn: (0, smithy_client_1.expectString)(output.targetGroupArn),
    };
};
const de_LoadBalancers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancer(entry, context);
    });
    return retVal;
};
const de_LogConfiguration = (output, context) => {
    return {
        logDriver: (0, smithy_client_1.expectString)(output.logDriver),
        options: output.options != null ? de_LogConfigurationOptionsMap(output.options, context) : undefined,
        secretOptions: output.secretOptions != null ? de_SecretList(output.secretOptions, context) : undefined,
    };
};
const de_LogConfigurationOptionsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_ManagedAgent = (output, context) => {
    return {
        lastStartedAt: output.lastStartedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStartedAt)))
            : undefined,
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        name: (0, smithy_client_1.expectString)(output.name),
        reason: (0, smithy_client_1.expectString)(output.reason),
    };
};
const de_ManagedAgents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ManagedAgent(entry, context);
    });
    return retVal;
};
const de_ManagedScaling = (output, context) => {
    return {
        instanceWarmupPeriod: (0, smithy_client_1.expectInt32)(output.instanceWarmupPeriod),
        maximumScalingStepSize: (0, smithy_client_1.expectInt32)(output.maximumScalingStepSize),
        minimumScalingStepSize: (0, smithy_client_1.expectInt32)(output.minimumScalingStepSize),
        status: (0, smithy_client_1.expectString)(output.status),
        targetCapacity: (0, smithy_client_1.expectInt32)(output.targetCapacity),
    };
};
const de_MissingVersionException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MountPoint = (output, context) => {
    return {
        containerPath: (0, smithy_client_1.expectString)(output.containerPath),
        readOnly: (0, smithy_client_1.expectBoolean)(output.readOnly),
        sourceVolume: (0, smithy_client_1.expectString)(output.sourceVolume),
    };
};
const de_MountPointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_MountPoint(entry, context);
    });
    return retVal;
};
const de_NamespaceNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NetworkBinding = (output, context) => {
    return {
        bindIP: (0, smithy_client_1.expectString)(output.bindIP),
        containerPort: (0, smithy_client_1.expectInt32)(output.containerPort),
        containerPortRange: (0, smithy_client_1.expectString)(output.containerPortRange),
        hostPort: (0, smithy_client_1.expectInt32)(output.hostPort),
        hostPortRange: (0, smithy_client_1.expectString)(output.hostPortRange),
        protocol: (0, smithy_client_1.expectString)(output.protocol),
    };
};
const de_NetworkBindings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_NetworkBinding(entry, context);
    });
    return retVal;
};
const de_NetworkConfiguration = (output, context) => {
    return {
        awsvpcConfiguration: output.awsvpcConfiguration != null ? de_AwsVpcConfiguration(output.awsvpcConfiguration, context) : undefined,
    };
};
const de_NetworkInterface = (output, context) => {
    return {
        attachmentId: (0, smithy_client_1.expectString)(output.attachmentId),
        ipv6Address: (0, smithy_client_1.expectString)(output.ipv6Address),
        privateIpv4Address: (0, smithy_client_1.expectString)(output.privateIpv4Address),
    };
};
const de_NetworkInterfaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_NetworkInterface(entry, context);
    });
    return retVal;
};
const de_NoUpdateAvailableException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_PlacementConstraint = (output, context) => {
    return {
        expression: (0, smithy_client_1.expectString)(output.expression),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_PlacementConstraints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PlacementConstraint(entry, context);
    });
    return retVal;
};
const de_PlacementStrategies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PlacementStrategy(entry, context);
    });
    return retVal;
};
const de_PlacementStrategy = (output, context) => {
    return {
        field: (0, smithy_client_1.expectString)(output.field),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_PlatformTaskDefinitionIncompatibilityException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_PlatformUnknownException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_PortMapping = (output, context) => {
    return {
        appProtocol: (0, smithy_client_1.expectString)(output.appProtocol),
        containerPort: (0, smithy_client_1.expectInt32)(output.containerPort),
        containerPortRange: (0, smithy_client_1.expectString)(output.containerPortRange),
        hostPort: (0, smithy_client_1.expectInt32)(output.hostPort),
        name: (0, smithy_client_1.expectString)(output.name),
        protocol: (0, smithy_client_1.expectString)(output.protocol),
    };
};
const de_PortMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PortMapping(entry, context);
    });
    return retVal;
};
const de_ProtectedTask = (output, context) => {
    return {
        expirationDate: output.expirationDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expirationDate)))
            : undefined,
        protectionEnabled: (0, smithy_client_1.expectBoolean)(output.protectionEnabled),
        taskArn: (0, smithy_client_1.expectString)(output.taskArn),
    };
};
const de_ProtectedTasks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ProtectedTask(entry, context);
    });
    return retVal;
};
const de_ProxyConfiguration = (output, context) => {
    return {
        containerName: (0, smithy_client_1.expectString)(output.containerName),
        properties: output.properties != null ? de_ProxyConfigurationProperties(output.properties, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_ProxyConfigurationProperties = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de_PutAccountSettingDefaultResponse = (output, context) => {
    return {
        setting: output.setting != null ? de_Setting(output.setting, context) : undefined,
    };
};
const de_PutAccountSettingResponse = (output, context) => {
    return {
        setting: output.setting != null ? de_Setting(output.setting, context) : undefined,
    };
};
const de_PutAttributesResponse = (output, context) => {
    return {
        attributes: output.attributes != null ? de_Attributes(output.attributes, context) : undefined,
    };
};
const de_PutClusterCapacityProvidersResponse = (output, context) => {
    return {
        cluster: output.cluster != null ? de_Cluster(output.cluster, context) : undefined,
    };
};
const de_RegisterContainerInstanceResponse = (output, context) => {
    return {
        containerInstance: output.containerInstance != null ? de_ContainerInstance(output.containerInstance, context) : undefined,
    };
};
const de_RegisterTaskDefinitionResponse = (output, context) => {
    return {
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        taskDefinition: output.taskDefinition != null ? de_TaskDefinition(output.taskDefinition, context) : undefined,
    };
};
const de_RepositoryCredentials = (output, context) => {
    return {
        credentialsParameter: (0, smithy_client_1.expectString)(output.credentialsParameter),
    };
};
const de_RequiresAttributes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Attribute(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return {
        doubleValue: (0, smithy_client_1.limitedParseDouble)(output.doubleValue),
        integerValue: (0, smithy_client_1.expectInt32)(output.integerValue),
        longValue: (0, smithy_client_1.expectLong)(output.longValue),
        name: (0, smithy_client_1.expectString)(output.name),
        stringSetValue: output.stringSetValue != null ? de_StringList(output.stringSetValue, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_ResourceInUseException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceRequirement = (output, context) => {
    return {
        type: (0, smithy_client_1.expectString)(output.type),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_ResourceRequirements = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceRequirement(entry, context);
    });
    return retVal;
};
const de_Resources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_RunTaskResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        tasks: output.tasks != null ? de_Tasks(output.tasks, context) : undefined,
    };
};
const de_RuntimePlatform = (output, context) => {
    return {
        cpuArchitecture: (0, smithy_client_1.expectString)(output.cpuArchitecture),
        operatingSystemFamily: (0, smithy_client_1.expectString)(output.operatingSystemFamily),
    };
};
const de_Scale = (output, context) => {
    return {
        unit: (0, smithy_client_1.expectString)(output.unit),
        value: (0, smithy_client_1.limitedParseDouble)(output.value),
    };
};
const de_Secret = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        valueFrom: (0, smithy_client_1.expectString)(output.valueFrom),
    };
};
const de_SecretList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Secret(entry, context);
    });
    return retVal;
};
const de_ServerException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Service = (output, context) => {
    return {
        capacityProviderStrategy: output.capacityProviderStrategy != null
            ? de_CapacityProviderStrategy(output.capacityProviderStrategy, context)
            : undefined,
        clusterArn: (0, smithy_client_1.expectString)(output.clusterArn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        createdBy: (0, smithy_client_1.expectString)(output.createdBy),
        deploymentConfiguration: output.deploymentConfiguration != null
            ? de_DeploymentConfiguration(output.deploymentConfiguration, context)
            : undefined,
        deploymentController: output.deploymentController != null ? de_DeploymentController(output.deploymentController, context) : undefined,
        deployments: output.deployments != null ? de_Deployments(output.deployments, context) : undefined,
        desiredCount: (0, smithy_client_1.expectInt32)(output.desiredCount),
        enableECSManagedTags: (0, smithy_client_1.expectBoolean)(output.enableECSManagedTags),
        enableExecuteCommand: (0, smithy_client_1.expectBoolean)(output.enableExecuteCommand),
        events: output.events != null ? de_ServiceEvents(output.events, context) : undefined,
        healthCheckGracePeriodSeconds: (0, smithy_client_1.expectInt32)(output.healthCheckGracePeriodSeconds),
        launchType: (0, smithy_client_1.expectString)(output.launchType),
        loadBalancers: output.loadBalancers != null ? de_LoadBalancers(output.loadBalancers, context) : undefined,
        networkConfiguration: output.networkConfiguration != null ? de_NetworkConfiguration(output.networkConfiguration, context) : undefined,
        pendingCount: (0, smithy_client_1.expectInt32)(output.pendingCount),
        placementConstraints: output.placementConstraints != null ? de_PlacementConstraints(output.placementConstraints, context) : undefined,
        placementStrategy: output.placementStrategy != null ? de_PlacementStrategies(output.placementStrategy, context) : undefined,
        platformFamily: (0, smithy_client_1.expectString)(output.platformFamily),
        platformVersion: (0, smithy_client_1.expectString)(output.platformVersion),
        propagateTags: (0, smithy_client_1.expectString)(output.propagateTags),
        roleArn: (0, smithy_client_1.expectString)(output.roleArn),
        runningCount: (0, smithy_client_1.expectInt32)(output.runningCount),
        schedulingStrategy: (0, smithy_client_1.expectString)(output.schedulingStrategy),
        serviceArn: (0, smithy_client_1.expectString)(output.serviceArn),
        serviceName: (0, smithy_client_1.expectString)(output.serviceName),
        serviceRegistries: output.serviceRegistries != null ? de_ServiceRegistries(output.serviceRegistries, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        taskDefinition: (0, smithy_client_1.expectString)(output.taskDefinition),
        taskSets: output.taskSets != null ? de_TaskSets(output.taskSets, context) : undefined,
    };
};
const de_ServiceConnectClientAlias = (output, context) => {
    return {
        dnsName: (0, smithy_client_1.expectString)(output.dnsName),
        port: (0, smithy_client_1.expectInt32)(output.port),
    };
};
const de_ServiceConnectClientAliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ServiceConnectClientAlias(entry, context);
    });
    return retVal;
};
const de_ServiceConnectConfiguration = (output, context) => {
    return {
        enabled: (0, smithy_client_1.expectBoolean)(output.enabled),
        logConfiguration: output.logConfiguration != null ? de_LogConfiguration(output.logConfiguration, context) : undefined,
        namespace: (0, smithy_client_1.expectString)(output.namespace),
        services: output.services != null ? de_ServiceConnectServiceList(output.services, context) : undefined,
    };
};
const de_ServiceConnectService = (output, context) => {
    return {
        clientAliases: output.clientAliases != null ? de_ServiceConnectClientAliasList(output.clientAliases, context) : undefined,
        discoveryName: (0, smithy_client_1.expectString)(output.discoveryName),
        ingressPortOverride: (0, smithy_client_1.expectInt32)(output.ingressPortOverride),
        portName: (0, smithy_client_1.expectString)(output.portName),
    };
};
const de_ServiceConnectServiceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ServiceConnectService(entry, context);
    });
    return retVal;
};
const de_ServiceConnectServiceResource = (output, context) => {
    return {
        discoveryArn: (0, smithy_client_1.expectString)(output.discoveryArn),
        discoveryName: (0, smithy_client_1.expectString)(output.discoveryName),
    };
};
const de_ServiceConnectServiceResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ServiceConnectServiceResource(entry, context);
    });
    return retVal;
};
const de_ServiceEvent = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        id: (0, smithy_client_1.expectString)(output.id),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ServiceEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ServiceEvent(entry, context);
    });
    return retVal;
};
const de_ServiceNotActiveException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ServiceNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ServiceRegistries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ServiceRegistry(entry, context);
    });
    return retVal;
};
const de_ServiceRegistry = (output, context) => {
    return {
        containerName: (0, smithy_client_1.expectString)(output.containerName),
        containerPort: (0, smithy_client_1.expectInt32)(output.containerPort),
        port: (0, smithy_client_1.expectInt32)(output.port),
        registryArn: (0, smithy_client_1.expectString)(output.registryArn),
    };
};
const de_Services = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Service(entry, context);
    });
    return retVal;
};
const de_Session = (output, context) => {
    return {
        sessionId: (0, smithy_client_1.expectString)(output.sessionId),
        streamUrl: (0, smithy_client_1.expectString)(output.streamUrl),
        tokenValue: (0, smithy_client_1.expectString)(output.tokenValue),
    };
};
const de_Setting = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        principalArn: (0, smithy_client_1.expectString)(output.principalArn),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_Settings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Setting(entry, context);
    });
    return retVal;
};
const de_StartTaskResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        tasks: output.tasks != null ? de_Tasks(output.tasks, context) : undefined,
    };
};
const de_Statistics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de_StopTaskResponse = (output, context) => {
    return {
        task: output.task != null ? de_Task(output.task, context) : undefined,
    };
};
const de_StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_StringMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_SubmitAttachmentStateChangesResponse = (output, context) => {
    return {
        acknowledgment: (0, smithy_client_1.expectString)(output.acknowledgment),
    };
};
const de_SubmitContainerStateChangeResponse = (output, context) => {
    return {
        acknowledgment: (0, smithy_client_1.expectString)(output.acknowledgment),
    };
};
const de_SubmitTaskStateChangeResponse = (output, context) => {
    return {
        acknowledgment: (0, smithy_client_1.expectString)(output.acknowledgment),
    };
};
const de_SystemControl = (output, context) => {
    return {
        namespace: (0, smithy_client_1.expectString)(output.namespace),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_SystemControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SystemControl(entry, context);
    });
    return retVal;
};
const de_Tag = (output, context) => {
    return {
        key: (0, smithy_client_1.expectString)(output.key),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_TagResourceResponse = (output, context) => {
    return {};
};
const de_Tags = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Tag(entry, context);
    });
    return retVal;
};
const de_TargetNotConnectedException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_TargetNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Task = (output, context) => {
    return {
        attachments: output.attachments != null ? de_Attachments(output.attachments, context) : undefined,
        attributes: output.attributes != null ? de_Attributes(output.attributes, context) : undefined,
        availabilityZone: (0, smithy_client_1.expectString)(output.availabilityZone),
        capacityProviderName: (0, smithy_client_1.expectString)(output.capacityProviderName),
        clusterArn: (0, smithy_client_1.expectString)(output.clusterArn),
        connectivity: (0, smithy_client_1.expectString)(output.connectivity),
        connectivityAt: output.connectivityAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.connectivityAt)))
            : undefined,
        containerInstanceArn: (0, smithy_client_1.expectString)(output.containerInstanceArn),
        containers: output.containers != null ? de_Containers(output.containers, context) : undefined,
        cpu: (0, smithy_client_1.expectString)(output.cpu),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        desiredStatus: (0, smithy_client_1.expectString)(output.desiredStatus),
        enableExecuteCommand: (0, smithy_client_1.expectBoolean)(output.enableExecuteCommand),
        ephemeralStorage: output.ephemeralStorage != null ? de_EphemeralStorage(output.ephemeralStorage, context) : undefined,
        executionStoppedAt: output.executionStoppedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.executionStoppedAt)))
            : undefined,
        group: (0, smithy_client_1.expectString)(output.group),
        healthStatus: (0, smithy_client_1.expectString)(output.healthStatus),
        inferenceAccelerators: output.inferenceAccelerators != null
            ? de_InferenceAccelerators(output.inferenceAccelerators, context)
            : undefined,
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        launchType: (0, smithy_client_1.expectString)(output.launchType),
        memory: (0, smithy_client_1.expectString)(output.memory),
        overrides: output.overrides != null ? de_TaskOverride(output.overrides, context) : undefined,
        platformFamily: (0, smithy_client_1.expectString)(output.platformFamily),
        platformVersion: (0, smithy_client_1.expectString)(output.platformVersion),
        pullStartedAt: output.pullStartedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.pullStartedAt)))
            : undefined,
        pullStoppedAt: output.pullStoppedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.pullStoppedAt)))
            : undefined,
        startedAt: output.startedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.startedAt))) : undefined,
        startedBy: (0, smithy_client_1.expectString)(output.startedBy),
        stopCode: (0, smithy_client_1.expectString)(output.stopCode),
        stoppedAt: output.stoppedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.stoppedAt))) : undefined,
        stoppedReason: (0, smithy_client_1.expectString)(output.stoppedReason),
        stoppingAt: output.stoppingAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.stoppingAt))) : undefined,
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        taskArn: (0, smithy_client_1.expectString)(output.taskArn),
        taskDefinitionArn: (0, smithy_client_1.expectString)(output.taskDefinitionArn),
        version: (0, smithy_client_1.expectLong)(output.version),
    };
};
const de_TaskDefinition = (output, context) => {
    return {
        compatibilities: output.compatibilities != null ? de_CompatibilityList(output.compatibilities, context) : undefined,
        containerDefinitions: output.containerDefinitions != null ? de_ContainerDefinitions(output.containerDefinitions, context) : undefined,
        cpu: (0, smithy_client_1.expectString)(output.cpu),
        deregisteredAt: output.deregisteredAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.deregisteredAt)))
            : undefined,
        ephemeralStorage: output.ephemeralStorage != null ? de_EphemeralStorage(output.ephemeralStorage, context) : undefined,
        executionRoleArn: (0, smithy_client_1.expectString)(output.executionRoleArn),
        family: (0, smithy_client_1.expectString)(output.family),
        inferenceAccelerators: output.inferenceAccelerators != null
            ? de_InferenceAccelerators(output.inferenceAccelerators, context)
            : undefined,
        ipcMode: (0, smithy_client_1.expectString)(output.ipcMode),
        memory: (0, smithy_client_1.expectString)(output.memory),
        networkMode: (0, smithy_client_1.expectString)(output.networkMode),
        pidMode: (0, smithy_client_1.expectString)(output.pidMode),
        placementConstraints: output.placementConstraints != null
            ? de_TaskDefinitionPlacementConstraints(output.placementConstraints, context)
            : undefined,
        proxyConfiguration: output.proxyConfiguration != null ? de_ProxyConfiguration(output.proxyConfiguration, context) : undefined,
        registeredAt: output.registeredAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.registeredAt)))
            : undefined,
        registeredBy: (0, smithy_client_1.expectString)(output.registeredBy),
        requiresAttributes: output.requiresAttributes != null ? de_RequiresAttributes(output.requiresAttributes, context) : undefined,
        requiresCompatibilities: output.requiresCompatibilities != null
            ? de_CompatibilityList(output.requiresCompatibilities, context)
            : undefined,
        revision: (0, smithy_client_1.expectInt32)(output.revision),
        runtimePlatform: output.runtimePlatform != null ? de_RuntimePlatform(output.runtimePlatform, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
        taskDefinitionArn: (0, smithy_client_1.expectString)(output.taskDefinitionArn),
        taskRoleArn: (0, smithy_client_1.expectString)(output.taskRoleArn),
        volumes: output.volumes != null ? de_VolumeList(output.volumes, context) : undefined,
    };
};
const de_TaskDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_TaskDefinition(entry, context);
    });
    return retVal;
};
const de_TaskDefinitionPlacementConstraint = (output, context) => {
    return {
        expression: (0, smithy_client_1.expectString)(output.expression),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_TaskDefinitionPlacementConstraints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_TaskDefinitionPlacementConstraint(entry, context);
    });
    return retVal;
};
const de_TaskOverride = (output, context) => {
    return {
        containerOverrides: output.containerOverrides != null ? de_ContainerOverrides(output.containerOverrides, context) : undefined,
        cpu: (0, smithy_client_1.expectString)(output.cpu),
        ephemeralStorage: output.ephemeralStorage != null ? de_EphemeralStorage(output.ephemeralStorage, context) : undefined,
        executionRoleArn: (0, smithy_client_1.expectString)(output.executionRoleArn),
        inferenceAcceleratorOverrides: output.inferenceAcceleratorOverrides != null
            ? de_InferenceAcceleratorOverrides(output.inferenceAcceleratorOverrides, context)
            : undefined,
        memory: (0, smithy_client_1.expectString)(output.memory),
        taskRoleArn: (0, smithy_client_1.expectString)(output.taskRoleArn),
    };
};
const de_Tasks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Task(entry, context);
    });
    return retVal;
};
const de_TaskSet = (output, context) => {
    return {
        capacityProviderStrategy: output.capacityProviderStrategy != null
            ? de_CapacityProviderStrategy(output.capacityProviderStrategy, context)
            : undefined,
        clusterArn: (0, smithy_client_1.expectString)(output.clusterArn),
        computedDesiredCount: (0, smithy_client_1.expectInt32)(output.computedDesiredCount),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        externalId: (0, smithy_client_1.expectString)(output.externalId),
        id: (0, smithy_client_1.expectString)(output.id),
        launchType: (0, smithy_client_1.expectString)(output.launchType),
        loadBalancers: output.loadBalancers != null ? de_LoadBalancers(output.loadBalancers, context) : undefined,
        networkConfiguration: output.networkConfiguration != null ? de_NetworkConfiguration(output.networkConfiguration, context) : undefined,
        pendingCount: (0, smithy_client_1.expectInt32)(output.pendingCount),
        platformFamily: (0, smithy_client_1.expectString)(output.platformFamily),
        platformVersion: (0, smithy_client_1.expectString)(output.platformVersion),
        runningCount: (0, smithy_client_1.expectInt32)(output.runningCount),
        scale: output.scale != null ? de_Scale(output.scale, context) : undefined,
        serviceArn: (0, smithy_client_1.expectString)(output.serviceArn),
        serviceRegistries: output.serviceRegistries != null ? de_ServiceRegistries(output.serviceRegistries, context) : undefined,
        stabilityStatus: (0, smithy_client_1.expectString)(output.stabilityStatus),
        stabilityStatusAt: output.stabilityStatusAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.stabilityStatusAt)))
            : undefined,
        startedBy: (0, smithy_client_1.expectString)(output.startedBy),
        status: (0, smithy_client_1.expectString)(output.status),
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        taskDefinition: (0, smithy_client_1.expectString)(output.taskDefinition),
        taskSetArn: (0, smithy_client_1.expectString)(output.taskSetArn),
        updatedAt: output.updatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.updatedAt))) : undefined,
    };
};
const de_TaskSetNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_TaskSets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_TaskSet(entry, context);
    });
    return retVal;
};
const de_Tmpfs = (output, context) => {
    return {
        containerPath: (0, smithy_client_1.expectString)(output.containerPath),
        mountOptions: output.mountOptions != null ? de_StringList(output.mountOptions, context) : undefined,
        size: (0, smithy_client_1.expectInt32)(output.size),
    };
};
const de_TmpfsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Tmpfs(entry, context);
    });
    return retVal;
};
const de_Ulimit = (output, context) => {
    return {
        hardLimit: (0, smithy_client_1.expectInt32)(output.hardLimit),
        name: (0, smithy_client_1.expectString)(output.name),
        softLimit: (0, smithy_client_1.expectInt32)(output.softLimit),
    };
};
const de_UlimitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Ulimit(entry, context);
    });
    return retVal;
};
const de_UnsupportedFeatureException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_UntagResourceResponse = (output, context) => {
    return {};
};
const de_UpdateCapacityProviderResponse = (output, context) => {
    return {
        capacityProvider: output.capacityProvider != null ? de_CapacityProvider(output.capacityProvider, context) : undefined,
    };
};
const de_UpdateClusterResponse = (output, context) => {
    return {
        cluster: output.cluster != null ? de_Cluster(output.cluster, context) : undefined,
    };
};
const de_UpdateClusterSettingsResponse = (output, context) => {
    return {
        cluster: output.cluster != null ? de_Cluster(output.cluster, context) : undefined,
    };
};
const de_UpdateContainerAgentResponse = (output, context) => {
    return {
        containerInstance: output.containerInstance != null ? de_ContainerInstance(output.containerInstance, context) : undefined,
    };
};
const de_UpdateContainerInstancesStateResponse = (output, context) => {
    return {
        containerInstances: output.containerInstances != null ? de_ContainerInstances(output.containerInstances, context) : undefined,
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
    };
};
const de_UpdateInProgressException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_UpdateServicePrimaryTaskSetResponse = (output, context) => {
    return {
        taskSet: output.taskSet != null ? de_TaskSet(output.taskSet, context) : undefined,
    };
};
const de_UpdateServiceResponse = (output, context) => {
    return {
        service: output.service != null ? de_Service(output.service, context) : undefined,
    };
};
const de_UpdateTaskProtectionResponse = (output, context) => {
    return {
        failures: output.failures != null ? de_Failures(output.failures, context) : undefined,
        protectedTasks: output.protectedTasks != null ? de_ProtectedTasks(output.protectedTasks, context) : undefined,
    };
};
const de_UpdateTaskSetResponse = (output, context) => {
    return {
        taskSet: output.taskSet != null ? de_TaskSet(output.taskSet, context) : undefined,
    };
};
const de_VersionInfo = (output, context) => {
    return {
        agentHash: (0, smithy_client_1.expectString)(output.agentHash),
        agentVersion: (0, smithy_client_1.expectString)(output.agentVersion),
        dockerVersion: (0, smithy_client_1.expectString)(output.dockerVersion),
    };
};
const de_Volume = (output, context) => {
    return {
        dockerVolumeConfiguration: output.dockerVolumeConfiguration != null
            ? de_DockerVolumeConfiguration(output.dockerVolumeConfiguration, context)
            : undefined,
        efsVolumeConfiguration: output.efsVolumeConfiguration != null
            ? de_EFSVolumeConfiguration(output.efsVolumeConfiguration, context)
            : undefined,
        fsxWindowsFileServerVolumeConfiguration: output.fsxWindowsFileServerVolumeConfiguration != null
            ? de_FSxWindowsFileServerVolumeConfiguration(output.fsxWindowsFileServerVolumeConfiguration, context)
            : undefined,
        host: output.host != null ? de_HostVolumeProperties(output.host, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
    };
};
const de_VolumeFrom = (output, context) => {
    return {
        readOnly: (0, smithy_client_1.expectBoolean)(output.readOnly),
        sourceContainer: (0, smithy_client_1.expectString)(output.sourceContainer),
    };
};
const de_VolumeFromList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_VolumeFrom(entry, context);
    });
    return retVal;
};
const de_VolumeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Volume(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
