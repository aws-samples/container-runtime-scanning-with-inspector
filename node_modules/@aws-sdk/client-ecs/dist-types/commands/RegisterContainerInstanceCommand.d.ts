import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ECSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ECSClient";
import { RegisterContainerInstanceRequest, RegisterContainerInstanceResponse } from "../models/models_0";
/**
 * @public
 *
 * The input for {@link RegisterContainerInstanceCommand}.
 */
export interface RegisterContainerInstanceCommandInput extends RegisterContainerInstanceRequest {
}
/**
 * @public
 *
 * The output of {@link RegisterContainerInstanceCommand}.
 */
export interface RegisterContainerInstanceCommandOutput extends RegisterContainerInstanceResponse, __MetadataBearer {
}
/**
 * @public
 * <note>
 *             <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p>
 *          </note>
 *          <p>Registers an EC2 instance into the specified cluster. This instance becomes available
 * 			to place containers on.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ECSClient, RegisterContainerInstanceCommand } from "@aws-sdk/client-ecs"; // ES Modules import
 * // const { ECSClient, RegisterContainerInstanceCommand } = require("@aws-sdk/client-ecs"); // CommonJS import
 * const client = new ECSClient(config);
 * const input = { // RegisterContainerInstanceRequest
 *   cluster: "STRING_VALUE",
 *   instanceIdentityDocument: "STRING_VALUE",
 *   instanceIdentityDocumentSignature: "STRING_VALUE",
 *   totalResources: [ // Resources
 *     { // Resource
 *       name: "STRING_VALUE",
 *       type: "STRING_VALUE",
 *       doubleValue: Number("double"),
 *       longValue: Number("long"),
 *       integerValue: Number("int"),
 *       stringSetValue: [ // StringList
 *         "STRING_VALUE",
 *       ],
 *     },
 *   ],
 *   versionInfo: { // VersionInfo
 *     agentVersion: "STRING_VALUE",
 *     agentHash: "STRING_VALUE",
 *     dockerVersion: "STRING_VALUE",
 *   },
 *   containerInstanceArn: "STRING_VALUE",
 *   attributes: [ // Attributes
 *     { // Attribute
 *       name: "STRING_VALUE", // required
 *       value: "STRING_VALUE",
 *       targetType: "container-instance",
 *       targetId: "STRING_VALUE",
 *     },
 *   ],
 *   platformDevices: [ // PlatformDevices
 *     { // PlatformDevice
 *       id: "STRING_VALUE", // required
 *       type: "GPU", // required
 *     },
 *   ],
 *   tags: [ // Tags
 *     { // Tag
 *       key: "STRING_VALUE",
 *       value: "STRING_VALUE",
 *     },
 *   ],
 * };
 * const command = new RegisterContainerInstanceCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @param RegisterContainerInstanceCommandInput - {@link RegisterContainerInstanceCommandInput}
 * @returns {@link RegisterContainerInstanceCommandOutput}
 * @see {@link RegisterContainerInstanceCommandInput} for command's `input` shape.
 * @see {@link RegisterContainerInstanceCommandOutput} for command's `response` shape.
 * @see {@link ECSClientResolvedConfig | config} for ECSClient's `config` shape.
 *
 * @throws {@link ClientException} (client fault)
 *  <p>These errors are usually caused by a client action. This client action might be using
 * 			an action or resource on behalf of a user that doesn't have permissions to use the
 * 			action or resource,. Or, it might be specifying an identifier that isn't valid.</p>
 *
 * @throws {@link InvalidParameterException} (client fault)
 *  <p>The specified parameter isn't valid. Review the available parameters for the API
 * 			request.</p>
 *
 * @throws {@link ServerException} (server fault)
 *  <p>These errors are usually caused by a server issue.</p>
 *
 *
 */
export declare class RegisterContainerInstanceCommand extends $Command<RegisterContainerInstanceCommandInput, RegisterContainerInstanceCommandOutput, ECSClientResolvedConfig> {
    readonly input: RegisterContainerInstanceCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: RegisterContainerInstanceCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ECSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterContainerInstanceCommandInput, RegisterContainerInstanceCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
